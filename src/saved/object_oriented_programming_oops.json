[
    {
        "id": 1,
        "Question": "Which was the first purely object oriented programming language developed?",
        "Options": [
            "a) Java",
            "b) C++",
            "c) SmallTalk",
            "d) Kotlin",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 2,
        "Question": "Which of the following best defines a class?",
        "Options": [
            "a) Parent of an object",
            "b) Instance of an object",
            "c) Blueprint of an object",
            "d) Scope of an object",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 3,
        "Question": "Who invented OOP?",
        "Options": [
            "a) Alan Kay",
            "b) Andrea Ferro",
            "c) Dennis Ritchie",
            "d) Adele Goldberg",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 4,
        "Question": "What is the additional feature in classes that was not in structures?",
        "Options": [
            "a) Data members",
            "b) Member functions",
            "c) Static data allowed",
            "d) Public access specifier",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 5,
        "Question": "Which is not feature of OOP in general definitions?",
        "Options": [
            "a) Code reusability",
            "b) Modularity",
            "c) Duplicate/Redundant data",
            "d) Efficient Code",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 6,
        "Question": "Which Feature of OOP illustrated the code reusability?",
        "Options": [
            "a) Polymorphism",
            "b) Abstraction",
            "c) Encapsulation",
            "d) Inheritance",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 7,
        "Question": "Which language does not support all 4 types of inheritance?",
        "Options": [
            "a) C++",
            "b) Java",
            "c) Kotlin",
            "d) Small Talk",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 8,
        "Question": "How many classes can be defined in a single program?",
        "Options": [
            "a) Only 1",
            "b) Only 100",
            "c) Only 999",
            "d) As many as you want",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 9,
        "Question": "When OOP concept did first came into picture?",
        "Options": [
            "a) 1970’s",
            "b) 1980’s",
            "c) 1993",
            "d) 1995",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 10,
        "Question": "Why Java is Partially OOP language?",
        "Options": [
            "a) It supports usual declaration of primitive data types",
            "b) It doesn’t support all types of inheritance",
            "c) It allows code to be written outside classes",
            "d) It does not support pointers",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 11,
        "Question": "Which concept of OOP is false for C++?",
        "Options": [
            "a) Code can be written without using classes",
            "b) Code must contain at least one class",
            "c) A class must have member functions",
            "d) At least one object should be declared in code",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 12,
        "Question": "Which header file is required in C++ to use OOP?",
        "Options": [
            "a) iostream.h",
            "b) stdio.h",
            "c) stdlib.h",
            "d) OOP can be used without using any header file",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 13,
        "Question": "Which of the two features match each other?",
        "Options": [
            "a) Inheritance and Encapsulation",
            "b) Encapsulation and Polymorphism",
            "c) Encapsulation and Abstraction",
            "d) Abstraction and Polymorphism",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 14,
        "Question": "Which feature allows open recursion, among the following?",
        "Options": [
            "a) Use of this pointer",
            "b) Use of pointers",
            "c) Use of pass by value",
            "d) Use of parameterized constructor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 15,
        "Question": "Which of the following is not type of class?",
        "Options": [
            "a) Abstract Class",
            "b) Final Class",
            "c) Start Class",
            "d) String Class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 16,
        "Question": "Class is pass by _______",
        "Options": [
            "a) Value",
            "b) Reference",
            "c) Value or Reference, depending on program",
            "d) Copy",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 17,
        "Question": "What is default access specifier for data members or member functions declared within a class without any specifier, in C++?",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) Depends on compiler",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 18,
        "Question": "Which is known as a generic class?",
        "Options": [
            "a) Abstract class",
            "b) Final class",
            "c) Template class",
            "d) Efficient Code",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 19,
        "Question": "Size of a class is _____________",
        "Options": [
            "a) Sum of the size of all the variables declared inside the class",
            "b) Sum of the size of all the variables along with inherited variables in the class",
            "c) Size of the largest size of variable",
            "d) Classes doesn’t have any size",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 20,
        "Question": "Which class can have member functions without their implementation?",
        "Options": [
            "a) Default class",
            "b) String class",
            "c) Template class",
            "d) Abstract class",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 21,
        "Question": "Which of the following describes a friend class?",
        "Options": [
            "a) Friend class can access all the private members of the class, of which it is a friend",
            "b) Friend class can only access protected members of the class, of which it is a friend",
            "c) Friend class don’t have any implementation",
            "d) Friend class can’t access any data member of another class but can use it’s methods",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 22,
        "Question": "What is the scope of a class nested inside another class?",
        "Options": [
            "a) Protected scope",
            "b) Private scope",
            "c) Global scope",
            "d) Depends on access specifier and inheritance used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 23,
        "Question": "Which among the following is false, for a member function of a class?",
        "Options": [
            "a) All member functions must be defined",
            "b) Member functions can be defined inside or outside the class body",
            "c) Member functions need not be declared inside the class definition",
            "d) Member functions can be made friend to another class using the friend keyword",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 24,
        "Question": "Which syntax for class definition is wrong?",
        "Options": [
            "a) class student{ };",
            "b) student class{ };",
            "c) class student{ public: student(int a){ } };",
            "d) class student{ student(int a){} };",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 25,
        "Question": "Which of the following pairs are similar?",
        "Options": [
            "a) Class and object",
            "b) Class and structure",
            "c) Structure and object",
            "d) Structure and functions",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 26,
        "Question": "Which among the following is false for class features?",
        "Options": [
            "a) Classes may/may not have both data members and member functions",
            "b) Class definition must be ended with a colon",
            "c) Class can have only member functions with no data members",
            "d) Class is similar to union and structures",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 27,
        "Question": "Instance of which type of class can’t be created?",
        "Options": [
            "a) Anonymous class",
            "b) Nested class",
            "c) Parent class",
            "d) Abstract class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 28,
        "Question": "Which definition best describes an object?",
        "Options": [
            "a) Instance of a class",
            "b) Instance of itself",
            "c) Child of a class",
            "d) Overview of a class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 29,
        "Question": "How many objects can be declared of a specific class in a single program?",
        "Options": [
            "a) 32768",
            "b) 127",
            "c) 1",
            "d) As many as you want",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 30,
        "Question": "Which among the following is false?",
        "Options": [
            "a) Object must be created before using members of a class",
            "b) Memory for an object is allocated only after its constructor is called",
            "c) Objects can’t be passed by reference",
            "d) Objects size depends on its class data members",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 31,
        "Question": "Which of the following is incorrect?",
        "Options": [
            "a) class student{  }s;",
            "b) class student{  };   student s;",
            "c) class student{  }s[];",
            "d) class student{  }; student s[5];",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 32,
        "Question": "The object can’t be __________",
        "Options": [
            "a) Passed by reference",
            "b) Passed by value",
            "c) Passed by copy",
            "d) Passed as function",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 33,
        "Question": "How members of an object are accessed?",
        "Options": [
            "a) Using dot operator/period symbol",
            "b) Using scope resolution operator",
            "c) Using member names directly",
            "d) Using pointer only",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 34,
        "Question": "If a local class is defined in a function, which of the following is true for an object of that class?",
        "Options": [
            "a) Object is accessible outside the function",
            "b) Object can be declared inside any other function",
            "c) Object can be used to call other class members",
            "d) Object can be used/accessed/declared locally in that function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 35,
        "Question": "Which among the following is wrong?",
        "Options": [
            "a) class student{  }; student s;",
            "b) abstract class student{  }; student s;",
            "c) abstract class student{  }s[50000000];",
            "d) abstract class student{  }; class toppers: public student{  }; topper t;",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 36,
        "Question": "Object declared in main() function _____________",
        "Options": [
            "a) Can be used by any other function",
            "b) Can be used by main() function of any other program",
            "c) Can’t be used by any other function",
            "d) Can be accessed using scope resolution operator",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 37,
        "Question": "When an object is returned___________",
        "Options": [
            "a) A temporary object is created to return the value",
            "b) The same object used in function is used to return the value",
            "c) The Object can be returned without creation of temporary object",
            "d) Object are returned implicitly, we can’t say how it happens inside program",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 38,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) class student{  }s1,s2; s1.student()=s2.student();",
            "b) class student{  }s1; class topper{  }t1; s1=t1;",
            "c) class student{  }s1,s2; s1=s2;",
            "d) class student{  }s1; class topper{  }t1; s1.student()=s2.topper();",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 39,
        "Question": "Which feature of OOP indicates code reusability?",
        "Options": [
            "a) Encapsulation",
            "b) Inheritance",
            "c) Abstraction",
            "d) Polymorphism",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 40,
        "Question": "If a function can perform more than 1 type of tasks, where the function name remains same, which feature of OOP is used here?",
        "Options": [
            "a) Encapsulation",
            "b) Inheritance",
            "c) Polymorphism",
            "d) Abstraction",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 41,
        "Question": "If different properties and functions of a real world entity is grouped or embedded into a single element, what is it called in OOP language?",
        "Options": [
            "a) Inheritance",
            "b) Polymorphism",
            "c) Abstraction",
            "d) Encapsulation",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 42,
        "Question": "Which of the following is not a feature of pure OOP?",
        "Options": [
            "a) Classes must be used",
            "b) Inheritance",
            "c) Data may/may not be declared using object",
            "d) Functions Overloading",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 43,
        "Question": "Which among the following doesn’t come under OOP concept?",
        "Options": [
            "a) Platform independent",
            "b) Data binding",
            "c) Message passing",
            "d) Data hiding",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 44,
        "Question": "Which feature may be violated if we don’t use classes in a program?",
        "Options": [
            "a) Inheritance can’t be implemented",
            "b) Object must be used is violated",
            "c) Encapsulation only is violated",
            "d) Basically all the features of OOP gets violated",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 45,
        "Question": "How many basic features of OOP are required for a programming language to be purely OOP?",
        "Options": [
            "a) 7",
            "b) 6",
            "c) 5",
            "d) 4",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 46,
        "Question": "The feature by which one object can interact with another object is _____________",
        "Options": [
            "a) Data transfer",
            "b) Data Binding",
            "c) Message Passing",
            "d) Message reading",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 47,
        "Question": "___________ underlines the feature of Polymorphism in a class.",
        "Options": [
            "a) Nested class",
            "b) Enclosing class",
            "c) Inline function",
            "d) Virtual Function",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 48,
        "Question": "Which feature in OOP is used to allocate additional function to a predefined operator in any language?",
        "Options": [
            "a) Operator Overloading",
            "b) Function Overloading",
            "c) Operator Overriding",
            "d) Function Overriding",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 49,
        "Question": "Which among doesn’t illustrates polymorphism?",
        "Options": [
            "a) Function overloading",
            "b) Function overriding",
            "c) Operator overloading",
            "d) Virtual function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 50,
        "Question": "Which among the following, for a pure OOP language, is true?",
        "Options": [
            "a) The language should follow 3 or more features of OOP",
            "b) The language should follow at least 1 feature of OOP",
            "c) The language must follow only 3 features of OOP",
            "d) The language must follow all the rules of OOP",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 51,
        "Question": "Does OOP provide better security than POP?",
        "Options": [
            "a) Always true for any programming language",
            "b) May not be true with respect to all programming languages",
            "c) It depends on type of program",
            "d) It’s vice-versa is true",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 52,
        "Question": "Which among the following best describes polymorphism?",
        "Options": [
            "a) It is the ability for a message/data to be processed in more than one form",
            "b) It is the ability for a message/data to be processed in only 1 form",
            "c) It is the ability for many messages/data to be processed in one way",
            "d) It is the ability for undefined message/data to be processed in at least one way",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 53,
        "Question": "What do you call the languages that support classes but not polymorphism?",
        "Options": [
            "a) Class based language",
            "b) Procedure Oriented language",
            "c) Object-based language",
            "d) If classes are supported, polymorphism will always be supported",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 54,
        "Question": "Which among the following is the language which supports classes but not polymorphism?",
        "Options": [
            "a) SmallTalk",
            "b) Java",
            "c) C++",
            "d) Ada",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 55,
        "Question": "If same message is passed to objects of several different classes and all of those can respond in a different way, what is this feature called?",
        "Options": [
            "a) Inheritance",
            "b) Overloading",
            "c) Polymorphism",
            "d) Overriding",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 56,
        "Question": "Which type of function among the following shows polymorphism?",
        "Options": [
            "a) Inline function",
            "b) Virtual function",
            "c) Undefined functions",
            "d) Class member functions",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 57,
        "Question": "In case of using abstract class or function overloading, which function is supposed to be called first?",
        "Options": [
            "a) Local function",
            "b) Function with highest priority in compiler",
            "c) Global function",
            "d) Function with lowest priority because it might have been halted since long time, because of low priority",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 58,
        "Question": "Which among the following can’t be used for polymorphism?",
        "Options": [
            "a) Static member functions",
            "b) Member functions overloading",
            "c) Predefined operator overloading",
            "d) Constructor overloading",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 59,
        "Question": "Which among the following can show polymorphism?",
        "Options": [
            "a) Overloading ||",
            "b) Overloading +=",
            "c) Overloading <<",
            "d) Overloading &&",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 60,
        "Question": "Which problem may arise if we use abstract class functions for polymorphism?",
        "Options": [
            "a) All classes are converted as abstract class",
            "b) Derived class must be of abstract type",
            "c) All the derived classes must implement the undefined functions",
            "d) Derived classes can’t redefine the function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 61,
        "Question": "Which among the following is not true for polymorphism?",
        "Options": [
            "a) It is feature of OOP",
            "b) Ease in readability of program",
            "c) Helps in redefining the same functionality",
            "d) Increases overhead of function definition always",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 62,
        "Question": "If 2 classes derive one base class and redefine a function of base class, also overload some operators inside class body. Among these two things of function and operator overloading, where is polymorphism used?",
        "Options": [
            "a) Function overloading only",
            "b) Operator overloading only",
            "c) Both of these are using polymorphism",
            "d) Either function overloading or operator overloading because polymorphism can be applied only once in a program",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 63,
        "Question": "Which among the following best describes encapsulation?",
        "Options": [
            "a) It is a way of combining various data members into a single unit",
            "b) It is a way of combining various member functions into a single unit",
            "c) It is a way of combining various data members and member functions into a single unit which can operate on any data",
            "d) It is a way of combining various data members and member functions that operate on those data members into a single unit",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 64,
        "Question": "If data members are private, what can we do to access them from the class object?",
        "Options": [
            "a) Create public member functions to access those data members",
            "b) Create private member functions to access those data members",
            "c) Create protected member functions to access those data members",
            "d) Private data members can never be accessed from outside the class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 65,
        "Question": "While using encapsulation, which among the following is possible?",
        "Options": [
            "a) Code modification can be additional overhead",
            "b) Data member’s data type can be changed without changing any other code",
            "c) Data member’s type can’t be changed, or whole code have to be changed",
            "d) Member functions can be used to change the data type of data members",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 66,
        "Question": "Which feature can be implemented using encapsulation?",
        "Options": [
            "a) Inheritance",
            "b) Abstraction",
            "c) Polymorphism",
            "d) Overloading",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 67,
        "Question": "Find which of the following uses encapsulation?",
        "Options": [
            "a) void main(){  int a;  void fun( int a=10;  cout<<a); fun(); }",
            "b) class student{ int a;   public: int b;};",
            "c) class student{int a; public: void disp(){ cout<<a;} };",
            "d) struct topper{ char name[10]; public : int marks; }",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 68,
        "Question": "Encapsulation helps in writing ___________ classes in java.",
        "Options": [
            "a) Mutable",
            "b) Abstract",
            "c) Wrapper",
            "d) Immutable",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 69,
        "Question": "Which among the following should be encapsulated?",
        "Options": [
            "a) The data which is prone to change is near future",
            "b) The data prone to change in long terms",
            "c) The data which is intended to be changed",
            "d) The data which belongs to some other class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 70,
        "Question": "How can Encapsulation be achieved?",
        "Options": [
            "a) Using Access Specifiers",
            "b) Using only private members",
            "c) Using inheritance",
            "d) Using Abstraction",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 71,
        "Question": "Which among the following violates the principle of encapsulation almost always?",
        "Options": [
            "a) Local variables",
            "b) Global variables",
            "c) Public variables",
            "d) Array variables",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 72,
        "Question": "Which among the following would destroy the encapsulation mechanism if it was allowed in programming?",
        "Options": [
            "a) Using access declaration for private members of base class",
            "b) Using access declaration for public members of base class",
            "c) Using access declaration for local variable of main() function",
            "d) Using access declaration for global variables",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 73,
        "Question": "Which among the following can be a concept against encapsulation rules?",
        "Options": [
            "a) Using function pointers",
            "b) Using char* string pointer to be passed to non-member function",
            "c) Using object array",
            "d) Using any kind of pointer/array address in passing to another function",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 74,
        "Question": "Using encapsulation data security is ___________",
        "Options": [
            "a) Not ensured",
            "b) Ensured to some extent",
            "c) Purely ensured",
            "d) Very low",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 75,
        "Question": "Which among the following best defines abstraction?",
        "Options": [
            "a) Hiding the implementation",
            "b) Showing the important data",
            "c) Hiding the important data",
            "d) Hiding the implementation and showing only the features",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 76,
        "Question": "Hiding the implementation complexity can ____________",
        "Options": [
            "a) Make the programming easy",
            "b) Make the programming complex",
            "c) Provide more number of features",
            "d) Provide better features",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 77,
        "Question": "Class is _________ abstraction.",
        "Options": [
            "a) Object",
            "b) Logical",
            "c) Real",
            "d) Hypothetical",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 78,
        "Question": "Object is ________ abstraction.",
        "Options": [
            "a) Object",
            "b) Logical",
            "c) Real",
            "d) Hypothetical",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 79,
        "Question": "Abstraction gives higher degree of ________",
        "Options": [
            "a) Class usage",
            "b) Program complexity",
            "c) Idealized interface",
            "d) Unstable interface",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 80,
        "Question": "Abstraction can apply to ____________",
        "Options": [
            "a) Control and data",
            "b) Only data",
            "c) Only control",
            "d) Classes",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 81,
        "Question": "Which among the following can be viewed as combination of abstraction of data and code.",
        "Options": [
            "a) Class",
            "b) Object",
            "c) Inheritance",
            "d) Interfaces",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 82,
        "Question": "Abstraction principle includes___________",
        "Options": [
            "a) Use abstraction at its minimum",
            "b) Use abstraction to avoid longer codes",
            "c) Use abstraction whenever possible to avoid duplication",
            "d) Use abstraction whenever possible to achieve OOP",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 83,
        "Question": "Encapsulation and abstraction differ as ____________",
        "Options": [
            "a) Binding and Hiding respectively",
            "b) Hiding and Binding respectively",
            "c) Can be used any way",
            "d) Hiding and hiding respectively",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 84,
        "Question": "In terms of stream and files ____________",
        "Options": [
            "a) Abstraction is called a stream and device is called a file",
            "b) Abstraction is called a file and device is called a stream",
            "c) Abstraction can be called both file and stream",
            "d) Abstraction can’t be defined in terms of files and stream",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 85,
        "Question": "If two classes combine some private data members and provides public member functions to access and manipulate those data members. Where is abstraction used?",
        "Options": [
            "a) Using private access specifier for data members",
            "b) Using class concept with both data members and member functions",
            "c) Using public member functions to access and manipulate the data members",
            "d) Data is not sufficient to decide what is being used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 86,
        "Question": "A phone is made up of many components like motherboard, camera, sensors and etc. If the processor represents all the functioning of phone, display shows the display only, and the phone is represented as a whole. Which among the following have highest level of abstraction?",
        "Options": [
            "a) Motherboard",
            "b) Display",
            "c) Camera",
            "d) Phone",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 87,
        "Question": "Which among the following is not a level of abstraction?",
        "Options": [
            "a) Logical level",
            "b) Physical level",
            "c) View level",
            "d) External level",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 88,
        "Question": "Using higher degree of abstraction __________",
        "Options": [
            "a) May get unsafe",
            "b) May reduce readability",
            "c) Can be safer",
            "d) Can increase vulnerability",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 89,
        "Question": "Which among the following is called first, automatically, whenever an object is created?",
        "Options": [
            "a) Class",
            "b) Constructor",
            "c) New",
            "d) Trigger",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 90,
        "Question": "Which among the following is not a necessary condition for constructors?",
        "Options": [
            "a) Its name must be same as that of class",
            "b) It must not have any return type",
            "c) It must contain a definition body",
            "d) It can contains arguments",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 91,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) class student{ public: int student(){} };",
            "b) class student{ public: void student (){} };",
            "c) class student{ public: student{}{}  };",
            "d) class student{ public: student(){} };",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 92,
        "Question": "In which access should a constructor be defined, so that object of the class can be created in any function?",
        "Options": [
            "a) Public",
            "b) Protected",
            "c) Private",
            "d) Any access specifier will work",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 93,
        "Question": "How many types of constructors are available for use in general (with respect to parameters)?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 94,
        "Question": "If class C inherits class B. And B has inherited class A. Then while creating the object of class C, what will be the sequence of constructors getting called?",
        "Options": [
            "a) Constructor of C then B, finally of A",
            "b) Constructor of A then C, finally of B",
            "c) Constructor of C then A, finally B",
            "d) Constructor of A then B, finally C",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 95,
        "Question": "Which among the following is true for copy constructor?",
        "Options": [
            "a) The argument object is passed by reference",
            "b) It can be defined with zero arguments",
            "c) Used when an object is passed by value to a function",
            "d) Used when a function returns an object",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 96,
        "Question": "If the object is passed by value to a copy constructor?",
        "Options": [
            "a) Only public members will be accessible to be copied",
            "b) That will work normally",
            "c) Compiler will give out of memory error",
            "d) Data stored in data members won’t be accessible",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 97,
        "Question": "Which among the following helps to create a temporary instance?",
        "Options": [
            "a) Implicit call to a default constructor",
            "b) Explicit call to a copy constructor",
            "c) Implicit call to a parameterized constructor",
            "d) Explicit call to a constructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 98,
        "Question": "For constructor overloading, each constructor must differ in ___________ and __________",
        "Options": [
            "a) Number of arguments and type of arguments",
            "b) Number of arguments and return type",
            "c) Return type and type of arguments",
            "d) Return type and definition",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 99,
        "Question": "How many types of constructors are available, in general, in any language?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 100,
        "Question": "Which constructor is called while assigning some object with another?",
        "Options": [
            "a) Default",
            "b) Parameterized",
            "c) Copy",
            "d) Direct assignment is used",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 101,
        "Question": "It’s necessary to pass object by reference in copy constructor because ____________",
        "Options": [
            "a) Constructor is not called in pass by reference",
            "b) Constructor is called in pass by reference only",
            "c) It passes the address of new constructor to be created",
            "d) It passes the address of new object to be created",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 102,
        "Question": "Which specifier applies only to the constructors?",
        "Options": [
            "a) Public",
            "b) Protected",
            "c) Implicit",
            "d) Explicit",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 103,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Default constructor can’t be defined by the programmer",
            "b) Default parameters constructor isn’t equivalent to the default constructor",
            "c) Default constructor can be called explicitly",
            "d) Default constructor is and always called implicitly only",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 104,
        "Question": "Which type of constructor can’t have a return type?",
        "Options": [
            "a) Default",
            "b) Parameterized",
            "c) Copy",
            "d) Constructors don’t have a return type",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 105,
        "Question": "Why do we use static constructors?",
        "Options": [
            "a) To initialize the static members of class",
            "b) To initialize all the members with static value",
            "c) To delete the static members when not required",
            "d) To clear all the static members initialized values",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 106,
        "Question": "When and how many times a static constructor is called?",
        "Options": [
            "a) Created at time of object destruction",
            "b) Called at first time when an object is created and only one time",
            "c) Called at first time when an object is created and called with every new object creation",
            "d) Called whenever an object go out of scope",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 107,
        "Question": "Which among the following is true for static constructor?",
        "Options": [
            "a) Static constructors are called with every new object",
            "b) Static constructors are used initialize data members to zero always",
            "c) Static constructors can’t be parameterized constructors",
            "d) Static constructors can be used to initialize the non-static members also",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 108,
        "Question": "Default constructor initializes all data members as ___________",
        "Options": [
            "a) All numeric member with some garbage values and string to random string",
            "b) All numeric member with some garbage values and string to null",
            "c) All numeric member with zero and strings to random value",
            "d) All numeric member with zero and strings to null",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 109,
        "Question": "When is the static constructor called?",
        "Options": [
            "a) After the first instance is created",
            "b) Before default constructor call of first instance",
            "c) Before first instance is created",
            "d) At time of creation of first instance",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 110,
        "Question": "If constructors of a class are defined in private access, then __________",
        "Options": [
            "a) The class can’t be inherited",
            "b) The class can be inherited",
            "c) Instance can be created only in another class",
            "d) Instance can be created anywhere in the program",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 111,
        "Question": "Copy constructor is a constructor which ________________",
        "Options": [
            "a) Creates an object by copying values from any other object of same class",
            "b) Creates an object by copying values from first object created for that class",
            "c) Creates an object by copying values from another object of another class",
            "d) Creates an object by initializing it with another previously created object of same class",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 112,
        "Question": "The copy constructor can be used to ____________",
        "Options": [
            "a) Initialize one object from another object of same type",
            "b) Initialize one object from another object of different type",
            "c) Initialize more than one object from another object of same type at a time",
            "d) Initialize all the objects of a class to another object of another class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 113,
        "Question": "If two classes have exactly same data members and member function and only they differ by class name. Can copy constructor be used to initialize one class object with another class object?",
        "Options": [
            "a) Yes, possible",
            "b) Yes, because the members are same",
            "c) No, not possible",
            "d) No, but possible if constructor is also same",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 114,
        "Question": "The copy constructors can be used to ________",
        "Options": [
            "a) Copy an object so that it can be passed to a class",
            "b) Copy an object so that it can be passed to a function",
            "c) Copy an object so that it can be passed to another primitive type variable",
            "d) Copy an object for type casting",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 115,
        "Question": "Which returning an object, we can use ____________",
        "Options": [
            "a) Default constructor",
            "b) Zero argument constructor",
            "c) Parameterized constructor",
            "d) Copy constructor",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 116,
        "Question": "If programmer doesn’t define any copy constructor then _____________",
        "Options": [
            "a) Compiler provides an implicit copy constructor",
            "b) Compiler gives an error",
            "c) The objects can’t be assigned with another objects",
            "d) The program gives run time error if copying is used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 117,
        "Question": "If a class implements some dynamic memory allocations and pointers then _____________",
        "Options": [
            "a) Copy constructor must be defined",
            "b) Copy constructor must not be defined",
            "c) Copy constructor can’t be defined",
            "d) Copy constructor will not be used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 118,
        "Question": "What is the syntax of copy constructor?",
        "Options": [
            "a) classname (classname &obj){ /*constructor definition*/ }",
            "b) classname (cont classname obj){ /*constructor definition*/ }",
            "c) classname (cont classname &obj){ /*constructor definition*/ }",
            "d) classname (cont &obj){ /*constructor definition*/ }",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 119,
        "Question": "Object being passed to a copy constructor ___________",
        "Options": [
            "a) Must be passed by reference",
            "b) Must be passed by value",
            "c) Must be passed with integer type",
            "d) Must not be mentioned in parameter list",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 120,
        "Question": "Out of memory error is given when the object _____________ to the copy constructor.",
        "Options": [
            "a) Is passed with & symbol",
            "b) Is passed by reference",
            "c) Is passed as <classname &obj>",
            "d) Is not passed by reference",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 121,
        "Question": "Copy constructor will be called whenever the compiler __________",
        "Options": [
            "a) Generates implicit code",
            "b) Generates member function calls",
            "c) Generates temporary object",
            "d) Generates object operations",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 122,
        "Question": "The deep copy is possible only with the help of __________",
        "Options": [
            "a) Implicit copy constructor",
            "b) User defined copy constructor",
            "c) Parameterized constructor",
            "d) Default constructor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 123,
        "Question": "Can a copy constructor be made private?",
        "Options": [
            "a) Yes, always",
            "b) Yes, if no other constructor is defined",
            "c) No, never",
            "d) No, private members can’t be accessed",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 124,
        "Question": "The arguments to a copy constructor _____________",
        "Options": [
            "a) Must be const",
            "b) Must not be cosnt",
            "c) Must be integer type",
            "d) Must be static",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 125,
        "Question": "Which among the following best describes constructor overloading?",
        "Options": [
            "a) Defining one constructor in each class of a program",
            "b) Defining more than one constructor in single class",
            "c) Defining more than one constructor in single class with different signature",
            "d) Defining destructor with each constructor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 126,
        "Question": "Can constructors be overloaded in derived class?",
        "Options": [
            "a) Yes, always",
            "b) Yes, if derived class has no constructor",
            "c) No, programmer can’t do it",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 127,
        "Question": "Does constructor overloading include different return types for constructors to be overloaded?",
        "Options": [
            "a) Yes, if return types are different, signature becomes different",
            "b) Yes, because return types can differentiate two functions",
            "c) No, return type can’t differentiate two functions",
            "d) No, constructors doesn’t have any return type",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 128,
        "Question": "Which among the following is possible way to overload constructor?",
        "Options": [
            "a) Define default constructor, 1 parameter constructor and 2 parameter constructor",
            "b) Define default constructor, zero argument constructor and 1 parameter constructor",
            "c) Define default constructor, and 2 other parameterized constructors with same signature",
            "d) Define 2 default constructors",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 129,
        "Question": "Which among the following is false for a constructor?",
        "Options": [
            "a) Constructors doesn’t have a return value",
            "b) Constructors are always user defined",
            "c) Constructors are overloaded with different signature",
            "d) Constructors may or may not have any arguments being accepted",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 130,
        "Question": "When is the constructor called for an object?",
        "Options": [
            "a) As soon as overloading is required",
            "b) As soon as class is derived",
            "c) As soon as class is created",
            "d) As soon as object is created",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 131,
        "Question": "Which among the following function can be used to call default constructor implicitly in java?",
        "Options": [
            "a) this()",
            "b) that()",
            "c) super()",
            "d) sub()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 132,
        "Question": "Why do we use constructor overloading?",
        "Options": [
            "a) To use different types of constructors",
            "b) Because it’s a feature provided",
            "c) To initialize the object in different ways",
            "d) To differentiate one constructor from another",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 133,
        "Question": "If programmer have defined parameterized constructor only, then __________________",
        "Options": [
            "a) Default constructor will not be created by the compiler implicitly",
            "b) Default constructor will be created by the compiler implicitly",
            "c) Default constructor will not be created but called at runtime",
            "d) Compile time error",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 134,
        "Question": "Which among the following is not valid in java?",
        "Options": [
            "a) Constructor overloading",
            "b) Recursive constructor call",
            "c) Default value constructors",
            "d) String argument constructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 135,
        "Question": "What are we only create an object but don’t call any constructor for it in java?",
        "Options": [
            "a) Implicit constructor will be called",
            "b) Object is initialized to some null values",
            "c) Object is not created",
            "d) Object is created but points to null",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 136,
        "Question": "Which among the following is false?",
        "Options": [
            "a) Constructor can’t be overloaded in Kotlin",
            "b) Constructors can’t be called recursively in java",
            "c) Constructors can be overloaded in C++",
            "d) Constructors overloading depends on different signatures",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 137,
        "Question": "Which is correct syntax?",
        "Options": [
            "a) classname objectname= new() integer;",
            "b) classname objectname= new classname;",
            "c) classname objectname= new classname();",
            "d) classname objectname= new() classname();",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 138,
        "Question": "Which among the following best describes the constructors?",
        "Options": [
            "a) A function which is called whenever an object is referenced",
            "b) A function which is called whenever an object is created to initialize the members",
            "c) A function which is called whenever an object is assigned to copy the values",
            "d) A function which is called whenever an object is to be given values for members",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 139,
        "Question": "Which among the following best describes destructor?",
        "Options": [
            "a) A function which is called just before the objects are destroyed",
            "b) A function which is called after each reference to the object",
            "c) A function which is called after termination of the program",
            "d) A function which is called before calling any member function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 140,
        "Question": "Which among the following represents correct constructor?",
        "Options": [
            "a) ()classname",
            "b) ~classname()",
            "c) –classname()",
            "d) classname()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 141,
        "Question": "Which among the following is correct syntax for the destructors?",
        "Options": [
            "a) classname()",
            "b) ()classname",
            "c) ~classname()",
            "d) -classname()",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 142,
        "Question": "Which among the following is true?",
        "Options": [
            "a) First the constructor of parent classes are called in sequence of inheritance",
            "b) First the constructor of child classes are called in the sequence of inheritance",
            "c) First constructor called is of the object being created",
            "d) Constructors are called randomly",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 143,
        "Question": "What is the sequence of destructors call?",
        "Options": [
            "a) Same order as that of the constructors call",
            "b) Random order",
            "c) According to the priority",
            "d) Revere of the order of constructor call",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 144,
        "Question": "The destructors _____________________",
        "Options": [
            "a) Can have maximum one argument",
            "b) Can’t have any argument",
            "c) Can have more than one argument",
            "d) Can’t have more than 3 arguments",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 145,
        "Question": "Destructor calls ________________ (C++)",
        "Options": [
            "a) Are only implicit",
            "b) Are only explicit",
            "c) Can be implicit or explicit",
            "d) Are made at end of program only",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 146,
        "Question": "Number of destructors called are ____________",
        "Options": [
            "a) Always equal to number of constructors called",
            "b) Always less than the number of constructors called",
            "c) Always greater than the number of constructors called",
            "d) Always less than or equal to number of constructors",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 147,
        "Question": "For explicit call _________________",
        "Options": [
            "a) The destructor must be private",
            "b) The destructor must be public",
            "c) The destructor must be protected",
            "d) The destructor must be defined outside the class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 148,
        "Question": "Which among the following is true for destructors?",
        "Options": [
            "a) Destructors can be overloaded",
            "b) Destructors can be define more than one time",
            "c) Destructors can’t be overloaded",
            "d) Destructors are overloaded in derived classes",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 149,
        "Question": "The constructor _____________",
        "Options": [
            "a) Have a return type",
            "b) May have a return type",
            "c) Of derived classes have return type",
            "d) Doesn’t have a return type",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 150,
        "Question": "The destructors ____________",
        "Options": [
            "a) Have a return type",
            "b) May have a return type",
            "c) Of derived classes have return type",
            "d) Doesn’t have a return type",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 151,
        "Question": "Which among the following describes a destructor?",
        "Options": [
            "a) A special function that is called to free the resources, acquired by the object",
            "b) A special function that is called to delete the class",
            "c) A special function that is called anytime to delete an object",
            "d) A special function that is called to delete all the objects of a class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 152,
        "Question": "When a destructor is called?",
        "Options": [
            "a) After the end of object life",
            "b) Anytime in between object’s lifespan",
            "c) At end of whole program",
            "d) Just before the end of object life",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 153,
        "Question": "Which among the following is correct for abstract class destructors?",
        "Options": [
            "a) It doesn’t have destructors",
            "b) It has destructors",
            "c) It may or may not have destructors",
            "d) It contains an implicit destructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 154,
        "Question": "If in multiple inheritance, class C inherits class B, and Class B inherits class A. In which sequence are their destructors called if an object of class C was declared?",
        "Options": [
            "a) ~C() then ~B() then ~A()",
            "b) ~B() then ~C() then ~A()",
            "c) ~A() then ~B() then ~C()",
            "d) ~C() then ~A() then ~B()",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 155,
        "Question": "When is the destructor of a global object called?",
        "Options": [
            "a) Just before end of program",
            "b) Just after end of program",
            "c) With the end of program",
            "d) Anytime when object is not needed",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 156,
        "Question": "How the constructors and destructors can be differentiated?",
        "Options": [
            "a) Destructor have a return type but constructor doesn’t",
            "b) Destructors can’t be defined by the programmer, but constructors can be defined",
            "c) Destructors are preceded with a tilde (~) symbol, and constructor doesn’t",
            "d) Destructors are same as constructors in syntax",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 157,
        "Question": "Destructors can be ________",
        "Options": [
            "a) Abstract type",
            "b) Virtual",
            "c) Void",
            "d) Any type depending on situation",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 158,
        "Question": "Global destructors execute in ___________ order after main function is terminated.",
        "Options": [
            "a) Sequential",
            "b) Random",
            "c) Reverse",
            "d) Depending on priority",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 159,
        "Question": "When is it advised to have user defined destructor?",
        "Options": [
            "a) When class contains some pointer to memory allocated in class",
            "b) When a class contains static variables",
            "c) When a class contains static functions",
            "d) When a class is inheriting another class only",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 160,
        "Question": "Which among the following is correct for the destructors concept?",
        "Options": [
            "a) Destructors can be overloaded",
            "b) Destructors can have only one parameter at maximum",
            "c) Destructors are always called after object goes out of scope",
            "d) There can be only one destructor in a class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 161,
        "Question": "When an object is passed to a function, its copy is made in the function and then ______________",
        "Options": [
            "a) The destructor of the copy is called when function is returned",
            "b) The destructor is never called in this case",
            "c) The destructor is called but it is always implicit",
            "d) The destructor must be user defined",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 162,
        "Question": "What happens when an object is passed by reference?",
        "Options": [
            "a) Destructor is not called",
            "b) Destructor is called at end of function",
            "c) Destructor is called when function is out of scope",
            "d) Destructor is called when called explicitly",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 163,
        "Question": "How many types of access specifiers are provided in OOP (C++)?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 164,
        "Question": "Which among the following can be used together in a single class?",
        "Options": [
            "a) Only private",
            "b) Private and Protected together",
            "c) Private and Public together",
            "d) All three together",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 165,
        "Question": "Which among the following can restrict class members to get inherited?",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) All three",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 166,
        "Question": "Which access specifier is used when no access specifier is used with a member of class (java)?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Protected",
            "d) Public",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 167,
        "Question": "Which specifier allows a programmer to make the private members which can be inherited?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Protected",
            "d) Protected and default",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 168,
        "Question": "Which among the following is false?",
        "Options": [
            "a) Private members can be accessed using friend functions",
            "b) Member functions can be made private",
            "c) Default members can’t be inherited",
            "d) Public members are accessible from other classes also",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 169,
        "Question": "If a class has all the private members, which specifier will be used for its implicit constructor?",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Protected",
            "d) Default",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 170,
        "Question": "If class A has add() function with protected access, and few other members in public. Then class B inherits class A privately. Will the user will not be able to call _________ from the object of class B.",
        "Options": [
            "a) Any function of class A",
            "b) The add() function of class A",
            "c) Any member of class A",
            "d) Private, protected and public members of class A",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 171,
        "Question": "Which access specifier should be used in a class where the instances can’t be created?",
        "Options": [
            "a) Private default constructor",
            "b) All private constructors",
            "c) Only default constructor to be public",
            "d) Only default constructor to be protected",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 172,
        "Question": "On which specifier’s data, does the size of a class’s object depend?",
        "Options": [
            "a) All the data members are added",
            "b) Only private members are added",
            "c) Only public members are added",
            "d) Only default data members are added",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 173,
        "Question": "If class B inherits class A privately. And class B has a friend function. Will the friend function be able to access the private member of class A?",
        "Options": [
            "a) Yes, because friend function can access all the members",
            "b) Yes, because friend function is of class B",
            "c) No, because friend function can only access private members of friend class",
            "d) No, because friend function can access private member of class A also",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 174,
        "Question": "If an abstract class has all the private members, then _________",
        "Options": [
            "a) No class will be able to implement members of abstract class",
            "b) Only single inheritance class can implement its members",
            "c) Only other enclosing classes will be able to implement those members",
            "d) No class will be able to access those members but can implement.",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 175,
        "Question": "Which access specifier should be used so that all the parent class members can be inherited and accessed from outside the class?",
        "Options": [
            "a) Private",
            "b) Default or public",
            "c) Protected or private",
            "d) Public",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 176,
        "Question": "Which access specifier is usually used for data members of a class?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Protected",
            "d) Public",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 177,
        "Question": "Which specifier should be used for member functions of a class?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Protected",
            "d) Public",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 178,
        "Question": "If a function has to be called only by using other member functions of the class, what should be the access specifier used for that function?",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) Default",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 179,
        "Question": "Which among the following is correct to call a private member from outside the class?",
        "Options": [
            "a) object.memberfunction( parameters );",
            "b) object->memberfunction( parameters );",
            "c) object->memberfunction( parameteres); or object.memberfunction( parameters );",
            "d) Not possible",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 180,
        "Question": "If private members have to be accessed directly from outside the class but the access specifier must not be changed, what should be done?",
        "Options": [
            "a) Specifier must be changed",
            "b) Friend function should be used",
            "c) Other public members should be used",
            "d) It is not possible",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 181,
        "Question": "Which access specifier is/are most secure during inheritance?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Protected",
            "d) Private and default",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 182,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Private member functions can’t be overloaded",
            "b) Private member functions can be overridden",
            "c) Private member functions can’t be overloaded with a public member",
            "d) Private member  function can’t be overridden",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 183,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) Private specifier must be used before public specifier",
            "b) Private specifier must be used before protected specifier",
            "c) Private specifier must be used first",
            "d) Private specifier can be used anywhere in class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 184,
        "Question": "Which among the following best describes the protected specifier?",
        "Options": [
            "a) Members are most secure and can’t be used outside class",
            "b) Members are secure but can be used outside the class",
            "c) Members are secure as private, but can be inherited",
            "d) Members are secure like private, but can’t be inherited",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 185,
        "Question": "If a constructor is defined in protected access, then?",
        "Options": [
            "a) It’s instance can be created inside the subclasses",
            "b) It’s instance can be created anywhere in the program",
            "c) It’s instance can be created inside the subclasses and main() function",
            "d) It’s instance can be created inside the parent class only",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 186,
        "Question": "If the protected members are to be made accessible only to the nearest subclass and no further subclasses, which access specifier should be used in inheritance?",
        "Options": [
            "a) The sub class should inherit the parent class privately",
            "b) The sub class should inherit the parent class as protected",
            "c) The sub class should inherit the parent class as public",
            "d) The sub class can use any access modifier",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 187,
        "Question": "Protected members differ from default members as _______",
        "Options": [
            "a) Protected members can be accessed outside package using inheritance, but default can’t",
            "b) Default members can be accessed outside package using inheritance, but protected can’t",
            "c) Protected members are allowed for inheritance but Default members are not allowed",
            "d) Both are same",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 188,
        "Question": "If all the members are defined in protected specifier then? (Constructors not considered)",
        "Options": [
            "a) Instance of class can’t be created",
            "b) Instance of class can be created anywhere",
            "c) Instance of class can be created only in subclasses",
            "d) Instance of class can be created only in main() function",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 189,
        "Question": "If protected inheritance is used then _____",
        "Options": [
            "a) Public members become public in subclass",
            "b) Protected members become public in subclass",
            "c) Protected members become protected in subclass",
            "d) Protected and Public members become protected in subclass",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 190,
        "Question": "If protected members are to be accessed from outside the class then__________",
        "Options": [
            "a) Members must be inherited publicly in subclass",
            "b) Members must accessed using class pointers",
            "c) Members must be accessed as usual",
            "d) Members must be made public",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 191,
        "Question": "Which among the following can use protected access specifier?",
        "Options": [
            "a) Members which may be used in other packages",
            "b) Members which have to be secure and should be used by other packages/subclass",
            "c) Members which have to be accessed from anywhere in the program",
            "d) Members which have to be as secure as private but can be used by main() function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 192,
        "Question": "If a class have default constructor defined in private access, and one parameter constructor in protected mode, how will it be possible to create instance of object?",
        "Options": [
            "a) Define a constructor in public access with different signature",
            "b) Directly create the object in the subclass",
            "c) Directly create the object in main() function",
            "d) Not possible",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 193,
        "Question": "If the members have to be accessed from anywhere in the program and other packages also, which access specifier should be used?",
        "Options": [
            "a) Public",
            "b) Private",
            "c) Protected",
            "d) Default",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 194,
        "Question": "Which among the following have least security according to the access permissions allowed?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Protected",
            "d) Public",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 195,
        "Question": "Which among the following can be used for outermost class access specifier in java?",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Default",
            "d) Default or Public",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 196,
        "Question": "If members of a super class are public, then________",
        "Options": [
            "a) All those will be available in subclasses",
            "b) None of those will be available in subclasses",
            "c) Only data members will be available in subclass",
            "d) Only member functions will be available in subclass",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 197,
        "Question": "How many public class(s) (outermost) can be there in a java program?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) As required",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 198,
        "Question": "Which among the following for public specifier is false?",
        "Options": [
            "a) The static members can’t be public",
            "b) The public members are available in other packages too",
            "c) The subclasses can inherit the public members privately",
            "d) There can be only one public class in java program",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 199,
        "Question": "A class has its default constructor defined as public. Class B inherits class A privately. The class ___________",
        "Options": [
            "a) B will not be able to have instances",
            "b) Only A can have instances",
            "c) Only B can have instances",
            "d) Both classes can have instances",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 200,
        "Question": "Which specifier can be used to inherit protected members as protected in subclass but public as public in subclass?",
        "Options": [
            "a) Private",
            "b) Default",
            "c) Public",
            "d) Protected",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 201,
        "Question": "Which among the following is true for public class?",
        "Options": [
            "a) There can be more than one public class in a single program",
            "b) Public class members can be used without using instance of class",
            "c) Public class is available only within the package",
            "d) Public classes can be accessed from any other class using instance",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 202,
        "Question": "If a class doesn’t have public members, then________",
        "Options": [
            "a) None of its members will be able to get inherited",
            "b) None of its instance creation will be allowed",
            "c) None of its member function can be called outside the class",
            "d) None of its data members will be able to get initial value",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 203,
        "Question": "In multi-level inheritance(all public), the public members of parent/superclass will ________",
        "Options": [
            "a) Will continue to get inherited subsequently",
            "b) Will not be inherited after one subclass inheritance",
            "c) Will not be available to be called outside class",
            "d) Will not be able to allocated with any memory space",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 204,
        "Question": "Which specifier allows to secure the public members of base class in inherited classes?",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) Private and Protected",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 205,
        "Question": "What is the term used to indicate the variable and constants of a class?",
        "Options": [
            "a) Data members",
            "b) Variables of class",
            "c) Data characters",
            "d) Constants",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 206,
        "Question": "Data members ________________ (C++)",
        "Options": [
            "a) Can be initialized with declaration in classes",
            "b) Can be initialized only with help of constructors",
            "c) Can be initialized either in declaration or by constructor",
            "d) Can’t be initialized",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 207,
        "Question": "Which among the following is true for data members?",
        "Options": [
            "a) Private data members can be initialized with declaration in class",
            "b) Static members are initialized in constructors",
            "c) Protected data members can be initialized in class directly",
            "d) Static data members are defined outside class, not in constructor",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 208,
        "Question": "What should be done for data member to be of user defined structure type?",
        "Options": [
            "a) The structure must have been defined before class.",
            "b) The structure must have been defined after the class definition",
            "c) The structure must be predefined",
            "d) The structure type data members can’t be used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 209,
        "Question": "How many data members can a class contain?",
        "Options": [
            "a) 27",
            "b) 255",
            "c) 1024",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 210,
        "Question": "How to access data members of a class?",
        "Options": [
            "a) Dot operator",
            "b) Arrow operator",
            "c) Dot or arrow as required",
            "d) Dot, arrow or direct call",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 211,
        "Question": "To create a pointer to a private data member of a class, outside the class, which among the following is correct?",
        "Options": [
            "a) Return the address of the private data member using a member function",
            "b) Access the private member using a pointer outside class",
            "c) Declare the member as pointer inside the class",
            "d) Not possible to create pointer to a private member",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 212,
        "Question": "Which among the following is true for use of setter() and getter() function?",
        "Options": [
            "a) Considered best for manipulating data values",
            "b) Considered the only proper way to manipulate the values",
            "c) Considered specially for private members manipulation",
            "d) Considered a red flag, and not recommended for large scale use",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 213,
        "Question": "The static member functions can only use ________",
        "Options": [
            "a) Static data members",
            "b) Private data members",
            "c) Protected data members",
            "d) Constant data members",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 214,
        "Question": "What is the keyword used to make data members have same value?",
        "Options": [
            "a) static",
            "b) const",
            "c) double",
            "d) abstract",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 215,
        "Question": "Which data members can be inherited but are private to a class?",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Protected and Static",
            "d) Privately inherited",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 216,
        "Question": "Which among the following is not allowed for data member declaration?",
        "Options": [
            "a) int a;",
            "b) static int a;",
            "c) abstract a;",
            "d) Boolean a;",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 217,
        "Question": "Which among the following best describes member functions?",
        "Options": [
            "a) Functions which are defined within the class",
            "b) Functions belonging a class",
            "c) Functions in public access of a class",
            "d) Functions which are private to class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 218,
        "Question": "How many types of member functions are generally there in C++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 219,
        "Question": "How can a static member function be called in the main function?",
        "Options": [
            "a) Using dot operator",
            "b) Using arrow operator",
            "c) Using dot or arrow operator",
            "d) Using dot, arrow or using scope resolution operator with class name",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 220,
        "Question": "What are inline member functions?",
        "Options": [
            "a) Member functions which can be called without object",
            "b) Member functions whose definition is expanded in place of its call",
            "c) Member functions whose definition is faster than simple function",
            "d) Member function which is defined in single line",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 221,
        "Question": "What happens if non static members are used in static member function?",
        "Options": [
            "a) Compile time error",
            "b) Runtime error",
            "c) Executes fine",
            "d) Executes if that member function is not used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 222,
        "Question": "Static member functions _____________",
        "Options": [
            "a) Contains “this” pointer for data members",
            "b) Contains “this” pointer if used for member functions",
            "c) Doesn’t contain “this” pointer",
            "d) Doesn’t contain “this” pointer if member functions are referred",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 223,
        "Question": "How to access members of the class inside a member function?",
        "Options": [
            "a) Using this pointer only",
            "b) Using dot operator",
            "c) Using arrow operator",
            "d) Used directly or with this pointer",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 224,
        "Question": "For overloading “( )”, “[ ]” or “->” operators, a class __________",
        "Options": [
            "a) Must use static member functions",
            "b) Must use non-static member functions",
            "c) Must be non-static member and should not be friend of class",
            "d) Must use static member function or a friend member function",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 225,
        "Question": "If a virtual member function is defined ___________",
        "Options": [
            "a) It should not contain any body and defined by subclasses",
            "b) It must contain body and overridden by subclasses",
            "c) It must contain body and be overloaded",
            "d) It must not contain any body and should not be derived",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 226,
        "Question": "Member functions of a generic class are _____________",
        "Options": [
            "a) Not generic",
            "b) Automatically generic",
            "c) To be made generic explicitly",
            "d) Given default type as double",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 227,
        "Question": "Member function of a class can ____________",
        "Options": [
            "a) Access all the members of the class",
            "b) Access only Public members of the class",
            "c) Access only the private members of the class",
            "d) Access subclass members",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 228,
        "Question": "A member function can _______________ of the same class.",
        "Options": [
            "a) Call other member functions",
            "b) Call only private member functions",
            "c) Call only static member functions",
            "d) Call only const member functions",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 229,
        "Question": "Which member function doesn’t require any return type?",
        "Options": [
            "a) Static",
            "b) Constructor",
            "c) Const",
            "d) Constructor and destructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 230,
        "Question": "Which among the following is not possible for member function?",
        "Options": [
            "a) Access protected members of parent class",
            "b) Definition without return type",
            "c) Access public members of subclass",
            "d) Access static members of class",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 231,
        "Question": "What are local classes?",
        "Options": [
            "a) Classes declared inside a package",
            "b) Classes declared inside a function",
            "c) Classes declared inside a class",
            "d) Classes declared inside structure",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 232,
        "Question": "All member functions of a local class must be ___________",
        "Options": [
            "a) Defined outside class body",
            "b) Defined outside the function definition",
            "c) Defined inside the class body",
            "d) Defined at starting of program",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 233,
        "Question": "Can local class members access/use the general local variables (except static, abstract etc.) of the function in which it is defined?",
        "Options": [
            "a) Yes, it can access with arrow operator",
            "b) No, it can’t access with dot operator",
            "c) Yes, it can access using dot operator",
            "d) No, it can’t access In anyway",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 234,
        "Question": "Which type of data can a local class access from the function in which it is defined?",
        "Options": [
            "a) Static and extern",
            "b) Abstract and static",
            "c) Void and extern",
            "d) Const and static",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 235,
        "Question": "Can static variables be declared inside a local class?",
        "Options": [
            "a) Yes, with public access specifier",
            "b) Yes, anywhere as required",
            "c) No, not possible in private access specifier",
            "d) No, not possible anyway",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 236,
        "Question": "All the member functions of local classes are __________ by default.",
        "Options": [
            "a) Static",
            "b) Inline",
            "c) Abstract",
            "d) Virtual",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 237,
        "Question": "Which language can use inheritance with local classes?",
        "Options": [
            "a) Kotlin",
            "b) Java",
            "c) SmallTalk",
            "d) SAP ABAP",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 238,
        "Question": "How many local classes can be defined inside a single function?",
        "Options": [
            "a) Only 1",
            "b) Only 3",
            "c) Only 5",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 239,
        "Question": "All the data members of local class must be ___________",
        "Options": [
            "a) Defined with declaration",
            "b) Defined in constructor",
            "c) Declared and defined in constructor",
            "d) Declared using a member function",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 240,
        "Question": "Can two different functions have local class with same name?",
        "Options": [
            "a) Yes, since local",
            "b) No, names must be different",
            "c) No, scope doesn’t work here",
            "d) No, ambiguity arises",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 241,
        "Question": "What is the scope of local class?",
        "Options": [
            "a) Within the class only",
            "b) Within the function",
            "c) Within the program",
            "d) One time creation and live till end of program",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 242,
        "Question": "Can a function, other than the enclosing function of local class, access the class members?",
        "Options": [
            "a) Yes, using object",
            "b) Yes, using direct call",
            "c) Yes, using pointer",
            "d) No, can’t access",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 243,
        "Question": "Which among the following is the main advantage of using local classes?",
        "Options": [
            "a) Make program more efficient",
            "b) Makes program execution faster",
            "c) Helps to add extra functionality to a function",
            "d) Helps to add more members to a function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 244,
        "Question": "Which among the following best describes a nested class?",
        "Options": [
            "a) Class inside a class",
            "b) Class inside a function",
            "c) Class inside a package",
            "d) Class inside a structure",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 245,
        "Question": "Which feature of OOP reduces the use of nested classes?",
        "Options": [
            "a) Encapsulation",
            "b) Inheritance",
            "c) Binding",
            "d) Abstraction",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 246,
        "Question": "How many categories are nested classes divided into?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 247,
        "Question": "Non-static nested classes have access to _____________ from enclosing class.",
        "Options": [
            "a) Private members",
            "b) Protected members",
            "c) Public members",
            "d) All the members",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 248,
        "Question": "Static nested classes doesn’t have access to _________________ from enclosing class.",
        "Options": [
            "a) Private members",
            "b) Protected members",
            "c) Public members",
            "d) Any other members",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 249,
        "Question": "The nested class can be declared ___________________",
        "Options": [
            "a) Public",
            "b) Private",
            "c) Protected",
            "d) Public, Protected, Private or Package private",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 250,
        "Question": "Use of nested class ____________ encapsulation.",
        "Options": [
            "a) Increases",
            "b) Decreases",
            "c) Doesn’t affect",
            "d) Slightly decreases",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 251,
        "Question": "Which among the following is the correct advantage/disadvantage of nested classes?",
        "Options": [
            "a) Makes the code more complex",
            "b) Makes the code unreadable",
            "c) Makes the code efficient and readable",
            "d) Makes the code multithreaded",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 252,
        "Question": "How to access static nested classes?",
        "Options": [
            "a) OuterClass.StaticNestedClass",
            "b) OuterClass->StaticNestedClass",
            "c) OuterClass(StaticNestedClass)",
            "d) OuterClass[StaticNestedClass] ",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 253,
        "Question": "How to create object of the inner class?",
        "Options": [
            "a) OuterClass.InnerClass innerObject = outerObject.new InnerClass();",
            "b) OuterClass.InnerClass innerObject = new InnerClass();",
            "c) InnerClass innerObject = outerObject.new InnerClass();",
            "d) OuterClass.InnerClass = outerObject.new InnerClass();",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 254,
        "Question": "Instance of inner class can exist only _______________ enclosing class.",
        "Options": [
            "a) Within",
            "b) Outside",
            "c) Private to",
            "d) Public to",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 255,
        "Question": "If a declaration of a member in inner class has the same name as that in the outer class, then ________________ enclosing scope.",
        "Options": [
            "a) Outer declaration shadows inner declaration in",
            "b) Inner declaration shadows outer declaration in",
            "c) Declaration gives compile time error",
            "d) Declaration gives runtime error",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 256,
        "Question": "A static nested class is _____________ class in behavior that is nested in another _________ class.",
        "Options": [
            "a) Top level, top level",
            "b) Top level, low level",
            "c) Low level, top level",
            "d) Low level, low level",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 257,
        "Question": "In how many ways can an object be passed to a function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 258,
        "Question": "If an object is passed by value _____________",
        "Options": [
            "a) A new copy of object is created implicitly",
            "b) The object itself is used",
            "c) Address of the object is passed",
            "d) A new object is created with new random values",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 259,
        "Question": "Pass by address passes the address of object _________ and pass by reference passes the address of the object _________",
        "Options": [
            "a) Explicitly, explicitly",
            "b) Implicitly, implicitly",
            "c) Explicitly, Implicitly",
            "d) Implicitly, explicitly",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 260,
        "Question": "If an object is passed by reference, the changes made in the function ___________",
        "Options": [
            "a) Are reflected to the main object of caller function too",
            "b) Are reflected only in local scope of the called function",
            "c) Are reflected to the copy of the object that is made during pass",
            "d) Are reflected to caller function object and called function object also",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 261,
        "Question": "Constructor function is not called when an object is passed to a function, will its destructor be called when its copy is destroyed?",
        "Options": [
            "a) Yes, depending on code",
            "b) Yes, must be called",
            "c) No, since no constructor was called",
            "d) No, since same object gets used",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 262,
        "Question": "When an object is returned by a function, a _______________ is automatically created to hold the return value.",
        "Options": [
            "a) Temporary object",
            "b) Virtual object",
            "c) New object",
            "d) Data member",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 263,
        "Question": "Is the destruction of temporary object safe (while returning object)?",
        "Options": [
            "a) Yes, the resources get free to use",
            "b) Yes, other objects can use the memory space",
            "c) No, unexpected side effects may occur",
            "d) No, always gives rise to exceptions",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 264,
        "Question": "How to overcome the problem arising due to destruction of temporary object?",
        "Options": [
            "a) Overloading insertion operator",
            "b) Overriding functions can be used",
            "c) Overloading parenthesis or returning object",
            "d) Overloading assignment operator and defining copy constructor",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 265,
        "Question": "How many objects can be returned at once?",
        "Options": [
            "a) Only 1",
            "b) Only 2",
            "c) Only 16",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 266,
        "Question": "It is necessary to return the object if it was passed by reference to a function.",
        "Options": [
            "a) Yes, since the object must be same in caller function",
            "b) Yes, since the caller function needs to reflect the changes",
            "c) No, the changes are made automatically",
            "d) No, the changes are made explicitly",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 267,
        "Question": "How many objects can be passed to a function simultaneously?",
        "Options": [
            "a) Only 1",
            "b) Only an array",
            "c) Only 1 or an array",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 268,
        "Question": "If an object is passed by address, will be constructor be called?",
        "Options": [
            "a) Yes, to allocate the memory",
            "b) Yes, to initialize the members",
            "c) No, values are copied",
            "d) No, temporary object is created",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 269,
        "Question": "Is it possible that an object of is passed to a function, and the function also have an object of same name?",
        "Options": [
            "a) No, Duplicate declaration is not allowed",
            "b) No, 2 objects will be created",
            "c) Yes, Scopes are different",
            "d) Yes, life span is different",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 270,
        "Question": "What is reference to an object?",
        "Options": [
            "a) It is address of an object",
            "b) It is address of where the variables and methods of object are stored",
            "c) It is pointer having address of an object",
            "d) It is address of only variables and not the methods of an object",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 271,
        "Question": "Whenever an object is assigned to a variable or passed to a method ________________",
        "Options": [
            "a) Actually the objects aren’t used",
            "b) Actually only the objects are used",
            "c) Actually a pointer to an object is used",
            "d) Actually copy of object is used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 272,
        "Question": "Does use of object reference in assignment or passing means copy of the object is being used?",
        "Options": [
            "a) No, because the copy would create a new temporary variable",
            "b) No, because the copy would not help to make changes to main object",
            "c) Yes, because the reference directly means using address",
            "d) Yes, because the reference directly means the constructors are involved",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 273,
        "Question": "Is there any explicit use of pointers in java that would be applicable to objects?",
        "Options": [
            "a) Yes, we use reference for this purpose",
            "b) Yes, we use java arrays for this purpose",
            "c) No, implicit pointing is possible",
            "d) No, direct class names should be used",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 274,
        "Question": "Can a super class object give reference to a subclass method?",
        "Options": [
            "a) No, it is not possible",
            "b) Maybe, it is possible",
            "c) No, it’s not possible",
            "d) No, It’s not possible in few cases only",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 275,
        "Question": "If a reference variable is declared final then _________________",
        "Options": [
            "a) It can never be reassigned to refer to a different object",
            "b) It can be assigned to refer to any object anytime",
            "c) It can never be assigned with any object",
            "d) It can be assigned with 2 or more objects simultaneously",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 276,
        "Question": "Which of the members are referred by this pointer usually (Java)?",
        "Options": [
            "a) Members of class where this is used",
            "b) Member of the parent class where this is used",
            "c) Members that are passed as argument to the object",
            "d) Pointers are not applicable in java",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 277,
        "Question": "How to refer to method of nested class?",
        "Options": [
            "a) enclosingClassObject.innerClassObject.method();",
            "b) innerClassObject.method();",
            "c) method();",
            "d) depends on where the method is being called",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 278,
        "Question": "How many objects can be referenced from the same variables?",
        "Options": [
            "a) One at a time",
            "b) Many at a time",
            "c) Many using array name",
            "d) 7 at max at same time",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 279,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Object referencing refers to methods address",
            "b) Object referencing refers to variable of object",
            "c) Object referencing points to same address, if assigned by variables",
            "d) Object referencing is used to point methods",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 280,
        "Question": "Invoking a method on a particular object is ____________ sending a message to that object.",
        "Options": [
            "a) Different from",
            "b) Same as",
            "c) Somewhat similar",
            "d) Part of",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 281,
        "Question": "Can reference to an object be returned from a method?",
        "Options": [
            "a) Yes, always possible",
            "b) Yes, but not always",
            "c) No, never possible",
            "d) No, Not possible because referred element would be destroyed",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 282,
        "Question": "What does memory allocation for objects mean?",
        "Options": [
            "a) Actual creation and memory allocation for object members",
            "b) Creation of member functions",
            "c) Creation of data members for a class",
            "d) Actual creation and data declaration for object members",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 283,
        "Question": "Where is the memory allocated for the objects?",
        "Options": [
            "a) HDD",
            "b) Cache",
            "c) RAM",
            "d) ROM",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 284,
        "Question": "When is the memory allocated for an object?",
        "Options": [
            "a) At declaration of object",
            "b) At compile time",
            "c) When object constructor is called",
            "d) When object is initialized to another object",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 285,
        "Question": "Using new is type safe as _______________________",
        "Options": [
            "a) It require to be specified with type of data",
            "b) It doesn’t require to be specified with type of data",
            "c) It requires the name of data",
            "d) It allocated memory for the data",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 286,
        "Question": "Which of the following function can be used for dynamic memory allocation of objects?",
        "Options": [
            "a) malloc()",
            "b) calloc()",
            "c) create()",
            "d) malloc() and calloc()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 287,
        "Question": "Which keyword among the following can be used to declare an array of objects in java?",
        "Options": [
            "a) new",
            "b) create",
            "c) allocate",
            "d) arr",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 288,
        "Question": "When is the memory allocated for an object gets free?",
        "Options": [
            "a) At termination of program",
            "b) When object goes out of scope",
            "c) When main function ends",
            "d) When system restarts",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 289,
        "Question": "Which among the following keyword can be used to free the allocated memory for an object?",
        "Options": [
            "a) delete",
            "b) free",
            "c) either delete or free",
            "d) only delete",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 290,
        "Question": "Which function is called whenever an object goes out of scope?",
        "Options": [
            "a) Destructor function",
            "b) Constructor function",
            "c) Delete function",
            "d) Free function",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 291,
        "Question": "Which operator can be used to check the size of an object?",
        "Options": [
            "a) sizeof(objectName)",
            "b) size(objectName)",
            "c) sizeofobject(objectName)",
            "d) sizedobject(objectName)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 292,
        "Question": "The memory allocated for an object ____________________",
        "Options": [
            "a) Can be only dynamic",
            "b) Can be only static",
            "c) Can be static or dynamic",
            "d) Can’t be done using dynamic functions",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 293,
        "Question": "If an object is declared in a user defined function __________________",
        "Options": [
            "a) Its memory is allocated in stack",
            "b) Its memory is allocated in heap",
            "c) Its memory is allocated in HDD",
            "d) Its memory is allocated in cache",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 294,
        "Question": "In java, ____________________ takes care of managing memory for objects dynamically.",
        "Options": [
            "a) Free collector",
            "b) Dust collector",
            "c) Memory manager",
            "d) Garbage collector",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 295,
        "Question": "Which operator can be used to free the memory allocated for an object in C++?",
        "Options": [
            "a) Free()",
            "b) delete",
            "c) Unallocate",
            "d) Collect",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 296,
        "Question": "What is an array of objects?",
        "Options": [
            "a) An array of instances of class represented by single name",
            "b) An array of instances of class represented by more than one name",
            "c) An array of instances which have more than 2 instances",
            "d) An array of instances which have different types",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 297,
        "Question": "Which among the following is a mandatory condition for array of objects?",
        "Options": [
            "a) All the objects should be of different class",
            "b) All the objects should be of same program classes",
            "c) All the objects should be of same class",
            "d) All the objects should have different data",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 298,
        "Question": "What is the type of elements of array of objects?",
        "Options": [
            "a) Class",
            "b) Void",
            "c) String",
            "d) Null",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 299,
        "Question": "Which is the condition that must be followed if the array of objects is declared without initialization, only with size of array?",
        "Options": [
            "a) The class should have separate constructor for each object",
            "b) The class must have no constructors",
            "c) The class should not have any member function",
            "d) The class must have a default or zero argument constructor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 300,
        "Question": "When are the array of objects without any initialization useful?",
        "Options": [
            "a) When object data is not required just after the declaration",
            "b) When initialization of object data is to be made by the compiler",
            "c) When object data doesn’t matter in the program",
            "d) When the object should contain garbage data",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 301,
        "Question": "If constructor arguments are passed to objects of array then ____________ if the constructors are overloaded.",
        "Options": [
            "a) It is mandatory to pass same number of arguments to all the objects",
            "b) It is mandatory to pass same type of arguments to all the objects",
            "c) It is not mandatory to call same constructor for all the objects",
            "d) It is mandatory to call same constructor for all the constructors",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 302,
        "Question": "How the objects of array can be denoted?",
        "Options": [
            "a) Indices",
            "b) Name",
            "c) Random numbers",
            "d) Alphabets",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 303,
        "Question": "The objects in an object array _______________________",
        "Options": [
            "a) Can be created without use of constructor",
            "b) Can be created without calling default constructor",
            "c) Can’t be created with use of constructor",
            "d) Can’t be created without calling default constructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 304,
        "Question": "The Object array is created in _____________________",
        "Options": [
            "a) Heap memory",
            "b) Stack memory",
            "c) HDD",
            "d) ROM",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 305,
        "Question": "If an array of objects is of size 10 and a data value have to be retrieved from 5th object then ________________ syntax should be used.",
        "Options": [
            "a) Array_Name[4].data_variable_name;",
            "b) Data_Type Array_Name[4].data_variable_name;",
            "c) Array_Name[4].data_variable_name.value;",
            "d) Array_Name[4].data_variable_name(value);",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 306,
        "Question": "Can we have two dimensional object array?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only if primitive type array",
            "c) No, since two indices are impossible",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 307,
        "Question": "From which index does the array of objects start?",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) 3",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 308,
        "Question": "Is an array of characters always a string?",
        "Options": [
            "a) Yes, always",
            "b) Yes, if each character is terminated by null",
            "c) No, since each character is terminated by null",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 309,
        "Question": "Which among the following is the main use of object?",
        "Options": [
            "a) To create instance of a function",
            "b) To create instance of a program",
            "c) To create instance of class",
            "d) To create instance of structures",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 310,
        "Question": "Which among the following is not a property of an object?",
        "Options": [
            "a) Identity",
            "b) Properties",
            "c) Attributes",
            "d) Names",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 311,
        "Question": "What is function object?",
        "Options": [
            "a) An object with a single function",
            "b) An object with only functions",
            "c) An object with more than one function",
            "d) An object with no functions",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 312,
        "Question": "Immutable object are used ______________________",
        "Options": [
            "a) To set up as a fixed state",
            "b) To set up variable object",
            "c) To set up an object of abstract class",
            "d) To set up an object of derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 313,
        "Question": "Which object can be used to contain other objects?",
        "Options": [
            "a) First class object",
            "b) Derived class object",
            "c) Container object",
            "d) Enclosure object",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 314,
        "Question": "A factory object is used ______________________",
        "Options": [
            "a) To create new classes",
            "b) To create new function",
            "c) To create new data members",
            "d) To create new objects",
            ""
        ],
        "Answer": "Answer:d"
    },
    {
        "id": 315,
        "Question": "What are singleton objects?",
        "Options": [
            "a) The only two objects of a class throughout the program",
            "b) The only object of a class throughout the program",
            "c) The objects that are alive throughout the program",
            "d) The objects that are created and then deleted without use",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 316,
        "Question": "Object cout and cin _________________",
        "Options": [
            "a) Can be used directly with << and >> symbols respectively",
            "b) Can be used directly with >> and << symbols respectively",
            "c) Must be used as a function which accepts 2 arguments",
            "d) Must be used as a function which accepts 3 arguments",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 317,
        "Question": "Objects type ____________________",
        "Options": [
            "a) Can be changed in runtime",
            "b) Can’t be changed in runtime",
            "c) Can be changed in compile time",
            "d) May or may not get changed",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 318,
        "Question": "An object can be used to represent _________________",
        "Options": [
            "a) A real world entity",
            "b) A real function",
            "c) Some real data only",
            "d) Some function only",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 319,
        "Question": "Objects can be used _____________________",
        "Options": [
            "a) To access any member of a class",
            "b) To access only public members of a class",
            "c) To access only protected members of a class",
            "d) To access only private members of a class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 320,
        "Question": "Which among the following is not a use of object?",
        "Options": [
            "a) Defining a member function",
            "b) Accessing data members",
            "c) Creating instance of a class",
            "d) Using class members",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 321,
        "Question": "Which object can be used to access the standard input?",
        "Options": [
            "a) System.inner",
            "b) cin",
            "c) System.stdin",
            "d) console.input",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 322,
        "Question": "A single object can be used __________________",
        "Options": [
            "a) As only two class types at a time",
            "b) As only three class types at a time",
            "c) As only one class type at a time",
            "d) As of as many class types as required",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 323,
        "Question": "If same object name is given to different objects of different class then _____________",
        "Options": [
            "a) Its compile time error",
            "b) Its runtime error",
            "c) It’s not an error",
            "d) Program suns smooth",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 324,
        "Question": "Which among the following best describes abstract classes?",
        "Options": [
            "a) If a class has more than one virtual function, it’s abstract class",
            "b) If a class have only one pure virtual function, it’s abstract class",
            "c) If a class has at least one pure virtual function, it’s abstract class",
            "d) If a class has all the pure virtual functions only, then it’s abstract class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 325,
        "Question": "Can abstract class have main() function defined inside it?",
        "Options": [
            "a) Yes, depending on return type of main()",
            "b) Yes, always",
            "c) No, main must not be defined inside abstract class",
            "d) No, because main() is not abstract function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 326,
        "Question": "If there is an abstract method in a class then, ________________",
        "Options": [
            "a) Class must be abstract class",
            "b) Class may or may not be abstract class",
            "c) Class is generic",
            "d) Class must be public",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 327,
        "Question": "If a class is extending/inheriting another abstract class having abstract method, then _______________________",
        "Options": [
            "a) Either implementation of method or making class abstract is mandatory",
            "b) Implementation of the method in derived class is mandatory",
            "c) Making the derived class also abstract is mandatory",
            "d) It’s not mandatory to implement the abstract method of parent class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 328,
        "Question": "Abstract class A has 4 virtual functions. Abstract class B defines only 2 of those member functions as it extends class A. Class C extends class B and implements the other two member functions of class A. Choose the correct option below.",
        "Options": [
            "a) Program won’t run as all the methods are not defined by B",
            "b) Program won’t run as C is not inheriting A directly",
            "c) Program won’t run as multiple inheritance is used",
            "d) Program runs correctly",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 329,
        "Question": "Abstract classes can ____________________ instances.",
        "Options": [
            "a) Never have",
            "b) Always have",
            "c) Have array of",
            "d) Have pointer of",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 330,
        "Question": "We ___________________ to an abstract class.",
        "Options": [
            "a) Can create pointers",
            "b) Can create references",
            "c) Can create pointers or references",
            "d) Can’t create any reference, pointer or instance",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 331,
        "Question": "Which among the following is an important use of abstract classes?",
        "Options": [
            "a) Header files",
            "b) Class Libraries",
            "c) Class definitions",
            "d) Class inheritance",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 332,
        "Question": "Use of pointers or reference to an abstract class gives rise to which among the following feature?",
        "Options": [
            "a) Static Polymorphism",
            "b) Runtime polymorphism",
            "c) Compile time Polymorphism",
            "d) Polymorphism within methods",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 333,
        "Question": "The abstract classes in java can _________________",
        "Options": [
            "a) Implement constructors",
            "b) Can’t implement constructor",
            "c) Can implement only unimplemented methods",
            "d) Can’t implement any type of constructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 334,
        "Question": "Can abstract classes have static methods (Java)?",
        "Options": [
            "a) Yes, always",
            "b) Yes, but depends on code",
            "c) No, never",
            "d) No, static members can’t have different values",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 335,
        "Question": "It is _________________________ to have an abstract method.",
        "Options": [
            "a) Not mandatory for an static class",
            "b) Not mandatory for a derived class",
            "c) Not mandatory for an abstract class",
            "d) Not mandatory for parent class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 336,
        "Question": "How many abstract classes can a single program contain?",
        "Options": [
            "a) At most 1",
            "b) At least 1",
            "c) At most 127",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 337,
        "Question": "Is it necessary that all the abstract methods must be defined from an abstract class?",
        "Options": [
            "a) Yes, depending on code",
            "b) Yes, always",
            "c) No, never",
            "d) No, if function is not used, no definition is required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 338,
        "Question": "A template class can have _____________",
        "Options": [
            "a) More than one generic data type",
            "b) Only one generic data type",
            "c) At most two data types",
            "d) Only generic type of integers and not characters",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 339,
        "Question": "Which among the following is the proper syntax for the template class?",
        "Options": [
            "a) template <typename T1, typename T2>;",
            "b) Template <typename T1, typename T2>;",
            "c) template <typename T> T named(T x, T y){  }",
            "d) Template <typename T1, typename T2> T1 named(T1 x, T2 y){  }",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 340,
        "Question": "Can default arguments be used with the template class?",
        "Options": [
            "a) Yes, in some special cases",
            "b) Yes, always",
            "c) No, it must satisfy some specific conditions first",
            "d) No, it can’t be done",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 341,
        "Question": "What is the syntax to use explicit class specialization?",
        "Options": [
            "a) template <int> class myClass<>{  }",
            "b) template <int> class myClass<int>{  }",
            "c) template <> class myClass<>{  }",
            "d) template <> class myClass<int>{  }",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 342,
        "Question": "Which is the most significant feature that arises by using template classes?",
        "Options": [
            "a) Code readability",
            "b) Ease in coding",
            "c) Code reusability",
            "d) Modularity in code",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 343,
        "Question": "A template class defines the form of a class _____________________ it will operate.",
        "Options": [
            "a) With full specification of the data on which",
            "b) With full specification of the functions on which",
            "c) Without full specification of the data on which",
            "d) Without full specification of the functions on which",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 344,
        "Question": "What are the two specializations of I/O template classes in C++?",
        "Options": [
            "a) 16-bit character and wide characters",
            "b) 8-bit character and wide characters",
            "c) 32-bit character and locale characters",
            "d) 64-bit characters and locale characters",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 345,
        "Question": "Can typeid() function be used with the object of generic classes?",
        "Options": [
            "a) Yes, only if default type is given",
            "b) Yes, always",
            "c) No, generic data can’t be determined",
            "d) No, never possible",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 346,
        "Question": "The _____________ class is a specialization of a more general template class.",
        "Options": [
            "a) String",
            "b) Integer",
            "c) Digit",
            "d) Math",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 347,
        "Question": "How is function overloading different from template class?",
        "Options": [
            "a) Overloading is multiple function doing same operation, Template is multiple function doing different operations",
            "b) Overloading is single function doing different operations, Template is multiple function doing different operations",
            "c) Overloading is multiple function doing similar operation, Template is multiple function doing identical operations",
            "d) Overloading is multiple function doing same operation, Template is same function doing different operations",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 348,
        "Question": "What if static members are declared inside template classes?",
        "Options": [
            "a) All instances will share the static variable",
            "b) All instances will have their own static variable",
            "c) All the instances will ignore the static variable",
            "d) Program gives compile time error",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 349,
        "Question": "If template class is defined, is it necessary to use different types of data for each call?",
        "Options": [
            "a) No, not necessary",
            "b) No, but at least two types must be there",
            "c) Yes, to make proper use of template",
            "d) Yes, for code efficiency",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 350,
        "Question": "How many generic types can be given inside a single template class?",
        "Options": [
            "a) Only 1",
            "b) Only 3",
            "c) Only 7",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 351,
        "Question": "Which is most appropriate definition of a base class?",
        "Options": [
            "a) It is parent of any of its derived class",
            "b) It is child of one of the parent class",
            "c) It is most basic class of whole program",
            "d) It is class with maximum number of members",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 352,
        "Question": "A base class is also known as _____________ class.",
        "Options": [
            "a) Basic",
            "b) Inherited",
            "c) Super",
            "d) Sub",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 353,
        "Question": "An abstract class is always a __________ class.",
        "Options": [
            "a) Base",
            "b) Derived",
            "c) Template",
            "d) Nested",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 354,
        "Question": "How many base classes can a single class inherit in java?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 355,
        "Question": "How to make a derived class a base class?",
        "Options": [
            "a) Change name of the class",
            "b) Use keyword base",
            "c) Make a class derive from it",
            "d) Can’t be done",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 356,
        "Question": "If a base class is being derived by two other classes, which inheritance will that be called?",
        "Options": [
            "a) Single",
            "b) Multiple",
            "c) Multi-level",
            "d) Hierarchical",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 357,
        "Question": "Which among the following must be in a base class?",
        "Options": [
            "a) Data members",
            "b) Member functions",
            "c) Access specifiers",
            "d) Nothing",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 358,
        "Question": "Which type of members can’t be accessed in derived classes of a base class?",
        "Options": [
            "a) Protected",
            "b) Private",
            "c) Public",
            "d) All can be accessed",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 359,
        "Question": "Base class have ________________ of abstraction.",
        "Options": [
            "a) Higher degree",
            "b) Lower degree",
            "c) Intermediate",
            "d) Minimum degree",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 360,
        "Question": "Always the base class constructors are called ___________ constructor of derived class.",
        "Options": [
            "a) Before",
            "b) After",
            "c) Along",
            "d) According to priority of",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 361,
        "Question": "Can we call methods of base class using the constructor of the derived class?",
        "Options": [
            "a) Yes, always",
            "b) Yes, but not always",
            "c) No, never",
            "d) No, but we can call in some cases",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 362,
        "Question": "If a base class is inherited from another class and then one class derives it, which inheritance is shown?",
        "Options": [
            "a) Multiple",
            "b) Single",
            "c) Hierarchical",
            "d) Multi-level",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 363,
        "Question": "How many base classes can a single derived class have in C++?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 364,
        "Question": "Which among the following is best definition of a derived class?",
        "Options": [
            "a) A child class",
            "b) A class which inherits one or more classes",
            "c) A class with keyword derived",
            "d) A class with more than one constructor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 365,
        "Question": "Which among the following is inherited by a derived class from base class?",
        "Options": [
            "a) Data members only",
            "b) Member functions only",
            "c) All the members except private members",
            "d) All the members of base class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 366,
        "Question": "If there is a derived class in a program, how many classes must be in that program?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 367,
        "Question": "Which members can never be accessed in derived class from the base class?",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) All except private",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 368,
        "Question": "How many types of inheritance are supported in C++ for deriving a class?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 369,
        "Question": "How many derived class can a single base class have?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) As many are required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 370,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) Friend function of derived class can access non-private members of base class",
            "b) Friend function of base class can access derived class members",
            "c) Friend function of derived class can access members of only derived class",
            "d) Friend function can access private members of base class of a derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 371,
        "Question": "If a class is being derived using more than two base classes, which inheritance will be used?",
        "Options": [
            "a) Single",
            "b) Multi-level",
            "c) Hierarchical",
            "d) Multiple",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 372,
        "Question": "Derived class is also known as ______________ class.",
        "Options": [
            "a) Subclass",
            "b) Small class",
            "c) Big class",
            "d) Noticeable class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 373,
        "Question": "If class A is derived from another derived class B which is derived from class C, which class will have maximum level of abstraction?",
        "Options": [
            "a) Class A",
            "b) Class B",
            "c) Class C",
            "d) All have the same level of abstraction",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 374,
        "Question": "If base class is an abstract class then derived class ______________ the undefined functions.",
        "Options": [
            "a) Must define",
            "b) Must become another abstract class or define",
            "c) Must become parent class for",
            "d) Must implement 2 definitions of",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 375,
        "Question": "How many classes can be derived from a derived class?",
        "Options": [
            "a) Only 1",
            "b) At most 1",
            "c) At least 1",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 376,
        "Question": "Which feature is not related to the derived classes among the following?",
        "Options": [
            "a) Inheritance",
            "b) Encapsulation",
            "c) Run time memory management",
            "d) Compile time function references",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 377,
        "Question": "Deriving a class in such a way that that the base class members are not available for further inheritance is known as ___________________",
        "Options": [
            "a) Public inheritance",
            "b) Protected inheritance",
            "c) Protected or private inheritance",
            "d) Private inheritance",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 378,
        "Question": "Which among the following is the main characteristic of class?",
        "Options": [
            "a) Inheritance",
            "b) Encapsulation",
            "c) Polymorphism",
            "d) Object creation",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 379,
        "Question": "To group all the brands of cars, what should be used?",
        "Options": [
            "a) Class",
            "b) Structure",
            "c) Function",
            "d) Object",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 380,
        "Question": "If a class have two data members and two functions to add those two numbers and to subtract them, which among the following is most efficient if the programmer wants to implement multiplication too?",
        "Options": [
            "a) Define a public function which multiplies two numbers",
            "b) Define a public function that returns values of two data members",
            "c) Define a private function which multiplies two numbers",
            "d) Define a private function that returns values of two data members",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 381,
        "Question": "If a database have to be maintained using OOP, to store the details of each employee in a company, which would be the best choice among the following?",
        "Options": [
            "a) Define a class to store details of each employee",
            "b) Define a structure to store details of each employee",
            "c) Define separate variable for each detail",
            "d) Define a generic type to store string and number details",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 382,
        "Question": "Which class represents the most abstracted information?",
        "Options": [
            "a) Nested",
            "b) Derived",
            "c) Enclosed",
            "d) Base",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 383,
        "Question": "Which among the following is an advantage of using classes over structures of C?",
        "Options": [
            "a) Functions are restricted",
            "b) Functions can’t be defined",
            "c) Functions can also be encapsulated",
            "d) Functions can have more security",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 384,
        "Question": "Which among the following is a feature of class?",
        "Options": [
            "a) Object orientation",
            "b) Procedure orientation",
            "c) Both object and procedure orientation",
            "d) Neither object nor procedure orientation",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 385,
        "Question": "Class is _____________ of an object.",
        "Options": [
            "a) Basic function definition",
            "b) Detailed description with values",
            "c) Blueprint",
            "d) Set of constant values",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 386,
        "Question": "In which case the classes can be used to make the more efficient program?",
        "Options": [
            "a) To define a function that is called frequently in a program",
            "b) To structure data that is most similar",
            "c) To group the most similar data and operations",
            "d) To define a blueprint that shows memory location of data",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 387,
        "Question": "What is the use of inbuilt classes?",
        "Options": [
            "a) Provide predefined data",
            "b) Provide predefined functions",
            "c) Provide predefined data and functions",
            "d) Provide predeclared data to be overridden",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 388,
        "Question": "Which feature is exhibited by the inbuilt classes?",
        "Options": [
            "a) Code reusability",
            "b) Code efficiency",
            "c) Code readability",
            "d) Code reusability, efficiency and readability",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 389,
        "Question": "Why do we use user defined classes?",
        "Options": [
            "a) To design a user intended code",
            "b) To model real world objects",
            "c) To design the interfaces",
            "d) To model the functions",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 390,
        "Question": "Why do classes use accessor methods?",
        "Options": [
            "a) To make public data accessible to client",
            "b) To make public data private to client",
            "c) To make private data public for whole program",
            "d) To make private data accessible to the client",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 391,
        "Question": "Why do classes use mutator methods?",
        "Options": [
            "a) Allows client to modify the program",
            "b) Allows client to modify/write the private members",
            "c) Allows servers to access all the private data",
            "d) Allows servers to access only protected members",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 392,
        "Question": "Which among the following is the most abstract form of class?",
        "Options": [
            "a) Cars",
            "b) BMW cars",
            "c) Big cars",
            "d) Small cars",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 393,
        "Question": "Which among the following best describes the Inheritance?",
        "Options": [
            "a) Copying the code already written",
            "b) Using the code already written once",
            "c) Using already defined functions in programming language",
            "d) Using the data and functions into derived segment",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 394,
        "Question": "How many basic types of inheritance are provided as OOP feature?",
        "Options": [
            "a) 4",
            "b) 3",
            "c) 2",
            "d) 1",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 395,
        "Question": "Which among the following best defines single level inheritance?",
        "Options": [
            "a) A class inheriting a derived class",
            "b) A class inheriting a base class",
            "c) A class inheriting a nested class",
            "d) A class which gets inherited by 2 classes",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 396,
        "Question": "Which among the following is correct for multiple inheritance?",
        "Options": [
            "a) class student{public:  int marks;}s;  class stream{int total;}; class topper:public student, public stream{  };",
            "b) class student{int marks;}; class stream{ }; class topper: public student{ };",
            "c) class student{int marks;}; class stream:public student{ };",
            "d) class student{ }; class stream{ }; class topper{ };",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 397,
        "Question": "Which programming language doesn’t support multiple inheritance?",
        "Options": [
            "a) C++ and Java",
            "b) C and C++",
            "c) Java and SmallTalk",
            "d) Java",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 398,
        "Question": "Which among the following is correct for a hierarchical inheritance?",
        "Options": [
            "a) Two base classes can be used to be derived into one single class",
            "b) Two or more classes can be derived into one class",
            "c) One base class can be derived into other two derived classes or more",
            "d) One base class can be derived into only 2 classes",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 399,
        "Question": "Which is the correct syntax of inheritance?",
        "Options": [
            "a) class derived_classname : base_classname{ /*define class body*/ };",
            "b) class base_classname : derived_classname{ /*define class body*/ };",
            "c) class derived_classname : access base_classname{ /*define class body*/ };",
            "d) class base_classname :access derived_classname{ /*define class body*/ };",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 400,
        "Question": "Which type of inheritance leads to diamond problem?",
        "Options": [
            "a) Single level",
            "b) Multi-level",
            "c) Multiple",
            "d) Hierarchical",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 401,
        "Question": "Which access type data gets derived as private member in derived class?",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Protected",
            "d) Protected and Private",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 402,
        "Question": "If a base class is inherited in protected access mode then which among the following is true?",
        "Options": [
            "a) Public and Protected members of base class becomes protected members of derived class",
            "b) Only protected members become protected members of derived class",
            "c) Private, Protected and Public all members of base, become private of derived class",
            "d) Only private members of base, become private of derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 403,
        "Question": "Members which are not intended to be inherited are declared as ________________",
        "Options": [
            "a) Public members",
            "b) Protected members",
            "c) Private members",
            "d) Private or Protected members",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 404,
        "Question": "While inheriting a class, if no access mode is specified, then which among the following is true? (in C++)",
        "Options": [
            "a) It gets inherited publicly by default",
            "b) It gets inherited protected by default",
            "c) It gets inherited privately by default",
            "d) It is not possible",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 405,
        "Question": "If a derived class object is created, which constructor is called first?",
        "Options": [
            "a) Base class constructor",
            "b) Derived class constructor",
            "c) Depends on how we call the object",
            "d) Not possible",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 406,
        "Question": "How can you make the private members inheritable?",
        "Options": [
            "a) By making their visibility mode as public only",
            "b) By making their visibility mode as protected only",
            "c) By making their visibility mode as private in derived class",
            "d) It can be done both by making the visibility mode public or protected",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 407,
        "Question": "How many types of inheritance are possible in C++?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 408,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Java supports all types of inheritance",
            "b) Java supports multiple inheritance",
            "c) Java doesn’t support multiple inheritance",
            "d) Java doesn’t support inheritance",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 409,
        "Question": "Which among the following best describes multiple inheritance?",
        "Options": [
            "a) Two classes being parent of any other classes",
            "b) Three classes being parent of other classes",
            "c) More than one class being parent of other child classes",
            "d) More than one class being parent of single child",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 410,
        "Question": "How many types of inheritance can be used at a time in a single program?",
        "Options": [
            "a) Any two types",
            "b) Any three types",
            "c) Any 4 types",
            "d) Any type, any number of times",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 411,
        "Question": "Which type of inheritance results in the diamond problem?",
        "Options": [
            "a) Single level",
            "b) Hybrid",
            "c) Hierarchical",
            "d) Multilevel",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 412,
        "Question": "If 6 classes uses single level inheritance with pair classes (3 pairs), which inheritance will this be called?",
        "Options": [
            "a) Single",
            "b) Multiple",
            "c) Hierarchical",
            "d) Multilevel",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 413,
        "Question": "Which among the following is false?",
        "Options": [
            "a) If one class inherits the inherited class in single level inheritance, it is multi-level inheritance",
            "b) Hybrid inheritance always contains multiple inheritance",
            "c) Hierarchical inheritance involves inheriting same class into more than one classes",
            "d) Hybrid inheritance can involve any types of inheritance together",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 414,
        "Question": "If class A has two nested classes B and C. Class D has one nested class E, and have inherited class A. If E inherits B and C, then ________________",
        "Options": [
            "a) It shows multiple inheritance",
            "b) It shows hierarchical inheritance",
            "c) It shows multiple inheritance",
            "d) Multiple inheritance among nested classes, and single level for enclosing classes",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 415,
        "Question": "Which type of inheritance cannot involve private inheritance?",
        "Options": [
            "a) Single level",
            "b) Multiple",
            "c) Hybrid",
            "d) All types can have private inheritance",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 416,
        "Question": "How many classes can be inherited by a single class in multiple inheritance (C++)?",
        "Options": [
            "a) Only 2",
            "b) Only 27",
            "c) Only 1024",
            "d) Any number of classes can be inherited",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 417,
        "Question": "How many classes can be inherited by a single class in java?",
        "Options": [
            "a) Only 1",
            "b) Only 27",
            "c) Only 255",
            "d) Only 1024",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 418,
        "Question": "If multi-level inheritance is used, First class B inherits class A, then C inherits B and so on. Till how many classes can this go on?",
        "Options": [
            "a) Only till class C",
            "b) Only till class J",
            "c) Only till class Z",
            "d) There is no limit",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 419,
        "Question": "Which among the following defines single level inheritance?",
        "Options": [
            "a) One base class derives another class",
            "b) One derived class inherits from one base class",
            "c) One base class inherits from one derived class",
            "d) One derived class derives from another derived class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 420,
        "Question": "If class A and class B are derived from class C and class D, then ________________",
        "Options": [
            "a) Those are 2 pairs of single inheritance",
            "b) That is multilevel inheritance",
            "c) Those is enclosing class",
            "d) Those are all independent classes",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 421,
        "Question": "If single inheritance is used, program will contain ________________",
        "Options": [
            "a) At least 2 classes",
            "b) At most 2 classes",
            "c) Exactly 2 classes",
            "d) At most 4 classes",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 422,
        "Question": "Single level inheritance supports _____________ inheritance.",
        "Options": [
            "a) Runtime",
            "b) Compile time",
            "c) Multiple inheritance",
            "d) Language independency",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 423,
        "Question": "If single level inheritance is used and an abstract class is created with some undefined functions, can its derived class also skip some definitions?",
        "Options": [
            "a) Yes, always possible",
            "b) Yes, possible if only one undefined function",
            "c) No, at least 2 undefined functions must be there",
            "d) No, the derived class must implement those methods",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 424,
        "Question": "Which among the following is false for single level inheritance?",
        "Options": [
            "a) There can be more than 2 classes in program to implement single inheritance",
            "b) There can be exactly 2 classes to implement single inheritance in a program",
            "c) There can be more than 2 independent classes involved in single inheritance",
            "d) The derived class must implement all the abstract method if single inheritance is used",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 425,
        "Question": "Which concept will result in derived class with more features (consider maximum 3 classes)?",
        "Options": [
            "a) Single inheritance",
            "b) Multiple inheritance",
            "c) Multilevel inheritance",
            "d) Hierarchical inheritance",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 426,
        "Question": "Single level inheritance is safer than _____________",
        "Options": [
            "a) Multiple inheritance",
            "b) Interfaces",
            "c) Implementations",
            "d) Extensions",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 427,
        "Question": "Which language doesn’t support single level inheritance?",
        "Options": [
            "a) Java",
            "b) C++",
            "c) Kotlin",
            "d) All languages support it",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 428,
        "Question": "Single level inheritance will be best for___________",
        "Options": [
            "a) Inheriting a class which performs all the calculations",
            "b) Inheriting a class which can print all the calculation results",
            "c) Inheriting a class which can perform and print all calculations",
            "d) Inheriting all the classes for different calculations",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 429,
        "Question": "Which constructor will be called first from the classes involved in single inheritance from object of derived class?",
        "Options": [
            "a) Base class constructor",
            "b) Derived class constructor",
            "c) Both class constructors at a time",
            "d) Runtime error",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 430,
        "Question": "If base class contains 2 nested classes, will it be possible to implement single level inheritance?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only if derived class also have nested classes",
            "c) No, it will use more than 2 classes which is wrong",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 431,
        "Question": "Which among the following best defines multilevel inheritance?",
        "Options": [
            "a) A class derived from another derived class",
            "b) Classes being derived from other derived classes",
            "c) Continuing single level inheritance",
            "d) Class which have more than one parent",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 432,
        "Question": "If there are 5 classes, E is derived from D, D from C, C from B and B from A. Which class constructor will be called first if the object of E or D is created?",
        "Options": [
            "a) A",
            "b) B",
            "c) C",
            "d) A and B",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 433,
        "Question": "If there are 3 classes. Class C is derived from class B and B is derived from A, Which class destructor will be called at last if object of C is destroyed.",
        "Options": [
            "a) A",
            "b) B",
            "c) C",
            "d) All together",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 434,
        "Question": "Which Class is having highest degree of abstraction in multilevel inheritance of 5 levels?",
        "Options": [
            "a) Class at 1st level",
            "b) Class 2nd last level",
            "c) Class at 5th level",
            "d) All with same abstraction",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 435,
        "Question": "If all the classes use private inheritance in multilevel inheritance then ______________",
        "Options": [
            "a) It will not be called multilevel inheritance",
            "b) Each class can access only non-private members of its parent",
            "c) Each subsequent class can access all members of previous level parent classes",
            "d) None of the members will be available to any other class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 436,
        "Question": "Multilevel inheritance allows _________________ in the program.",
        "Options": [
            "a) Only 7 levels of inheritance",
            "b) At least 7 levels of inheritance",
            "c) At most 16 levels of inheritance",
            "d) As many levels of inheritance as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 437,
        "Question": "What is the minimum number of levels for a implementing multilevel inheritance?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 438,
        "Question": "In multilevel inheritance one class inherits _______________",
        "Options": [
            "a) Only one class",
            "b) More than one class",
            "c) At least one class",
            "d) As many classes as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 439,
        "Question": "Can abstract classes be used in multilevel inheritance?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only one abstract class",
            "c) No, abstract class doesn’t have constructors",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 440,
        "Question": "How many abstract classes can be used in multilevel inheritance?",
        "Options": [
            "a) Only 1",
            "b) Only 2",
            "c) At least one less than number of levels",
            "d) Can’t be used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 441,
        "Question": "If all the classes used parameterized constructors and no default constructor then ___________",
        "Options": [
            "a) The object of lower level classes can’t be created",
            "b) Object of lower level classes must call parent class constructors explicitly",
            "c) Object of lower level classes must define all the default constructors",
            "d) Only object of first class can be created, which is first parent",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 442,
        "Question": "In multilevel inheritance, which is the most significant feature of OOP used?",
        "Options": [
            "a) Code readability",
            "b) Flexibility",
            "c) Code reusability",
            "d) Code efficiency",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 443,
        "Question": "Is it compulsory for all the classes in multilevel inheritance to have constructors defined explicitly if only last derived class object is created?",
        "Options": [
            "a) Yes, always",
            "b) Yes, to initialize the members",
            "c) No, it not necessary",
            "d) No, Constructor must not be defined",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 444,
        "Question": "Multiple inheritance is ____________________",
        "Options": [
            "a) When a class is derived from another class",
            "b) When a class is derived from two or more classes",
            "c) When a class is derived from other two derived classes",
            "d) When a class is derived from exactly one class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 445,
        "Question": "Which problem arises due to multiple inheritance, if hierarchical inheritance is used previously for its base classes?",
        "Options": [
            "a) Diamond",
            "b) Circle",
            "c) Triangle",
            "d) Loop",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 446,
        "Question": "How many classes should a program contain to implement the multiple inheritance?",
        "Options": [
            "a) Only 1",
            "b) At least 1",
            "c) At least 3",
            "d) Exactly 3",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 447,
        "Question": "Which programming language restricts the use of multiple inheritance?",
        "Options": [
            "a) C++",
            "b) PHP",
            "c) SmallTalk",
            "d) Java",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 448,
        "Question": "Is it possible to have all the abstract classes as base classes of a derived class from those?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only if derived class implements all the methods",
            "c) No, because abstract classes doesn’t have constructors",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 449,
        "Question": "If class A inherits class B and class C as “class A: public class B, public class C {// class body ;}; ”, which class constructor will be called first?",
        "Options": [
            "a) Class A",
            "b) Class B",
            "c) Class C",
            "d) All together",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 450,
        "Question": "Why does diamond problem arise due to multiple inheritance?",
        "Options": [
            "a) Methods with same name creates ambiguity and conflict",
            "b) Methods inherited from the superclass may conflict",
            "c) Derived class gets overloaded with more than two class methods",
            "d) Derived class can’t distinguish the owner class of any derived method",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 451,
        "Question": "How many base classes can a derived class have which is implementing multiple inheritance?",
        "Options": [
            "a) Only 2",
            "b) At least 2",
            "c) At most 2",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 452,
        "Question": "How to overcome diamond problem?",
        "Options": [
            "a) Using alias name",
            "b) Using seperate derived class",
            "c) Using virtual keyword with same name function",
            "d) Can’t be done",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 453,
        "Question": "When multiple inheritance is used, which class object should be used in order to access all the available members of parent and derived class?",
        "Options": [
            "a) Derived class object",
            "b) Parent class objects",
            "c) Use Abstract derived class",
            "d) Derive a class from derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 454,
        "Question": "If all the members of all the base classes are private then _____________",
        "Options": [
            "a) There won’t be any use of multiple inheritance",
            "b) It will make those members public",
            "c) Derived class can still access them in multiple inheritance",
            "d) Compile time error",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 455,
        "Question": "Is it compulsory to have constructor for all the classes involved in multiple inheritance?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only if no abstract class is involved",
            "c) No, only classes being used should have a constructor",
            "d) No, they must not contain constructors",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 456,
        "Question": "If a class contains 2 nested class and is being inherited by another class, will there be any multiple inheritance?",
        "Options": [
            "a) No, only single level inheritance is used",
            "b) No, only multilevel inheritance is used",
            "c) Yes, because 3 classes are involved",
            "d) Yes, because more than 1 classes are being derived",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 457,
        "Question": "Which members can’t be accessed in derived class in multiple inheritance?",
        "Options": [
            "a) Private members of base",
            "b) Public members of base",
            "c) Protected members of base",
            "d) All the members of base",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 458,
        "Question": "Can the derived class be made abstract if multiple inheritance is used?",
        "Options": [
            "a) No, because other classes must be abstract too",
            "b) Yes, if all the functions are implemented",
            "c) Yes, if all the methods are predefined",
            "d) No, since constructors won’t be there",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 459,
        "Question": "Which among the following is best to define hierarchical inheritance?",
        "Options": [
            "a) More than one classes being derived from one class",
            "b) More than 2 classes being derived from single base class",
            "c) At most 2 classes being derived from single base class",
            "d) At most 1 class derived from another class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 460,
        "Question": "Do members of base class gets divided among all of its child classes?",
        "Options": [
            "a) Yes, equally",
            "b) Yes, depending on  type of inheritance",
            "c) No, it’s doesn’t get divided",
            "d) No, it may or may not get divided",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 461,
        "Question": "Each class can inherit the base class ________________",
        "Options": [
            "a) Independently using any inheritance",
            "b) Independently with private inheritance only",
            "c) With same type of inheritance",
            "d) With each class using different inheritance only",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 462,
        "Question": "How many classes must be there to implement hierarchical inheritance?",
        "Options": [
            "a) Exactly 3",
            "b) At least 3",
            "c) At most 3",
            "d) At least 1",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 463,
        "Question": "Base class  _______________",
        "Options": [
            "a) Can be made abstract",
            "b) Can’t be made abstract",
            "c) Must be abstract",
            "d) If made abstract, compile time error",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 464,
        "Question": "Which access specifiers should be used so that all the derived classes restrict further inheritance of base class members?",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Protected",
            "d) Any inheritance type can be used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 465,
        "Question": "How many classes can be derived from the base class using hierarchical inheritance?",
        "Options": [
            "a) As many as required",
            "b) Only 7",
            "c) Only 3",
            "d) Up to 127",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 466,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Hierarchical inheritance is subset of multiple inheritances",
            "b) Hierarchical inheritance is strongest inheritance type",
            "c) Hierarchical inheritance uses only 2 classes for implementation",
            "d) Hierarchical inheritance allows inheritance of common features to more than one class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 467,
        "Question": "Hierarchical inheritance can be a subset of _________________",
        "Options": [
            "a) Hybrid inheritance",
            "b) Multiple inheritance",
            "c) Single level inheritance",
            "d) Multilevel inheritance",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 468,
        "Question": "Which type of inheritance is most suitable for inheriting Same syllabus into different colleges with different streams?",
        "Options": [
            "a) Multiple",
            "b) Single",
            "c) Hierarchical",
            "d) Multilevel",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 469,
        "Question": "Which class constructor is called first when an object of derived class is created?",
        "Options": [
            "a) Base class constructor",
            "b) Derived class constructor",
            "c) Firstly created derived class constructor",
            "d) Last created derived class constructor",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 470,
        "Question": "Which among the following best defines the hybrid inheritance?",
        "Options": [
            "a) Combination of two or more inheritance types",
            "b) Combination of same type of inheritance",
            "c) Inheritance of more than 7 classes",
            "d) Inheritance involving all the types of inheritance",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 471,
        "Question": "How many types of inheritance should be used for hybrid?",
        "Options": [
            "a) Only 1",
            "b) At least 2",
            "c) At most two",
            "d) Always more than 2",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 472,
        "Question": "If single inheritance is used with class A and B. A is base class. Then class C, D and E where C is base class and D is derived from C, then E is derived from D. Class C is made to inherit from class B. Which is the resultant type?",
        "Options": [
            "a) Single level",
            "b) Multilevel",
            "c) Hybrid",
            "d) Multiple",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 473,
        "Question": "Diamond problem includes ____________________ hybrid inheritance.",
        "Options": [
            "a) Hierarchical and Multiple",
            "b) Hierarchical and Hierarchical",
            "c) Multiple and Multilevel",
            "d) Single, Hierarchical and Multiple",
            ""
        ],
        "Answer": "Answer:a"
    },
    {
        "id": 474,
        "Question": "If __________________ inheritance is done continuously, it is similar to tree structure.",
        "Options": [
            "a) Hierarchical",
            "b) Multiple",
            "c) Multilevel",
            "d) Hierarchical and Multiple",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 475,
        "Question": "Which amongst the following is true for hybrid inheritance?",
        "Options": [
            "a) Constructor calls are in reverse",
            "b) Constructor calls are priority based",
            "c) Constructor of only derived class is called",
            "d) Constructor calls are usual",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 476,
        "Question": "Which type of inheritance must be used so that the resultant is hybrid?",
        "Options": [
            "a) Multiple",
            "b) Hierarchical",
            "c) Multilevel",
            "d) None",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 477,
        "Question": "If hierarchical inheritance requires to inherit more than one class to single class, which syntax is correct? (A, B, C are class names)",
        "Options": [
            "a) hierarchical class A: public B, public C",
            "b) multiple class A: public B, public C",
            "c) many class A: public B, public C",
            "d) class A: public B, public C",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 478,
        "Question": "What is the maximum number of classes allowed in hybrid inheritance?",
        "Options": [
            "a) 7",
            "b) 127",
            "c) 255",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 479,
        "Question": "What is the minimum number of classes to be there in a program implementing hybrid inheritance?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) No limit",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 480,
        "Question": "If object of lowest level class is created (last derived class) ________________  of its parent class constructors are called.",
        "Options": [
            "a) Few",
            "b) All",
            "c) Only parent and parent",
            "d) Base and Derived",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 481,
        "Question": "If hybrid inheritance is used, it mostly shows _______________ feature of OOP.",
        "Options": [
            "a) Flexibility",
            "b) Reusability",
            "c) Efficiency",
            "d) Code readability",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 482,
        "Question": "The sequence of destructors being called while using hybrid inheritance is ____________",
        "Options": [
            "a) Reverse of constructors being called",
            "b) Reverse of classes being made",
            "c) Reverse of objects being created",
            "d) Reverse of code calling objects",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 483,
        "Question": "Virtual function is ______ class function which expected to be redefined in ______ class, so that when reference is made to derived class object using pointer then we can call virtual function to execute ________ class definition version.",
        "Options": [
            "a) Base, derived, derived",
            "b) Derived, Derived, Derived",
            "c) Base, derived, base",
            "d) Base, base, derived",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 484,
        "Question": "What does a virtual function ensure for an object, among the following?",
        "Options": [
            "a) Correct method is called, regardless of the class defining it",
            "b) Correct method is called, regardless of the object being called",
            "c) Correct method is called, regardless of the type of reference used for function call",
            "d) Correct method is called, regardless of the type of function being called by objects",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 485,
        "Question": "Virtual functions are mainly used to achieve _____________",
        "Options": [
            "a) Compile time polymorphism",
            "b) Interpreter polymorphism",
            "c) Runtime polymorphism",
            "d) Functions code polymorphism",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 486,
        "Question": "Which keyword is used to declare virtual functions?",
        "Options": [
            "a) virtual",
            "b) virt",
            "c) anonymous",
            "d) virtually",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 487,
        "Question": "Where the virtual function should be defined?",
        "Options": [
            "a) Twice in base class",
            "b) Derived class",
            "c) Base class and derived class",
            "d) Base class",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 488,
        "Question": "The resolving of virtual functions is done at ______________",
        "Options": [
            "a) Compile time",
            "b) Interpret time",
            "c) Runtime",
            "d) Writing source code",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 489,
        "Question": "In which access specifier should a virtual function be defined?",
        "Options": [
            "a) Private",
            "b) Public",
            "c) Protected",
            "d) Default",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 490,
        "Question": "Virtual functions can never be made _______________",
        "Options": [
            "a) Static function",
            "b) Parameterized function",
            "c) Default argument function",
            "d) Zero parameter function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 491,
        "Question": "Which is a must condition for virtual function to achieve runtime polymorphism?",
        "Options": [
            "a) Virtual function must be accessed with direct name",
            "b) Virtual functions must be accessed using base class object",
            "c) Virtual function must be accessed using pointer or reference",
            "d) Virtual function must be accessed using derived class object only",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 492,
        "Question": "Which among the following is true for virtual functions?",
        "Options": [
            "a) Prototype must be different in base and derived class",
            "b) Prototype must be same in base class and derived class",
            "c) Prototype must be given only in base class",
            "d) Prototype must have different signature in base and derived class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 493,
        "Question": "The virtual functions must be declared and defined in _____________ class and overridden in ___________ class.",
        "Options": [
            "a) Base, base",
            "b) Derived, derived",
            "c) Derived, base",
            "d) Base, derived",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 494,
        "Question": "It is __________ to redefine the virtual function in derived class.",
        "Options": [
            "a) Necessary",
            "b) Not necessary",
            "c) Not acceptable",
            "d) Good practice",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 495,
        "Question": "Which among the following is true?",
        "Options": [
            "a) A class may have virtual destructor but not virtual constructor",
            "b) A class may have virtual constructor but not virtual destructor",
            "c) A class may have virtual constructor and virtual constructor",
            "d) A class may have either virtual destructor or virtual constructor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 496,
        "Question": "If virtual function of base class is redefined in derived class then ________________",
        "Options": [
            "a) It must be declared virtual in derived class also",
            "b) It may or may not be declared virtual in derived class",
            "c) It can must not be declared virtual in derived class",
            "d) It must be declared normally in derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 497,
        "Question": "Which among the following best defines the abstract methods?",
        "Options": [
            "a) Functions declared and defined in base class",
            "b) Functions only declared in base class",
            "c) Function which may or may not be defined in base class",
            "d) Function which must be declared in derived class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 498,
        "Question": "Which among the following is true?",
        "Options": [
            "a) The abstract functions must be only declared in derived classes",
            "b) The abstract functions must not be defined in derived classes",
            "c) The abstract functions must be defined in base and derived class",
            "d) The abstract functions must be defined either in base or derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 499,
        "Question": "How are abstract functions different from the abstract functions?",
        "Options": [
            "a) Abstract must not be defined in base class whereas virtual function can be defined",
            "b) Either of those must be defined in base class",
            "c) Different according to definition",
            "d) Abstract functions are faster",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 500,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) Abstract functions should not be defined in all the derived classes",
            "b) Abstract functions should be defined only in one derived class",
            "c) Abstract functions must be defined in base class",
            "d) Abstract functions must be defined in all the derived classes",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 501,
        "Question": "It is ____________________ to define the abstract functions.",
        "Options": [
            "a) Mandatory for all the classes in program",
            "b) Necessary for all the base classes",
            "c) Necessary for all the derived classes",
            "d) Not mandatory for all the derived classes",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 502,
        "Question": "The abstract function definitions in derived classes is enforced at _________",
        "Options": [
            "a) Runtime",
            "b) Compile time",
            "c) Writing code time",
            "d) Interpreting time",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 503,
        "Question": "What is this feature of enforcing definitions of abstract function at compile time called?",
        "Options": [
            "a) Static polymorphism",
            "b) Polymorphism",
            "c) Dynamic polymorphism",
            "d) Static or dynamic according to need",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 504,
        "Question": "What is the syntax for using abstract method?",
        "Options": [
            "a) <access-modifier>abstract<return-type>method_name (parameter)",
            "b) abs<return-type>method name (parameter)",
            "c) <access-modifier>abstract return-type method name (parameter)",
            "d) <access-modifier>abstract <returning> method name (parameter)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 505,
        "Question": "If a function declared as abstract in base class doesn’t have to be defined in derived class then ______",
        "Options": [
            "a) Derived class must define the function anyhow",
            "b) Derived class should be made abstract class",
            "c) Derived class should not derive from that base class",
            "d) Derived class should not use that function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 506,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Abstract methods can be static",
            "b) Abstract methods can be defined in derived class",
            "c) Abstract methods must not be static",
            "d) Abstract methods can be made static in derived class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 507,
        "Question": "Which among the following is correct for abstract methods?",
        "Options": [
            "a) It must have different prototype in the derived class",
            "b) It must have same prototype in both base and derived class",
            "c) It must have different signature in derived class",
            "d) It must have same return type only",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 508,
        "Question": "If a class have all the abstract methods the class will be known as ___________",
        "Options": [
            "a) Abstract class",
            "b) Anonymous class",
            "c) Base class",
            "d) Derived class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 509,
        "Question": "The abstract methods can never be ___________ in a base class.",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) Default",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 510,
        "Question": "The abstract method definition can be made ___________ in derived class.",
        "Options": [
            "a) Private",
            "b) Protected",
            "c) Public",
            "d) Private, public, or protected",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 511,
        "Question": "How many types of member functions are possible in general?",
        "Options": [
            "a) 2",
            "b) 3",
            "c) 4",
            "d) 5",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 512,
        "Question": "Simple member functions are ______________________",
        "Options": [
            "a) Ones defined simply without any type",
            "b) Ones defined with keyword simple",
            "c) Ones that are implicitly provided",
            "d) Ones which are defined in all the classes",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 513,
        "Question": "What are static member functions?",
        "Options": [
            "a) Functions which use only static data member but can’t be accessed directly",
            "b) Functions which uses static and other data members",
            "c) Functions which can be accessed outside the class with the data members",
            "d) Functions using only static data and can be accessed directly in main() function",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 514,
        "Question": "How can static member function can be accessed directly in main() function?",
        "Options": [
            "a) Dot operator",
            "b) Colon",
            "c) Scope resolution operator",
            "d) Arrow operator",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 515,
        "Question": "Correct syntax to access the static member functions from the main() function is ______________",
        "Options": [
            "a) classObject::functionName();",
            "b) className::functionName();",
            "c) className:classObject:functionName();",
            "d) className.classObject:functionName();",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 516,
        "Question": "What are const member functions?",
        "Options": [
            "a) Functions in which none of the data members can be changed in a program",
            "b) Functions in which only static members can be changed",
            "c) Functions which treat all the data members as constant and doesn’t allow changes",
            "d) Functions which can change only the static members",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 517,
        "Question": "Which among the following best describes the inline member functions?",
        "Options": [
            "a) Functions defined inside the class only",
            "b) Functions with keyword inline only",
            "c) Functions defined outside the class",
            "d) Functions defined inside the class or with the keyword inline",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 518,
        "Question": "What are friend member functions (C++)?",
        "Options": [
            "a) Member function which can access all the members of a class",
            "b) Member function which can modify any data of a class",
            "c) Member function which doesn’t have access to private members",
            "d) Non-member functions which have access to all the members (including private) of a class",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 519,
        "Question": "What is the syntax of a const member function?",
        "Options": [
            "a) void fun() const {}",
            "b) void fun() constant {}",
            "c) void const fun() {}",
            "d) const void fun(){}",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 520,
        "Question": "Which keyword is used to make a nonmember function as friend function of a class?",
        "Options": [
            "a) friendly",
            "b) new",
            "c) friend",
            "d) connect",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 521,
        "Question": "Member functions _____________________",
        "Options": [
            "a) Must be defined inside class body",
            "b) Can be defined inside class body or outside",
            "c) Must be defined outside the class body",
            "d) Can be defined in another class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 522,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Member functions can never be private",
            "b) Member functions can never be protected",
            "c) Member functions can never be public",
            "d) Member functions can be defined in any access specifier",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 523,
        "Question": "Which keyword is used to define the static member functions?",
        "Options": [
            "a) static",
            "b) stop",
            "c) open",
            "d) state",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 524,
        "Question": "Which keyword is used to define the inline member function?",
        "Options": [
            "a) no keyword required",
            "b) inline",
            "c) inlined",
            "d) line",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 525,
        "Question": "Which among the following are valid ways of overloading the operators?",
        "Options": [
            "a) Only using friend function",
            "b) Only using member function",
            "c) Either member functions or friend functions can be used",
            "d) Operators can’t be overloaded",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 526,
        "Question": "Which among the following is mandatory condition for operators overloading?",
        "Options": [
            "a) Overloaded operator must be member function of the left operand",
            "b) Overloaded operator must be member function of the right operand",
            "c) Overloaded operator must be member function of either left or right operand",
            "d) Overloaded operator must not be dependent on the operands",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 527,
        "Question": "When the operator to be overloaded becomes the left operand member then ______________",
        "Options": [
            "a) The right operand acts as implicit object represented by *this",
            "b) The left operand acts as implicit object represented by *this",
            "c) Either right or left operand acts as implicit object represented by *this",
            "d) *this pointer is not applicable in that member function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 528,
        "Question": "If the left operand is pointed by *this pointer, what happens to other operands?",
        "Options": [
            "a) Other operands are passed as function return type",
            "b) Other operands are passed to compiler implicitly",
            "c) Other operands must be passed using another member function",
            "d) Other operands are passed as function arguments",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 529,
        "Question": "If a friend overloaded operator have to be changed to member overloaded operator, which operator should be used with the class name?",
        "Options": [
            "a) Scope resolution operator",
            "b) Colon",
            "c) Arrow operator",
            "d) Dot operator",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 530,
        "Question": "What is the syntax to overload an operator?",
        "Options": [
            "a) className::operator<operatorSymbol>(parameters)",
            "b) className:operator<operatorSymbol>(parameters)",
            "c) className.operator<operatorSymbol>(paramteres)",
            "d) className->operator<operatorSymbol>(parameters)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 531,
        "Question": "Why the left parameter is removed from parameter list?",
        "Options": [
            "a) Because it is of no use",
            "b) Because it is never used in definitions",
            "c) Because it becomes parameter pointed by *this",
            "d) Because it can’t be referred by *this pointer",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 532,
        "Question": "Which object’s members can be called directly while overloading operator function is used (In function definition)?",
        "Options": [
            "a) Left operand members",
            "b) Right operand members",
            "c) All operand members",
            "d) None of the members",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 533,
        "Question": "If left operand member is specified directly in the function definition, which is the correct implicit conversion of that syntax?",
        "Options": [
            "a) *this className",
            "b) *this parameterObject",
            "c) *this returnedObject",
            "d) *this object",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 534,
        "Question": "When the friend operator overloading is converted into member operator overloading _______________",
        "Options": [
            "a) Two parameters of friend function remains same parameters in member operator overloading",
            "b) Two parameters of friend function becomes only one parameter of member function",
            "c) Two parameters of friend function are removed while using member function",
            "d) Two parameters of friend function are made 4 in member operator overloading",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 535,
        "Question": "Where in the parameter list is the implicit *this is added?",
        "Options": [
            "a) Right most parameter",
            "b) Anywhere in parameter list",
            "c) Left most parameter",
            "d) Not added to parameter list",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 536,
        "Question": "Which operator among the following can be overloading using only member function?",
        "Options": [
            "a) Assignment operator",
            "b) Addition operator",
            "c) Subtraction operator",
            "d) Multiplication and division operator",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 537,
        "Question": "Which operator among the following can be overloaded using both friend function and member function?",
        "Options": [
            "a) Assignment operator",
            "b) Subscript",
            "c) Member selection (arrow operator)",
            "d) Modulus operator",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 538,
        "Question": "Which operator among the following must be overloaded using the friend function?",
        "Options": [
            "a) << operator only",
            "b) >> operator only",
            "c) Both << and >> operators",
            "d) It’s not mandatory to use friend function in any case",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 539,
        "Question": "What does memory allocation for objects mean?",
        "Options": [
            "a) Actual creation and memory allocation for object members",
            "b) Creation of member functions",
            "c) Creation of data members for a class",
            "d) Actual creation and data declaration for object members",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 540,
        "Question": "Where is the memory allocated for the objects?",
        "Options": [
            "a) HDD",
            "b) Cache",
            "c) RAM",
            "d) ROM",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 541,
        "Question": "When is the memory allocated for an object?",
        "Options": [
            "a) At declaration of object",
            "b) At compile time",
            "c) When object constructor is called",
            "d) When object is initialized to another object",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 542,
        "Question": "Using new is type safe as _______________________",
        "Options": [
            "a) It require to be specified with type of data",
            "b) It doesn’t require to be specified with type of data",
            "c) It requires the name of data",
            "d) It allocated memory for the data",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 543,
        "Question": "Which of the following function can be used for dynamic memory allocation of objects?",
        "Options": [
            "a) malloc()",
            "b) calloc()",
            "c) create()",
            "d) both malloc() and calloc()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 544,
        "Question": "Which keyword among the following can be used to declare an array of objects in java?",
        "Options": [
            "a) new",
            "b) create",
            "c) allocate",
            "d) arr",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 545,
        "Question": "When is the memory allocated for an object gets free?",
        "Options": [
            "a) At termination of program",
            "b) When object goes out of scope",
            "c) When main function ends",
            "d) When system restarts",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 546,
        "Question": "Which among the following keyword can be used to free the allocated memory for an object?",
        "Options": [
            "a) delete",
            "b) free",
            "c) either delete or free",
            "d) only delete",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 547,
        "Question": "Which function is called whenever an object goes out of scope?",
        "Options": [
            "a) Destructor function",
            "b) Constructor function",
            "c) Delete function",
            "d) Free function",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 548,
        "Question": "Which operator can be used to check the size of an object?",
        "Options": [
            "a) sizeof(objectName)",
            "b) size(objectName)",
            "c) sizeofobject(objectName)",
            "d) sizedobject(objectName)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 549,
        "Question": "The memory allocated for an object ____________________",
        "Options": [
            "a) Can be only dynamic",
            "b) Can be only static",
            "c) Can be static or dynamic",
            "d) Can’t be done using dynamic functions",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 550,
        "Question": "If an object is declared in a user defined function __________________",
        "Options": [
            "a) Its memory is allocated in stack",
            "b) Its memory is allocated in heap",
            "c) Its memory is allocated in HDD",
            "d) Its memory is allocated in cache",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 551,
        "Question": "In java ______________ takes care of managing memory for objects dynamically.",
        "Options": [
            "a) Free collector",
            "b) Dust collector",
            "c) Memory manager",
            "d) Garbage collector",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 552,
        "Question": "Which operator can be used to free the memory allocated for an object in C++?",
        "Options": [
            "a) Free()",
            "b) delete",
            "c) Unallocate",
            "d) Collect",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 553,
        "Question": "Which among the following best describes member function overriding?",
        "Options": [
            "a) Member functions having same name in base and derived classes",
            "b) Member functions having same name in base class only",
            "c) Member functions having same name in derived class only",
            "d) Member functions having same name and different signature inside main function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 554,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Inheritance must not be using when overriding is used",
            "b) Overriding can be implemented without using inheritance",
            "c) Inheritance must be done, to use overriding are overridden",
            "d) Inheritance is mandatory only if more than one functions",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 555,
        "Question": "Which is the correct condition for function overriding?",
        "Options": [
            "a) The declaration must not be same in base and derived class",
            "b) The declaration must be exactly the same in base and derived class",
            "c) The declaration should have at least 1 same argument in declaration of base and derived class",
            "d) The declaration should have at least 1 different argument in declaration of base and derived class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 556,
        "Question": "Exactly same declaration in base and derived class includes______________",
        "Options": [
            "a) Only same name",
            "b) Only same return type and name",
            "c) Only same return type and argument list",
            "d) All the same return type, name and parameter list",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 557,
        "Question": "How to access the overridden method of base class from the derived class?",
        "Options": [
            "a) Using arrow operator",
            "b) Using dot operator",
            "c) Using scope resolution operator",
            "d) Can’t be accessed once overridden",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 558,
        "Question": "The functions to be overridden _____________",
        "Options": [
            "a) Must be private in base class",
            "b) Must not be private base class",
            "c) Must be private in both derived and base class",
            "d) Must not be private in both derived and base class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 559,
        "Question": "Which language doesn’t support the method overriding implicitly?",
        "Options": [
            "a) C++",
            "b) C#",
            "c) Java",
            "d) SmallTalk",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 560,
        "Question": "In C# ____________________",
        "Options": [
            "a) Non – virtual or static methods can’t be overridden",
            "b) Non – virtual and static methods only can be overridden",
            "c) Overriding is not allowed",
            "d) Overriding must be implemented using C++ code only",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 561,
        "Question": "In Delphi ______________",
        "Options": [
            "a) Method overriding is done implicitly",
            "b) Method overriding is not supported",
            "c) Method overriding is done with directive override",
            "d) Method overriding is done with the directive virtually",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 562,
        "Question": "What should be used to call the base class method from the derived class if function overriding is used in Java?",
        "Options": [
            "a) Keyword super",
            "b) Scope resolution",
            "c) Dot operator",
            "d) Function name in parenthesis",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 563,
        "Question": "In Kotlin, the function to be overridden must be ______________",
        "Options": [
            "a) Private",
            "b) Open",
            "c) Closed",
            "d) Abstract",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 564,
        "Question": "Abstract functions of a base class _________________",
        "Options": [
            "a) Are overridden by the definition in same class",
            "b) Are overridden by the definition in parent class",
            "c) Are not overridden generally",
            "d) Are overridden by the definition in derived class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 565,
        "Question": "If virtual functions are defined in the base class then _______________",
        "Options": [
            "a) It is not necessary for derived classes to override those functions",
            "b) It is necessary for derived classes to override those functions",
            "c) Those functions can never be derived",
            "d) Those functions must be overridden by all the derived classes",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 566,
        "Question": "Which feature of OOP is exhibited by the function overriding?",
        "Options": [
            "a) Inheritance",
            "b) Abstraction",
            "c) Polymorphism",
            "d) Encapsulation",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 567,
        "Question": "What are the constant member functions?",
        "Options": [
            "a) Functions which doesn’t change value of calling object",
            "b) Functions which doesn’t change value of any object inside definition",
            "c) Functions which doesn’t allow modification of any object of class",
            "d) Functions which doesn’t allow modification of argument objects",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 568,
        "Question": "Which keyword must be used to declare a member function as a constant member function?",
        "Options": [
            "a) Constant",
            "b) Const",
            "c) FunctionConst",
            "d) Unchanged",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 569,
        "Question": "Which objects can call the const functions?",
        "Options": [
            "a) Only const objects",
            "b) Only non-const objects",
            "c) Both const and non-const objects",
            "d) Neither const not non-const objects",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 570,
        "Question": "Non-const functions _______________________",
        "Options": [
            "a) Can be called only from non-const object",
            "b) Can be called only from const object",
            "c) Can be called both by const and non-const object",
            "d) Can’t be called with object",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 571,
        "Question": "Which is the correct condition on const member functions?",
        "Options": [
            "a) Const member functions can’t call non-const member functions",
            "b) Const member functions can’t call any other function",
            "c) Const member functions can call only the functions which are neither const nor non-const",
            "d) Const member functions can call only data members of call not member functions",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 572,
        "Question": "If a const object calls a non-const member function then ____________________",
        "Options": [
            "a) Run time error may get produced",
            "b) Compile time error may get produced",
            "c) Either compile time or run time error is produced",
            "d) The program can’t be compiled",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 573,
        "Question": "Can a constructor function be constant?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only if permissions are given",
            "c) No, because objects are not involved",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 574,
        "Question": "How is it possible to have both const and non-const version of a function?",
        "Options": [
            "a) Function overriding",
            "b) Function prototyping",
            "c) Function overloading",
            "d) Function declaring",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 575,
        "Question": "When both the const and non-const version of functions are required?",
        "Options": [
            "a) Return value have to be different in const",
            "b) Return value have to be same in const",
            "c) Return values have to be ignored",
            "d) Return values have to be suppressed",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 576,
        "Question": "If a function is to be made const, which is the correct syntax?",
        "Options": [
            "a) const functionName(parameters);",
            "b) const returnType functionName(parameters);",
            "c) const functionName(returnType)(Parameters);",
            "d) const (functionName(parameters));",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 577,
        "Question": "Functions which differ in const-ness are considered ______________________",
        "Options": [
            "a) To have same signature",
            "b) To have different signature",
            "c) To produce compile time error",
            "d) To produce runtime error",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 578,
        "Question": "If const version of a function when overloading is used, the function ___________________",
        "Options": [
            "a) Returns reference to object",
            "b) Returns volatile reference",
            "c) Returns mutable reference",
            "d) Returns const reference",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 579,
        "Question": "Which among the following is recommended for const functions?",
        "Options": [
            "a) Const function use should be reduced in a program",
            "b) Const function use should be more in a program",
            "c) Const function use should not matter in a program",
            "d) Const function use should be able to modify the values",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 580,
        "Question": "Use of const member function in a program _________________________",
        "Options": [
            "a) Is mandatory, always",
            "b) Is optional, always",
            "c) Is mandatory, if objects are used",
            "d) Is optional, if const objects are used",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 581,
        "Question": "Which is private member functions access scope?",
        "Options": [
            "a) Member functions which can only be used within the class",
            "b) Member functions which can used outside the class",
            "c) Member functions which are accessible in derived class",
            "d) Member functions which can’t be accessed inside the class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 582,
        "Question": "Which among the following is true?",
        "Options": [
            "a) The private members can’t be accessed by public members of the class",
            "b) The private members can be accessed by public members of the class",
            "c) The private members can be accessed only by the private members of the class",
            "d) The private members can’t be accessed by the protected members of the class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 583,
        "Question": "Which member can never be accessed by inherited classes?",
        "Options": [
            "a) Private member function",
            "b) Public member function",
            "c) Protected member function",
            "d) All can be accessed",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 584,
        "Question": "Which syntax among the following shows that a member is private in a class?",
        "Options": [
            "a) private: functionName(parameters)",
            "b) private(functionName(parameters))",
            "c) private functionName(parameters)",
            "d) private::functionName(parameters)",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 585,
        "Question": "If private member functions are to be declared in C++ then _____________",
        "Options": [
            "a) private: <all private members>",
            "b) private <member name>",
            "c) private(private member list)",
            "d) private :- <private members>",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 586,
        "Question": "In java, which rule must be followed?",
        "Options": [
            "a) Keyword private preceding list of private member’s",
            "b) Keyword private with a colon before list of private member’s",
            "c) Keyword private with arrow before each private member",
            "d) Keyword private preceding each private member",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 587,
        "Question": "How many private member functions are allowed in a class?",
        "Options": [
            "a) Only 1",
            "b) Only 7",
            "c) Only 255",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 588,
        "Question": "How to access a private member function of a class?",
        "Options": [
            "a) Using object of class",
            "b) Using object pointer",
            "c) Using address of member function",
            "d) Using class address",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 589,
        "Question": "Private member functions ____________",
        "Options": [
            "a) Can’t be called from enclosing class",
            "b) Can be accessed from enclosing class",
            "c) Can be accessed only if nested class is private",
            "d) Can be accessed only if nested class is public",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 590,
        "Question": "Which function among the following can’t be accessed outside the class in java in same package?",
        "Options": [
            "a) public void show()",
            "b) void show()",
            "c) protected show()",
            "d) static void show()",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 591,
        "Question": "If private members are to be called outside the class, which is a good alternative?",
        "Options": [
            "a) Call a public member function which calls private function",
            "b) Call a private member function which calls private function",
            "c) Call a protected member function which calls private function",
            "d) Not possible",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 592,
        "Question": "Which error will be produced if private members are accessed?",
        "Options": [
            "a) Can’t access private message",
            "b) Code unreachable",
            "c) Core dumped",
            "d) Bad code",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 593,
        "Question": "Can main() function be made private?",
        "Options": [
            "a) Yes, always",
            "b) Yes, if program doesn’t contain any classes",
            "c) No, because main function is user defined",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 594,
        "Question": "If a function in java is declared private then it __________________",
        "Options": [
            "a) Can’t access the standard output",
            "b) Can access the standard output",
            "c) Can’t access any output stream",
            "d) Can access only the output streams",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 595,
        "Question": "What are public member functions?",
        "Options": [
            "a) Functions accessible outside the class but not in derived class",
            "b) Functions accessible outside the class directly",
            "c) Functions accessible everywhere using object of class",
            "d) Functions that can’t be accessed outside the class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 596,
        "Question": "Which among the following is true for public member functions?",
        "Options": [
            "a) Public member functions doesn’t have a return type",
            "b) Public member functions doesn’t have any security",
            "c) Public member functions are declared outside the class",
            "d) Public member functions can be called using object of class",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 597,
        "Question": "Which type of member functions get inherited in the same specifier in which the inheritance is done? (If private inheritance is used, those become private and if public used, those become public)",
        "Options": [
            "a) Private member functions",
            "b) Protected member functions",
            "c) Public member functions",
            "d) All member functions",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 598,
        "Question": "Which syntax among the following is correct for public member functions?",
        "Options": [
            "a) public::void functionName(parameters)",
            "b) public void functionName(parameters)",
            "c) public(void functionName(parameters))",
            "d) public:-void functionName(Parameters)",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 599,
        "Question": "Which syntax is applicable to declare public member functions in C++?",
        "Options": [
            "a) public: <function declaration>",
            "b) public(<function declaration>)",
            "c) public void <function declaration>",
            "d) public::<function declaration>",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 600,
        "Question": "In java, which rule among the following is applicable?",
        "Options": [
            "a) Keyword public can’t be preceded with all the public members",
            "b) Keyword public must be preceded with all the public members",
            "c) Keyword public must be post mentioned the function declaration",
            "d) Keyword public is not mandatory",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 601,
        "Question": "How many public members are allowed in a class?",
        "Options": [
            "a) Only 1",
            "b) At most 7",
            "c) Exactly 3",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 602,
        "Question": "Which is not a proper way to access public members of a class?",
        "Options": [
            "a) Using object pointer with arrow operator",
            "b) Using object of class in main function",
            "c) Using object of class with arrow operator",
            "d) Using object anywhere in the program",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 603,
        "Question": "Which call is correct for public members of a nested class?",
        "Options": [
            "a) Can be called from object of enclosing class",
            "b) Can be called within enclosing class only with direct names",
            "c) Direct names should be used for the nested classes",
            "d) Only with help of nested class object pointer",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 604,
        "Question": "Which public function call among the following is correct outside the class, if return type is void (C++)?",
        "Options": [
            "a) object.void functionName(parameters);",
            "b) object.functionName(parameters);",
            "c) object.functionName void (parameters)",
            "d) object.void functionName();",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 605,
        "Question": "If public members are to be restricted from getting inherited from the subclass of the class containing that function, which alternative is best?",
        "Options": [
            "a) Make the function private",
            "b) Use private inheritance",
            "c) Use public inheritance",
            "d) Use protected inheritance",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 606,
        "Question": "If a class have a public member function and is called directly in the main function then ___________________________",
        "Options": [
            "a) Undeclared function error will be produced",
            "b) Out of memory error is given",
            "c) Program gives warning only",
            "d) Program shut down the computer",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 607,
        "Question": "All the public member functions ___________________",
        "Options": [
            "a) Can’t access the private members of a class",
            "b) Can’t access the protected members of a class",
            "c) Can access only public members of a class",
            "d) Can access all the member of its class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 608,
        "Question": "What is an exception?",
        "Options": [
            "a) Problem arising during compile time",
            "b) Problem arising during runtime",
            "c) Problem in syntax",
            "d) Problem in IDE",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 609,
        "Question": "Why do we need to handle exceptions?",
        "Options": [
            "a) To prevent abnormal termination of program",
            "b) To encourage exception prone program",
            "c) To avoid syntax errors",
            "d) To save memory",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 610,
        "Question": "An exception may arise when _______________",
        "Options": [
            "a) Input is fixed",
            "b) Input is some constant value of program",
            "c) Input given is invalid",
            "d) Input is valid",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 611,
        "Question": "If a file that needs to be opened is not found in the target location then _____________",
        "Options": [
            "a) Exception will be produced",
            "b) Exceptions are not produced",
            "c) Exception might get produced because of syntax",
            "d) Exceptions are not produced because of logic",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 612,
        "Question": "Which is the universal exception handler class?",
        "Options": [
            "a) Object",
            "b) Math",
            "c) Errors",
            "d) Exceptions",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 613,
        "Question": "What are two exception classes in hierarchy of java exceptions class?",
        "Options": [
            "a) Runtime exceptions only",
            "b) Compile time exceptions only",
            "c) Runtime exceptions and other exceptions",
            "d) Other exceptions",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 614,
        "Question": "Which are the two blocks that are used to check error and handle the error?",
        "Options": [
            "a) Try and catch",
            "b) Trying and catching",
            "c) Do and while",
            "d) TryDo and Check",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 615,
        "Question": "How many catch blocks can a single try block can have?",
        "Options": [
            "a) Only 1",
            "b) Only 2",
            "c) Maximum 127",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 616,
        "Question": "Which among the following is not a method of Throwable class?",
        "Options": [
            "a) public String getMessage()",
            "b) public Throwable getCause()",
            "c) public Char toString()",
            "d) public void printStackTrace()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 617,
        "Question": "To catch the exceptions ___________________",
        "Options": [
            "a) An object must be created to catch the exception",
            "b) A variable should be created to catch the exception",
            "c) An array should be created to catch all the exceptions",
            "d) A string have to be created to store the exception",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 618,
        "Question": "Multiple catch blocks __________________",
        "Options": [
            "a) Are mandatory for each try block",
            "b) Can be combined into a single catch block",
            "c) Are not possible for a try block",
            "d) Can never be associated with a single try block",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 619,
        "Question": "Which symbol should be used to separate the type of exception handler classes in a single catch block?",
        "Options": [
            "a) ?",
            "b) ,",
            "c) –",
            "d) |",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 620,
        "Question": "Which class is used to handle the input and output exceptions?",
        "Options": [
            "a) InputOutput",
            "b) InputOutputExceptions",
            "c) IOExceptions",
            "d) ExceptionsIO",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 621,
        "Question": "Why do we use finally block?",
        "Options": [
            "a) To execute the block if exception occurred",
            "b) To execute a code when exception is not occurred",
            "c) To execute a code whenever required",
            "d) To execute a code with each and every run of program",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 622,
        "Question": "Which among the following is true for class exceptions?",
        "Options": [
            "a) Only base class can give rise to exceptions",
            "b) Only derived class can give rise to exceptions",
            "c) Either base class or derived class may produce exceptions",
            "d) Both base class and derived class may produce exceptions",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 623,
        "Question": "If both base and derived class caught exceptions ______________",
        "Options": [
            "a) Then catch block of derived class must be defined before base class",
            "b) Then catch block of base class must be defined before the derived class",
            "c) Then catch block of base and derived classes doesn’t matter",
            "d) Then catch block of base and derived classes are not mandatory to be defined",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 624,
        "Question": "Which among the following is true?",
        "Options": [
            "a) If catch block of base class is written first, it is compile time error",
            "b) If catch block of base class is written first, it is run time error",
            "c) If catch block of base class is written first, derived class catch block can’t be reached",
            "d) If catch block of base class is written first, only derived class catch block is executed",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 625,
        "Question": "The catching of base class exception ___________________________ in java.",
        "Options": [
            "a) After derived class is not allowed by compiler",
            "b) Before derived class is not allowed by compiler",
            "c) Before derived class is allowed",
            "d) After derived class can’t be done",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 626,
        "Question": "If catching of base class exception is done before derived class in C++ ________________",
        "Options": [
            "a) It gives compile time error",
            "b) It doesn’t run the program",
            "c) It may give warning but not error",
            "d) It always gives compile time error",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 627,
        "Question": "How many catch blocks can a class have?",
        "Options": [
            "a) Only 1",
            "b) 2",
            "c) 3",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 628,
        "Question": "Since which version of java is multiple exception catch was made possible?",
        "Options": [
            "a) Java 4",
            "b) Java 5",
            "c) Java 6",
            "d) Java 7",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 629,
        "Question": "To catch more than one exception in one catch block, how are the exceptions separated in the syntax?",
        "Options": [
            "a) Vertical bar",
            "b) Hyphen",
            "c) Plus",
            "d) Modulus",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 630,
        "Question": "If a catch block accepts more than one exceptions then __________________",
        "Options": [
            "a) The catch parameters are not final",
            "b) The catch parameters are final",
            "c) The catch parameters are not defined",
            "d) The catch parameters are not used",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 631,
        "Question": "Which among the following handles the undefined class in program?",
        "Options": [
            "a) ClassNotFound",
            "b) NoClassException",
            "c) ClassFoundException",
            "d) ClassNotFoundException",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 632,
        "Question": "If classes produce some exceptions, then ______________________",
        "Options": [
            "a) Their respective catch block must be defined",
            "b) Their respective catch blocks are not mandatory",
            "c) Their catch blocks should be defined inside main function",
            "d) Their catch blocks must be defined at the end of program",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 633,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Only the base class catch blocks are important",
            "b) Only the derived class catch blocks are important",
            "c) Both the base and derived class catch blocks are important",
            "d) If base and derived classes both produce exceptions, program doesn’t run",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 634,
        "Question": "Which is the necessary condition to define the base and derived class catch blocks?",
        "Options": [
            "a) Base class catch should be defined first",
            "b) Derived class catch should be defined first",
            "c) Catch block for both the classes must not be defined",
            "d) Catch block must be defined inside main function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 635,
        "Question": "Which condition among the following might result in memory exception?",
        "Options": [
            "a) False if conditions",
            "b) Nested if conditions that are all false",
            "c) Infinite loops",
            "d) Loop that runs exactly 99 times",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 636,
        "Question": "Which among the following best defines static variables members?",
        "Options": [
            "a) Data which is allocated for each object separately",
            "b) Data which is common to all the objects of a class",
            "c) Data which is common to all the classes",
            "d) Data which is common to a specific method",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 637,
        "Question": "Which keyword should be used to declare static variables?",
        "Options": [
            "a) static",
            "b) stat",
            "c) common",
            "d) const",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 638,
        "Question": "Any changes made to static data member from one member function _____________",
        "Options": [
            "a) Is reflected to only the corresponding object",
            "b) Is reflected to all the variables in a program",
            "c) Is reflected to all the objects of that class",
            "d) Is constant to that function only",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 639,
        "Question": "Which is the correct syntax for declaring static data member?",
        "Options": [
            "a) static mamberName dataType;",
            "b) dataType static memberName;",
            "c) memberName static dataType;",
            "d) static dataType memberName;",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 640,
        "Question": "The static data member ______________________",
        "Options": [
            "a) Must be defined inside the class",
            "b) Must be defined outside the class",
            "c) Must be defined in main function",
            "d) Must be defined using constructor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 641,
        "Question": "The syntax for defining the static data members is __________",
        "Options": [
            "a) dataType className :: memberName = value;",
            "b) dataType className : memberName = value;",
            "c) dataType className . memberName = value;",
            "d) dataType className -> memberName =value;",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 642,
        "Question": "If static data members have to be used inside a class, those member functions _______________",
        "Options": [
            "a) Must not be static member functions",
            "b) Must not be member functions",
            "c) Must be static member functions",
            "d) Must not be member function of corresponding class",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 643,
        "Question": "The static data member __________________________",
        "Options": [
            "a) Can be accessed directly",
            "b) Can be accessed with any public class name",
            "c) Can be accessed with dot operator",
            "d) Can be accessed using class name if not using static member function",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 644,
        "Question": "Which among the following is the correct syntax to access static data member without using member function?",
        "Options": [
            "a) className -> staticDataMember;",
            "b) className :: staticDataMember;",
            "c) className : staticDataMember;",
            "d) className . staticDataMember;",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 645,
        "Question": "Which data members among the following are static by default?",
        "Options": [
            "a) extern",
            "b) integer",
            "c) const",
            "d) void",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 646,
        "Question": "Whenever any static data member is declared in a class ______________________",
        "Options": [
            "a) Only one copy of the data is created",
            "b) New copy for each object is created",
            "c) New memory location is allocated with each object",
            "d) Only one object uses the static data",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 647,
        "Question": "If object of class are created, then the static data members can be accessed ____________",
        "Options": [
            "a) Using dot operator",
            "b) Using arrow operator",
            "c) Using colon",
            "d) Using dot or arrow operator",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 648,
        "Question": "Which among the following is wrong syntax related to static data members?",
        "Options": [
            "a) className :: staticDataMember;",
            "b) dataType className :: memberName =value;",
            "c) static dataType memberName;",
            "d) className : dataType -> memberName;",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 649,
        "Question": "Which among the following is correct definition for static member functions?",
        "Options": [
            "a) Functions created to allocate constant values to each object",
            "b) Functions made to maintain single copy of member functions for all objects",
            "c) Functions created to define the static members",
            "d) Functions made to manipulate static programs",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 650,
        "Question": "The static member functions __________________",
        "Options": [
            "a) Have access to all the members of a class",
            "b) Have access to only constant members of a class",
            "c) Have access to only the static members of a class",
            "d) Have direct access to all other class members also",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 651,
        "Question": "The static member functions ____________________",
        "Options": [
            "a) Can be called using class name",
            "b) Can be called using program name",
            "c) Can be called directly",
            "d) Can’t be called outside the function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 652,
        "Question": "Which is correct syntax to access the static member functions with class name?",
        "Options": [
            "a) className . functionName;",
            "b) className -> functionName;",
            "c) className : functionName;",
            "d) className :: functionName;",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 653,
        "Question": "Which among the following is not applicable for the static member functions?",
        "Options": [
            "a) Variable pointers",
            "b) void pointers",
            "c) this pointer",
            "d) Function pointers",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 654,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Static member functions can’t be virtual",
            "b) Static member functions can be virtual",
            "c) Static member functions can be declared virtual if it is pure virtual class",
            "d) Static member functions can be used as virtual in Java",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 655,
        "Question": "The static members are ______________________",
        "Options": [
            "a) Created with each new object",
            "b) Created twice in a program",
            "c) Created as many times a class is used",
            "d) Created and initialized only once",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 656,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Static member functions can be overloaded",
            "b) Static member functions can’t be overloaded",
            "c) Static member functions can be overloaded using derived classes",
            "d) Static member functions are implicitly overloaded",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 657,
        "Question": "The static member functions _______________",
        "Options": [
            "a) Can’t be declared const",
            "b) Can’t be declared volatile",
            "c) Can’t be declared const or volatile",
            "d) Can’t be declared const, volatile or const volatile",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 658,
        "Question": "Which keyword should be used to declare the static member functions?",
        "Options": [
            "a) static",
            "b) stat",
            "c) const",
            "d) common",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 659,
        "Question": "The keyword static is used _______________",
        "Options": [
            "a) With declaration inside class and with definition outside the class",
            "b) With declaration inside class and not with definition outside the class",
            "c) With declaration and definition wherever done",
            "d) With each call to the member function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 660,
        "Question": "Which among the following can’t be used to access the members in any way?",
        "Options": [
            "a) Scope resolution",
            "b) Arrow operator",
            "c) Single colon",
            "d) Dot operator",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 661,
        "Question": "We can use the static member functions and static data member __________________",
        "Options": [
            "a) Even if class object is not created",
            "b) Even if class is not defined",
            "c) Even if class doesn’t contain any static member",
            "d) Even if class doesn’t have complete definition",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 662,
        "Question": "The static data member _________________",
        "Options": [
            "a) Can be mutable",
            "b) Can’t be mutable",
            "c) Can’t be integer",
            "d) Can’t be characters",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 663,
        "Question": "If static data member are made inline, ______________",
        "Options": [
            "a) Those should be initialized outside the class",
            "b) Those can’t be initialized with the class",
            "c) Those can be initialized within the class",
            "d) Those can’t be used by class members",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 664,
        "Question": "Passing object to a function _______________",
        "Options": [
            "a) Can be done only in one way",
            "b) Can be done in more than one ways",
            "c) Is not possible",
            "d) Is not possible in OOP",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 665,
        "Question": "The object ________________",
        "Options": [
            "a) Can be passed by reference",
            "b) Can be passed by value",
            "c) Can be passed by reference or value",
            "d) Can be passed with reference",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 666,
        "Question": "Which symbol should be used to pass the object by reference in C++?",
        "Options": [
            "a) &",
            "b) @",
            "c) $",
            "d) $ or &",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 667,
        "Question": "If object is passed by value ______________",
        "Options": [
            "a) Copy constructor is used to copy the values into another object in the function",
            "b) Copy constructor is used to copy the values into temporary object",
            "c) Reference to the object is used to access the values of the object",
            "d) Reference to the object is used to created new object in its place",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 668,
        "Question": "Pass by reference of an object to a function _______________",
        "Options": [
            "a) Affects the object in called function only",
            "b) Affects the object in prototype only",
            "c) Affects the object in caller function",
            "d) Affects the object only if mentioned with & symbol with every call",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 669,
        "Question": "Copy constructor definition requires __________________",
        "Options": [
            "a) Object to be passed by value",
            "b) Object not to be passed to it",
            "c) Object to be passed by reference",
            "d) Object to be passed with each data member value",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 670,
        "Question": "What is the type of object that should be specified in the argument list?",
        "Options": [
            "a) Function name",
            "b) Object name itself",
            "c) Caller function name",
            "d) Class name of object",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 671,
        "Question": "If an object is passed by value, _________________",
        "Options": [
            "a) Temporary object is used in the function",
            "b) Local object in the function is used",
            "c) Only the data member values are used",
            "d) The values are accessible from the original object",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 672,
        "Question": "Can data members be passed to a function using the object?",
        "Options": [
            "a) Yes, it can be passed only inside class functions",
            "b) Yes, only if the data members are public and are being passed to a function outside the class",
            "c) No, can’t be passed outside the class",
            "d) No, can’t be done",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 673,
        "Question": "What exactly is passed when an object is passed by reference?",
        "Options": [
            "a) The original object name",
            "b) The original object class name",
            "c) The exact address of the object in memory",
            "d) The exact address of data members",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 674,
        "Question": "If the object is not to be passed to any function but the values of the object have to be used then?",
        "Options": [
            "a) The data members should be passed separately",
            "b) The data members and member functions have to be passed separately",
            "c) The values should be present in other variables",
            "d) The object must be passed",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 675,
        "Question": "Which among the following is true?",
        "Options": [
            "a) More than one object can’t be passed to a function",
            "b) Any number of objects can be passed to a function",
            "c) Objects can’t be passed, only data member values can be passed",
            "d) Objects should be passed only if those are public in class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 676,
        "Question": "In which type is new memory location will be allocated?",
        "Options": [
            "a) Only in pass by reference",
            "b) Only in pass by value",
            "c) Both in pass by reference and value",
            "d) Depends on the code",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 677,
        "Question": "In which of the following way(s) can the object be returned from a function?",
        "Options": [
            "a) Can only be returned by value",
            "b) Can only be returned by reference",
            "c) Can be returned either by value or reference",
            "d) Can neither be returned by value nor by reference",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 678,
        "Question": "Whenever an object is returned by value ____________________",
        "Options": [
            "a) A temporary object is created",
            "b) Temporary object is not created",
            "c) Temporary object may or may not be created",
            "d) New permanent object is created",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 679,
        "Question": "Where the temporary objects (created while return by value) are created?",
        "Options": [
            "a) Outside the function scope",
            "b) Within the function",
            "c) Inside the main function",
            "d) Inside the calling function",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 680,
        "Question": "Which is the correct syntax for returning an object by value?",
        "Options": [
            "a) void functionName ( ){ }",
            "b) object functionName( ) { }",
            "c) class object functionName( ) { }",
            "d) ClassName functionName ( ){ }",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 681,
        "Question": "Which is the correct syntax for defining a function which passes an object by reference?",
        "Options": [
            "a) className& functionName ( )",
            "b) className* functionName( )",
            "c) className-> functionName( )",
            "d) &className functionName()",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 682,
        "Question": "If an object is declared inside the function then ____________________ outside the function.",
        "Options": [
            "a) It can be returned by reference",
            "b) It can’t be returned by reference",
            "c) It can be returned by address",
            "d) It can’t be returned at all",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 683,
        "Question": "How many independent objects can be returned at same time from a function?",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 684,
        "Question": "Which error will be produced if a local object is returned by reference outside a function?",
        "Options": [
            "a) Out of memory error",
            "b) Run time error",
            "c) Compile time error",
            "d) No error",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 685,
        "Question": "If object is passed by reference ____________________",
        "Options": [
            "a) Temporary object is created",
            "b) Temporary object is created inside the function",
            "c) Temporary object is created for few seconds",
            "d) Temporary object is not created",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 686,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) Individual data members can’t be returned",
            "b) Individual data members can be returned",
            "c) Individual member functions can be returned from another function",
            "d) Individual data members can only be passed by reference",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 687,
        "Question": "Can we return an array of objects?",
        "Options": [
            "a) Yes, always",
            "b) Ye, only if objects are having same values",
            "c) No, because objects contain many other values",
            "d) No, because objects are single entity",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 688,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Two objects can point to the same memory location",
            "b) Two objects can never point to the same memory location",
            "c) Objects not allowed to point at a location already occupied",
            "d) Objects can’t point to any address",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 689,
        "Question": "If an object is being returned by value then __________________________",
        "Options": [
            "a) Its member values are made constant",
            "b) Its member values have to be copied individually",
            "c) Its member values are not used",
            "d) Its member values are copied using copy constructor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 690,
        "Question": "Why temporary object is not created in return by reference?",
        "Options": [
            "a) Because compiler can’t create temporary objects",
            "b) Because the temporary object is created within the function",
            "c) Because return by reference just make the objects points to values memory location",
            "d) Because return by reference just make the object point to null",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 691,
        "Question": "When value of an object is assigned to another object ________________",
        "Options": [
            "a) It becomes invalid statement",
            "b) Its values gets copied into another object",
            "c) Its values gets address of the existing values",
            "d) The compiler doesn’t execute that statement",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 692,
        "Question": "If an object is created and another object is assigned to it, then ________________",
        "Options": [
            "a) Copy constructor is called to copy the values",
            "b) Object is copied directly to the object",
            "c) Reference to another object is created",
            "d) The new object is initialized to null values",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 693,
        "Question": "How the argument passed to a function get initialized?",
        "Options": [
            "a) Assigned using copy constructor at time of passing",
            "b) Copied directly",
            "c) Uses addresses always",
            "d) Doesn’t get initialized",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 694,
        "Question": "If programmer doesn’t define any copy assignment operator then ____________________",
        "Options": [
            "a) Compiler gives an error",
            "b) Program fails at run time",
            "c) Compiler gives an implicit definition",
            "d) Compiler can’t copy the member values",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 695,
        "Question": "In copy constructor definition, if non const values are accepted only ________",
        "Options": [
            "a) Only const objects will be accepted",
            "b) Only non – const objects are accepted",
            "c) Only const members will not get copied",
            "d) Compiler generates an error",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 696,
        "Question": "How many objects can be assigned to a single address?",
        "Options": [
            "a) Only 1",
            "b) At most 7",
            "c) At most 3",
            "d) As many as required",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 697,
        "Question": "Use of assignment operator ____________________",
        "Options": [
            "a) Changes its use, when used at declaration and in normal assignment",
            "b) Doesn’t changes its use, whatever the syntax might be",
            "c) Assignment takes place in declaration and assignment syntax",
            "d) Doesn’t work in normal syntax, but only with declaration",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 698,
        "Question": "If more than one object refer to the same address, any changes made __________",
        "Options": [
            "a) Can be made visible to specific objects",
            "b) Will be specific to one object only",
            "c) From any object will be visible in all",
            "d) Doesn’t changes the values of all objects",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 699,
        "Question": "How to make more than one object refer to the same object?",
        "Options": [
            "a) Initialize it to null",
            "b) Initialize the object with another at declaration",
            "c) Use constructor to create new object",
            "d) Assign the address directly",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 700,
        "Question": "We can assign ______________________",
        "Options": [
            "a) Value of one reference variable to another",
            "b) Value of any object to another",
            "c) Value of any type to any object",
            "d) Value of non – reference to another reference",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 701,
        "Question": "Assigning reference to an object _________________",
        "Options": [
            "a) Will create another copy of the object",
            "b) Will create two different copies of the object",
            "c) Will not create any other copy of the object",
            "d) Will not refer to the object",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 702,
        "Question": "Which among the following is true?",
        "Options": [
            "a) We can use direct assignment for any object",
            "b) We can use direct assignment only for different class objects",
            "c) We must not use direct assignment",
            "d) We can use direct assignment to same class objects",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 703,
        "Question": "Which language among the following doesn’t allow pointers?",
        "Options": [
            "a) C++",
            "b) Java",
            "c) Pascal",
            "d) C",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 704,
        "Question": "Which is correct syntax for declaring pointer to object?",
        "Options": [
            "a) className* objectName;",
            "b) className objectName;",
            "c) *className objectName;",
            "d) className objectName();",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 705,
        "Question": "Which operator should be used to access the members of the class using object pointer?",
        "Options": [
            "a) Dot operator",
            "b) Colon to the member",
            "c) Scope resolution operator",
            "d) Arrow operator",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 706,
        "Question": "How does compiler decide the intended object to be used, if more than one object are used?",
        "Options": [
            "a) Using object name",
            "b) Using an integer pointer",
            "c) Using this pointer",
            "d) Using void pointer",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 707,
        "Question": "If pointer to an object is declared __________",
        "Options": [
            "a) It can store any type of address",
            "b) It can store only void addresses",
            "c) It can only store address of integer type",
            "d) It can only store object address of class type specified",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 708,
        "Question": "What is the size of an object pointer?",
        "Options": [
            "a) Equal to size of any usual pointer",
            "b) Equal to size of sum of all the members of object",
            "c) Equal to size of maximum sized member of object",
            "d) Equal to size of void",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 709,
        "Question": "A pointer _________________",
        "Options": [
            "a) Can point to only one object at a time",
            "b) Can point to more than one objects at a time",
            "c) Can point to only 2 objects at a time",
            "d) Can point to whole class objects at a time",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 710,
        "Question": "Pointer to a base class can be initialized with the address of derived class, because of _________",
        "Options": [
            "a) derived-to-base implicit conversion for pointers",
            "b) base-to-derived implicit conversion for pointers",
            "c) base-to-base implicit conversion for pointers",
            "d) derived-to-derived implicit conversion for pointers",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 711,
        "Question": "Can pointers to object access the private members of the class?",
        "Options": [
            "a) Yes, always",
            "b) Yes, only if it is only pointer to object",
            "c) No, because objects can be referenced from another objects too",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 712,
        "Question": "Is name of an array of objects is also a pointer to object?",
        "Options": [
            "a) Yes, always",
            "b) Yes, in few cases",
            "c) No, because it represents more than one object",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 713,
        "Question": "Which among the following is true?",
        "Options": [
            "a) The pointer to object can hold address only",
            "b) The pointer can hold value of any type",
            "c) The pointer can hold only void reference",
            "d) The pointer can’t hold any value",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 714,
        "Question": "Which is the correct syntax to call a member function using pointer?",
        "Options": [
            "a) pointer->function()",
            "b) pointer.function()",
            "c) pointer::function()",
            "d) pointer:function()",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 715,
        "Question": "If a pointer to an object is created and the object gets deleted without using the pointer then __________",
        "Options": [
            "a) It becomes void pointer",
            "b) It becomes dangling pointer",
            "c) It becomes null pointer",
            "d) It becomes zero pointer",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 716,
        "Question": "How can the address stored in the pointer be retrieved?",
        "Options": [
            "a) Using * symbol",
            "b) Using $ symbol",
            "c) Using & symbol",
            "d) Using @ symbol",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 717,
        "Question": "What should be done to prevent changes that may be made to the values pointed by the pointer?",
        "Options": [
            "a) Usual pointer can’t change the values pointed",
            "b) Pointer should be made virtual",
            "c) Pointer should be made anonymous",
            "d) Pointer should be made const",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 718,
        "Question": "Which is the pointer which denotes the object calling the member function?",
        "Options": [
            "a) Variable pointer",
            "b) This pointer",
            "c) Null pointer",
            "d) Zero pointer",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 719,
        "Question": "Which among the following is true?",
        "Options": [
            "a) this pointer is passed implicitly when member functions are called",
            "b) this pointer is passed explicitly when member functions are called",
            "c) this pointer is passed with help of pointer member functions are called",
            "d) this pointer is passed with help of void pointer member functions are called",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 720,
        "Question": "The this pointer is accessible __________________",
        "Options": [
            "a) Within all the member functions of the class",
            "b) Only within functions returning void",
            "c) Only within non-static functions",
            "d) Within the member functions with zero arguments",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 721,
        "Question": "An object’s this pointer _____________________",
        "Options": [
            "a) Isn’t part of class",
            "b) Isn’t part of program",
            "c) Isn’t part of compiler",
            "d) Isn’t part of object itself",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 722,
        "Question": "The result of sizeof() function __________________",
        "Options": [
            "a) Includes space reserved for this pointer",
            "b) Includes space taken up by the address pointer by this pointer",
            "c) Doesn’t include the space taken by this pointer",
            "d) Doesn’t include space for any data member",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 723,
        "Question": "Whenever non-static member functions are called _______________",
        "Options": [
            "a) Address of the object is passed implicitly as an argument",
            "b) Address of the object is passed explicitly as an argument",
            "c) Address is specified globally so that the address is not used again",
            "d) Address is specified as return type of the function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 724,
        "Question": "Which is the correct interpretation of the member function call from an object, object.function(parameter);",
        "Options": [
            "a) object.function(&this, parameter)",
            "b) object(&function,parameter)",
            "c) function(&object,&parameter)",
            "d) function(&object,parameter)",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 725,
        "Question": "The address of the object _________________",
        "Options": [
            "a) Can’t be accessed from inside the function",
            "b) Can’t be accessed in the program",
            "c) Is available inside the member function using this pointer",
            "d) Can be accessed using the object name inside the member function",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 726,
        "Question": "Which among the following is true?",
        "Options": [
            "a) This pointer can be used to guard against any kind of reference",
            "b) This pointer can be used to guard against self-reference",
            "c) This pointer can be used to guard from other pointers",
            "d) This pointer can be used to guard from parameter referencing",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 727,
        "Question": "Which syntax doesn’t execute/is false when executed?",
        "Options": [
            "a) if(&object != this)",
            "b) if(&function !=object)",
            "c) this.if(!this)",
            "d) this.function(!this)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 728,
        "Question": "The this pointers _____________________",
        "Options": [
            "a) Are modifiable",
            "b) Can be assigned any value",
            "c) Are made variables",
            "d) Are non-modifiable",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 729,
        "Question": "Earlier implementations of C++ ___________________",
        "Options": [
            "a) Never allowed assignment to this pointer",
            "b) Allowed no assignment to this pointer",
            "c) Allowed assignments to this pointer",
            "d) Never allowed assignment to any pointer",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 730,
        "Question": "This pointer can be used directly to ___________",
        "Options": [
            "a) To manipulate self-referential data structures",
            "b) To manipulate any reference to pointers to member functions",
            "c) To manipulate class references",
            "d) To manipulate and disable any use of pointers",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 731,
        "Question": "Which among the following is/are type(s) of this pointer?",
        "Options": [
            "a) const",
            "b) volatile",
            "c) const or volatile",
            "d) int",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 732,
        "Question": "Which is the correct syntax for declaring the type of this in a member function?",
        "Options": [
            "a) classType [cv-qualifier-list] *const this;",
            "b) classType const[cv-qualifier-list] *this;",
            "c) [cv-qualifier-list]*const classType this;",
            "d) [cv-qualifier-list] classType *const this;",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 733,
        "Question": "What are default arguments?",
        "Options": [
            "a) Arguments which are not mandatory to be passed",
            "b) Arguments with default value that aren’t mandatory to be passed",
            "c) Arguments which are not passed to functions",
            "d) Arguments which always take same data value",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 734,
        "Question": "Which is the correct condition for the default arguments?",
        "Options": [
            "a) Those must be declared as last arguments in argument list",
            "b) Those must be declared first in the argument list",
            "c) Those can be defined anywhere in the argument list",
            "d) Those are declared inside the function definition",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 735,
        "Question": "If a member function have to be made both zero argument and parameterized constructor, which among the following can be the best option?",
        "Options": [
            "a) Two normal and one default argument",
            "b) At least one default argument",
            "c) Exactly one default argument",
            "d) Make all the arguments default",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 736,
        "Question": "Which among the following function can be called without arguments?",
        "Options": [
            "a) void add(int x, int y=0)",
            "b) void add(int=0)",
            "c) void add(int x=0, int y=0)",
            "d) void add(char c)",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 737,
        "Question": "If a function have all the default arguments but still some values are passed to the function then ______________",
        "Options": [
            "a) The function will use the values passed to it",
            "b) The function will use the default values as those are local",
            "c) The function can use any value whichever is higher",
            "d) The function will choose the minimum values",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 738,
        "Question": "Which among the following is correct?",
        "Options": [
            "a) void test(int x=0, int y, int z=0)",
            "b) void test(int x=0, int=0)",
            "c) void test(int x, int y=0)",
            "d) void test(int x=’c, int y)",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 739,
        "Question": "What function will be called with the independent syntax “test(5,6,7);”?",
        "Options": [
            "a) void test(int x, int y)",
            "b) void test(int x=0, int y, int z)",
            "c) int test(int x=0, y=0, z=0)",
            "d) void test(int x, int y, int z=0)",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 740,
        "Question": "Which among the following is a wrong call to the function void test(int x, int y=0, int z=0)?",
        "Options": [
            "a) test(5,6,7);",
            "b) test(5);",
            "c) test();",
            "d) test(5,6);",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 741,
        "Question": "Default arguments are _________________________",
        "Options": [
            "a) Only allowed in the parameter list of the function declaration",
            "b) Only allowed in the return type of the function declaration",
            "c) Only allowed with the class name definition",
            "d) Only allowed with the integer type values",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 742,
        "Question": "Which among the following is false for default arguments?",
        "Options": [
            "a) Those are not allowed with a declaration of pointer to functions",
            "b) Those are not allowed with the reference to functions",
            "c) Those are not allowed with the typedef declarations",
            "d) Those are allowed with pointer and reference to function declaration",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 743,
        "Question": "The non-template functions can be added with default arguments to already declared functions ____________________",
        "Options": [
            "a) If and only if the function is declared again in the same scope",
            "b) If and only if the function is declared only once in the same scope",
            "c) If and only if the function is declared in different scope",
            "d) If and only if the function is declared twice in the program",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 744,
        "Question": "The using declaration __________",
        "Options": [
            "a) Doesn’t carry over the default values",
            "b) Carries over the known default arguments",
            "c) Carries over only the normal arguments",
            "d) Carries over only few default arguments",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 745,
        "Question": "The names given to the default arguments are only looked up and ________________ and are bound during declaration.",
        "Options": [
            "a) Checked for availability",
            "b) Checked for random access",
            "c) Checked for accessibility",
            "d) Checked for feasibility",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 746,
        "Question": "The default argument get bound during declaration ________________",
        "Options": [
            "a) And are never executed",
            "b) And are executed simultaneously",
            "c) But are executed only if priority is given",
            "d) But are executed during function call",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 747,
        "Question": "The virtual function overrides ____________",
        "Options": [
            "a) Do not acquire base class declaration of default arguments",
            "b) Do acquire base class declaration of default arguments",
            "c) Do not link with the default arguments of base class",
            "d) Do link with the default argument but only of derived classes",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 748,
        "Question": "Which among the following is true for constructors overloading?",
        "Options": [
            "a) Constructors can’t be overloaded",
            "b) Constructors can be overloaded using different signatures",
            "c) Constructors can be overloaded with same signatures",
            "d) Constructors can be overloaded with different return types",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 749,
        "Question": "If a constructors should be capable of creating objects without argument and with arguments, which is a good alternative for this purpose?",
        "Options": [
            "a) Use zero argument constructor",
            "b) Use constructor with one parameter",
            "c) Use constructor with all default arguments",
            "d) Use default constructor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 750,
        "Question": "Which among the following is true?",
        "Options": [
            "a) The constructors overloading can be done by using different names",
            "b) The constructors overloading can be done by using different return types",
            "c) The constructors can be overloaded by using only one argument",
            "d) The constructors must have the same name as that of class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 751,
        "Question": "Which among the following can be used in place of default constructor?",
        "Options": [
            "a) constructorName(int x, int y=0)",
            "b) constructorName(int x=0, int y=0)",
            "c) constructorName(int x=0, int y)",
            "d) constructorName(int x, int y)",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 752,
        "Question": "Can a class have more than one function with all the default arguments?",
        "Options": [
            "a) Yes, always",
            "b) Yes, if argument list is different",
            "c) No, because constructors overloading doesn’t depend on argument list",
            "d) No, never",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 753,
        "Question": "Which is the correct syntax for using default arguments with the constructor?",
        "Options": [
            "a) default constructorName(default int x=0)",
            "b) constructorName(default int x=0)",
            "c) constructorName(int x=0)",
            "d) constructorName()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 754,
        "Question": "If the constructors are overloaded by using the default arguments, which problem may arise?",
        "Options": [
            "a) The constructors might have all the same arguments except the default arguments",
            "b) The constructors might have same return type",
            "c) The constructors might have same number of arguments",
            "d) The constructors can’t be overloaded with respect to default arguments",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 755,
        "Question": "Which among the following is true?",
        "Options": [
            "a) More than one constructors with all default arguments is allowed",
            "b) More than one constructors with all default arguments can be defined outside the class",
            "c) More than one constructors can be used with same argument list",
            "d) More than one constructors with all default arguments can’t exist in same class",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 756,
        "Question": "Which constructor among the following will be called if a call is made like className(5,’a’);?",
        "Options": [
            "a) className(int x=5,char c=’a’);",
            "b) int className(int x, char c, char d);",
            "c) className(int x, char c, int y);",
            "d) char className(char c,int x);",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 757,
        "Question": "Which constructor definition will produce a compile time error?",
        "Options": [
            "a) className(int x=0);",
            "b) className(char c);",
            "c) className(int x=0,char c);",
            "d) className(char c,int x=0);",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 758,
        "Question": "If there is a constructor with all the default arguments and arguments are not passed then _________________",
        "Options": [
            "a) The default values given will not be used",
            "b) Then all the null values will be used",
            "c) Then all the default values given will be used",
            "d) Then compiler will produce an error",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 759,
        "Question": "Which is the correct statement for default constructors?",
        "Options": [
            "a) The constructors with all the default arguments",
            "b) The constructors with all the null and zero values",
            "c) The constructors which can’t be defined by programmer",
            "d) The constructors with zero arguments",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 760,
        "Question": "Which is a good alternative instead of having one zero argument constructor and one single argument constructor with default argument?",
        "Options": [
            "a) No constructor defined",
            "b) One default value constructor",
            "c) Defining the default constructor",
            "d) Using one constructor with two arguments",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 761,
        "Question": "What is upcasting?",
        "Options": [
            "a) Casting subtype to supertype",
            "b) Casting super type to subtype",
            "c) Casting subtype to super type and vice versa",
            "d) Casting anytype to any other type",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 762,
        "Question": "Which among the following is true for upcasting in inheritance?",
        "Options": [
            "a) Downward to the inheritance tree",
            "b) Upward to the inheritance tree",
            "c) Either upward or downward",
            "d) Doesn’t apply on inheritance",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 763,
        "Question": "Which among the following is safe?",
        "Options": [
            "a) Upcasting",
            "b) Downcasting",
            "c) Both upcasting and downcasting",
            "d) If upcasting is safe then downcasting is not, and vice versa",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 764,
        "Question": "Which among the following is the best situation to use upcasting?",
        "Options": [
            "a) For general code dealing with only subtype",
            "b) For general code dealing with only supertype",
            "c) For general code dealing with both the supertype and subtype",
            "d) For writing a rigid code with respect to subtype",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 765,
        "Question": "Which property is shown most when upcasting is used?",
        "Options": [
            "a) Code reusability",
            "b) Code efficiency",
            "c) Complex code simple syntax",
            "d) Encapsulation",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 766,
        "Question": "If multiple inheritance is implemented, which upcasting will be correct?",
        "Options": [
            "a) Upcast to first base class listed in inheritance",
            "b) Upcast to send base class listed in inheritance",
            "c) Upcast to any base class",
            "d) Upcast is not possible",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 767,
        "Question": "If class C inherits class B and class B inherits class A ________________",
        "Options": [
            "a) Class C object can be upcasted to object of class B only",
            "b) Class C object can be upcasted to object of class A only",
            "c) Class C object can be upcasted to object of either class A or B",
            "d) Class C object can’t be upcasted",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 768,
        "Question": "Upcasting is _____________________ without an explicit type cast.",
        "Options": [
            "a) Always allowed for public inheritance",
            "b) Always allowed for protected inheritance",
            "c) Always allowed for private inheritance",
            "d) Not allowed",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 769,
        "Question": "Which concept is needed because of implicit type casting use?",
        "Options": [
            "a) Static binding",
            "b) Dynamic binding",
            "c) Compile time binding",
            "d) Source code binding",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 770,
        "Question": "When are the pointer types known for upcasting the objects?",
        "Options": [
            "a) Compile time",
            "b) Runtime",
            "c) Source code build time",
            "d) Doesn’t apply to pointer types",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 771,
        "Question": "When are the object type known for upcasting the objects?",
        "Options": [
            "a) Compile time",
            "b) Runtime",
            "c) Source code build time",
            "d) Doesn’t apply to objects directly",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 772,
        "Question": "If two classes are defined “Parent” and “Child” then which is the correct type upcast syntax in C++?",
        "Options": [
            "a) Parent *p=child;",
            "b) Parent *p=*child;",
            "c) Parent *p=&child;",
            "d) Parent *p=Child();",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 773,
        "Question": "Which among the following is true?",
        "Options": [
            "a) Upcasting is possible only for single level inheritance",
            "b) Upcasting is possible only for multilevel inheritance",
            "c) Upcasting is possible only for multiple inheritance",
            "d) Upcasting is possible for any type of inheritance",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 774,
        "Question": "What is downcasting?",
        "Options": [
            "a) Casting subtype to supertype",
            "b) Casting supertype to subtype",
            "c) Casting subtype to supertype and vice versa",
            "d) Casting anytype to any other type",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 775,
        "Question": "Which among the following is a mandatory condition for downcasting?",
        "Options": [
            "a) It must not be done explicitly",
            "b) It must be done implicitly",
            "c) It must be done explicitly",
            "d) It can’t be done explicitly",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 776,
        "Question": "Downcasting is _______________________",
        "Options": [
            "a) Always safe",
            "b) Never safe",
            "c) Safe sometimes",
            "d) Safe, depending on code",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 777,
        "Question": "Downcasting ____________________",
        "Options": [
            "a) Can result in unexpected results",
            "b) Can’t result in unexpected result",
            "c) Can result only in out of memory error",
            "d) Can’t result in any error",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 778,
        "Question": "What should be used for safe downcast?",
        "Options": [
            "a) Static cast",
            "b) Dynamic cast",
            "c) Manual cast",
            "d) Implicit cast",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 779,
        "Question": "What does dynamic_cast return after successful type casting?",
        "Options": [
            "a) Address of object which is converted",
            "b) Address of object that is used for conversion",
            "c) Address of object that is mentioned in the syntax",
            "d) Doesn’t return any address",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 780,
        "Question": "If dynamic_cast fails, which value is returned?",
        "Options": [
            "a) void",
            "b) null",
            "c) void pointer",
            "d) null pointer",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 781,
        "Question": "Which is the proper syntax of dynamic_cast?",
        "Options": [
            "a) dynamic_cast(object)",
            "b) dynamic_cast new (object)",
            "c) dynamic_cast(object)",
            "d) dynamic_cast(object)",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 782,
        "Question": "Which is the exception handler for the exceptions of downcasting?",
        "Options": [
            "a) CastException",
            "b) ClassCastingExeption",
            "c) ClassCasting",
            "d) ClassCastException",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 783,
        "Question": "How to prevent the ClassCastExceptions?",
        "Options": [
            "a) By using instanceof",
            "b) By using is-a check",
            "c) By using arrow operator with check function",
            "d) By checking type of conversion",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 784,
        "Question": "Which way the downcasting is possible with respect to inheritance?",
        "Options": [
            "a) Upward the inheritance order",
            "b) Downward the inheritance order",
            "c) Either upward or downward the inheritance order",
            "d) Order of inheritance doesn’t matter",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 785,
        "Question": "What happens when downcasting is done but not explicitly defined in syntax?",
        "Options": [
            "a) Compile time error",
            "b) Runtime error",
            "c) Code write time error",
            "d) Conversion error",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 786,
        "Question": "When is the downcasting used?",
        "Options": [
            "a) To separate inherited class from base class",
            "b) To write a more complex code",
            "c) To compare two objects",
            "d) To disable one class in inheritance",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 787,
        "Question": "Why is downcasting possible in any language?",
        "Options": [
            "a) Because inheritance follows has-a relationship",
            "b) Because inheritance follows is-a relationship",
            "c) Because inheritance doesn’t follow any relationship",
            "d) Because inheritance is not involved in casting",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 788,
        "Question": "What is the new operator?",
        "Options": [
            "a) Allocates memory for an object or array",
            "b) Allocates memory for an object or array and returns a particular pointer",
            "c) Used as return type when an object is created",
            "d) Used to declare any new thing in a program",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 789,
        "Question": "Microsoft C++ Components extensions support new keyword to _____________",
        "Options": [
            "a) Modify a vtable",
            "b) Replace a vtable slot entry",
            "c) Add new vtable slot entries",
            "d) Rearrange vtable slot entries",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 790,
        "Question": "What happens when new fails?",
        "Options": [
            "a) Returns zero always",
            "b) Throws an exception always",
            "c) Either throws an exception or returns zero",
            "d) Terminates the program",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 791,
        "Question": "If new throws an error, which function can be called to write a custom exception handler?",
        "Options": [
            "a) _set_handler",
            "b) _new_handler",
            "c) _handler_setter",
            "d) _set_new_handler",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 792,
        "Question": "In C++, if new operator is used, when is the constructor called?",
        "Options": [
            "a) Before the allocation of memory",
            "b) After the allocation of memory",
            "c) Constructor is called to allocate memory",
            "d) Depends on code",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 793,
        "Question": "Which among the following is correct syntax to declare a 2D array using new operator?",
        "Options": [
            "a) char (*pchar)[10] = new char[][10];",
            "b) char (pchar) = new char[][10];",
            "c) char (*char) = new char[10][];",
            "d) char (*char)[][10]= new char;",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 794,
        "Question": "For declaring data by using new operator ____________________",
        "Options": [
            "a) Type name can’t contain const",
            "b) Type name can’t contain volatile",
            "c) Type name can’t contain class declarations",
            "d) Type name can’t contain const, volatile, class declaration or enumerations",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 795,
        "Question": "The new operator _____________",
        "Options": [
            "a) Can allocate reference types too",
            "b) Doesn’t allocate reference types",
            "c) Can allocate reference to objects",
            "d) Doesn’t allocate any data",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 796,
        "Question": "Which among the following is true?",
        "Options": [
            "a) New operator can’t allocate functions but pointer to functions can be allocated",
            "b) New operator can allocate functions as well as pointer to functions",
            "c) New operator can allocate any type of functions",
            "d) New operator is not applicable with functions allocation",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 797,
        "Question": "Which among the following is added in grammar of new operator?",
        "Options": [
            "a) Finalize",
            "b) Arg",
            "c) Initializer",
            "d) Allocator",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 798,
        "Question": "Initializers __________________",
        "Options": [
            "a) Are used for specifying arrays",
            "b) Are used to defined multidimensional arrays",
            "c) Can’t be specified for arrays",
            "d) Can’t be specified for any data",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 799,
        "Question": "The objects allocated using new operator ________________",
        "Options": [
            "a) Are destroyed when they go out of scope",
            "b) Are not destroyed even if they go out of scope",
            "c) Are destroyed anytime",
            "d) Are not destroyed throughout the program execution",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 800,
        "Question": "The new operator _________________",
        "Options": [
            "a) Invokes function operator new",
            "b) Doesn’t invoke function operator new",
            "c) Invokes function operator only if required",
            "d) Can’t invoke function operator new implicitly",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 801,
        "Question": "If a new operator is defined for a class and still global new operator have to be used, which operator should be used with the keyword new?",
        "Options": [
            "a) Colon",
            "b) Arrow",
            "c) Dot",
            "d) Scope resolution",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 802,
        "Question": "How does compiler convert “::operator new” implicitly?",
        "Options": [
            "a) ::operator new( sizeof( type ) )",
            "b) ::operator new( sizeof( ) )",
            "c) new operator :: type sizeof( type )",
            "d) new sizeof( type ) operator",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 803,
        "Question": "What is a delete operator?",
        "Options": [
            "a) Deallocates a block of memory",
            "b) Deallocates whole program memory",
            "c) Deallocates only primitive data memory",
            "d) Deallocates all the data reserved for a class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 804,
        "Question": "If an object is allocated using new operator ____________",
        "Options": [
            "a) It should be deleted using delete operator",
            "b) It can’t be deleted using delete operator",
            "c) It may or may not be deleted using delete operator",
            "d) The delete operator is not applicable",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 805,
        "Question": "Does delete return any value?",
        "Options": [
            "a) Yes, positive value",
            "b) Yes, negative value",
            "c) Yes, zero value",
            "d) No",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 806,
        "Question": "Which type of value has resulted from the delete operator?",
        "Options": [
            "a) void",
            "b) void pointer",
            "c) null pointer",
            "d) null",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 807,
        "Question": "If delete is used to delete an object which was not allocated using new _______________",
        "Options": [
            "a) Then out of memory error arises",
            "b) Then unreachable code error arises",
            "c) Then unpredictable errors may arise",
            "d) Then undefined variable error arises",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 808,
        "Question": "Delete operator _________________",
        "Options": [
            "a) Can be used on pointers with null value",
            "b) Can be used on pointers with void value",
            "c) Can be used on pointer with value 0",
            "d) Can be used on pointer with any value",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 809,
        "Question": "When delete operator is used ___________________ (If object has a destructor)",
        "Options": [
            "a) Object destructor is called after deallocation",
            "b) Object destructor is called before deallocation",
            "c) Object destructor is not used",
            "d) Object destructor can be called anytime during destruction",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 810,
        "Question": "If delete is applied to an object whose l-value is modifiable, then _______________ after the object is deleted.",
        "Options": [
            "a) Its value is defined as null",
            "b) Its value is defined as void",
            "c) Its value is defined as 0",
            "d) Its value is undefined",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 811,
        "Question": "How many variants of delete operator are available?",
        "Options": [
            "a) Only 1",
            "b) Only 2",
            "c) Only 3",
            "d) Only 4",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 812,
        "Question": "Which is the correct syntax to delete a single object?",
        "Options": [
            "a) delete *objectName;",
            "b) objectName delete;",
            "c) delete objectName;",
            "d) objectName *delete;",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 813,
        "Question": "Which is the correct syntax to delete an array of objects?",
        "Options": [
            "a) delete [] objectName;",
            "b) delete * objectName;",
            "c) objectName[] delete;",
            "d) delete objectName[];",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 814,
        "Question": "Which cases among the following produces the undefined result?",
        "Options": [
            "a) delete [] on an independent object",
            "b) delete on an object array",
            "c) delete [] on an object and delete on object array",
            "d) Undefined result is never produced",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 815,
        "Question": "The delete operator __________________",
        "Options": [
            "a) Invokes function operator delete",
            "b) Invokes function defined by user to delete",
            "c) Invokes function defined in global scope to delete object",
            "d) Doesn’t invoke any function",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 816,
        "Question": "For objects that are not of class type ______________",
        "Options": [
            "a) Global delete operator is invoked",
            "b) Local delete operator is invoked",
            "c) Global user defined function is invoked",
            "d) Local function to delete object is called",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 817,
        "Question": "The delete operator __________________________",
        "Options": [
            "a) Can be defined for each class",
            "b) Can’t be defined for each class",
            "c) Can be defined globally only",
            "d) Can’t be defined in a program explicitly",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 818,
        "Question": "What are automatic variables?",
        "Options": [
            "a) Global variables",
            "b) Implicit/temporary variables",
            "c) Local variables",
            "d) System variables",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 819,
        "Question": "The memory for automatic variables ___________________",
        "Options": [
            "a) Have to be allocated and deallocated explicitly",
            "b) Are allocated and deallocated automatically",
            "c) Is never actually allocated",
            "d) Are never safe",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 820,
        "Question": "Scope of an automatic variable _______________",
        "Options": [
            "a) Is actually the whole program",
            "b) Is actually never fixed",
            "c) Is always equal to the whole program execution",
            "d) Is actually function or block in which it is defined",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 821,
        "Question": "Which among the following is true for automatic variables in general?",
        "Options": [
            "a) Automatic variables are invisible to called function",
            "b) Automatic variables are always visible to the called function",
            "c) Automatic variables can’t interact with the called function",
            "d) Automatic variables can’t be variable",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 822,
        "Question": "If an automatic variable is created and then a function is called then ________________",
        "Options": [
            "a) The automatic variable created gets destroyed",
            "b) The automatic variable doesn’t get destroyed",
            "c) The automatic variable may or may not get destroyed",
            "d) The automatic variable can’t be used in this case",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 823,
        "Question": "Where are the automatic variables stored if another function is called in between the execution of the program?",
        "Options": [
            "a) Heap",
            "b) Queue",
            "c) Stack",
            "d) Temp variable",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 824,
        "Question": "The static variables of a function ________________",
        "Options": [
            "a) Are also automatic variables",
            "b) Are not automatic variables",
            "c) Are made automatic by default",
            "d) Can be made automatic explicitly",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 825,
        "Question": "All variables declared within a block ____________________",
        "Options": [
            "a) Are not always automatic",
            "b) Can be made non-automatic",
            "c) Are static by default",
            "d) Are automatic by default",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 826,
        "Question": "What values does uninitialized automatic variables contain?",
        "Options": [
            "a) Null value",
            "b) Void value",
            "c) Undefined/Garbage",
            "d) Zero value",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 827,
        "Question": "Constructor of automatic variables is called ____________________",
        "Options": [
            "a) When execution reaches the place of declaration of automatic variables",
            "b) When the program is compiled",
            "c) When the execution is just started",
            "d) Just before the execution of the program",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 828,
        "Question": "Does java contain auto or register keywords?",
        "Options": [
            "a) Yes, for declaring every type of variable",
            "b) Yes, only to declare cache registers",
            "c) No, because java doesn’t support automatic variables",
            "d) No, java supports local variable concept",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 829,
        "Question": "The automatic variables _________________________",
        "Options": [
            "a) Must be declared after its use",
            "b) Must be declared before using",
            "c) Must be declared, can be anytime",
            "d) Must not be initialized",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 830,
        "Question": "Which error is produced if the automatic variables are used without declaration?",
        "Options": [
            "a) Undefined symbol",
            "b) Memory error",
            "c) Type mismatch",
            "d) Statement missing",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 831,
        "Question": "In Perl, using which operator are the local variables created?",
        "Options": [
            "a) Dot",
            "b) Arrow",
            "c) Scope resolution",
            "d) my",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 832,
        "Question": "How are automatic variables different from the instance variables?",
        "Options": [
            "a) Automatic variables are initialized automatically but instances are not",
            "b) Automatic variables are given zero values initially and not instances",
            "c) Instance variables have to be initialized explicitly and automatic implicitly",
            "d) Instance variables are initialized implicitly while automatic are not",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 833,
        "Question": "What is extern variable?",
        "Options": [
            "a) Variables to be used that are declared in another object file",
            "b) Variables to be used that are declared in another source file",
            "c) Variables to be used that are declared in another executable file",
            "d) Variables to be used that are declared in another program",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 834,
        "Question": "Which among the following is a correct statement for variables?",
        "Options": [
            "a) Variable can be declared many times",
            "b) Variable can be declared only one time",
            "c) Variable declaration can’t be done more than ones",
            "d) Variable declaration is always done more than one time",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 835,
        "Question": "Which among the following is true for the variables?",
        "Options": [
            "a) Variable can be defined only once",
            "b) Variable can be defined any number of times",
            "c) Variable must be defined more than one time",
            "d) Variable can be defined in different files",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 836,
        "Question": "To use extern variable _____________________",
        "Options": [
            "a) The source file must not be included in the new file code",
            "b) The source file itself must be used for a new program",
            "c) The source file must be included in the new file",
            "d) The source file doesn’t matter for extern variables",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 837,
        "Question": "What does a header file contain for an extern variable?",
        "Options": [
            "a) Only declaration of variables",
            "b) Only definition of variables",
            "c) Both declaration and definition of variables",
            "d) Neither declaration nor definition",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 838,
        "Question": "Which condition is true if the extern variable is used in a file?",
        "Options": [
            "a) All the header files declare it",
            "b) Only few required files declare it",
            "c) All header files declared it if required",
            "d) Only one header file should declare it",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 839,
        "Question": "Whenever a function is declared in a program _____________________",
        "Options": [
            "a) extern can be used only in some special cases",
            "b) extern can’t be used",
            "c) function is extern by default",
            "d) it can’t be made extern",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 840,
        "Question": "Which of the following results in the allocation of memory for the extern variables?",
        "Options": [
            "a) Declaration",
            "b) Definition",
            "c) Including file",
            "d) Memory is not allocated for extern variables",
            ""
        ],
        "Answer": "Answerr: b"
    },
    {
        "id": 841,
        "Question": "Which is the correct syntax for extern variable declaration?",
        "Options": [
            "a) extern data_type variable_name;",
            "b) extern variable_name;",
            "c) data_type variable_name extern;",
            "d) extern (data_type)variable_name;",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 842,
        "Question": "Which is the correct syntax for extern function declaration?",
        "Options": [
            "a) extern function_name(argument_list);",
            "b) extern return_type function_name(argument_list);",
            "c) extern (return_type)function_name(argument_list);",
            "d) return_type extern function_name(argument_list);",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 843,
        "Question": "If the definition is given in the header file that we include then ________________",
        "Options": [
            "a) The program can run successfully",
            "b) Also the program should define the extern variable",
            "c) The extern variable must contain two definitions",
            "d) Extern variable can’t be used in the program",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 844,
        "Question": "If extern variable is initialized with the declaration then _______________________",
        "Options": [
            "a) Also the header file with definition is required",
            "b) The header file with definition must be included",
            "c) There is no need to include any other header file for definition",
            "d) The extern variable produces compile time error",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 845,
        "Question": "Why are functions extern by default?",
        "Options": [
            "a) Because functions are always private",
            "b) Because those are not visible throughout the program",
            "c) Because those can’t be accessed in all parts of the program",
            "d) Because those are visible throughout the program",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 846,
        "Question": "What are inbuilt classes?",
        "Options": [
            "a) The predefined classes in a language",
            "b) The classes that are defined by the user",
            "c) The classes which are meant to be modified by the user",
            "d) The classes which can’t be used by the user",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 847,
        "Question": "Inbuilt class __________________________",
        "Options": [
            "a) Must be included before use",
            "b) Are not necessary to be included for use",
            "c) Are used by the compiler only",
            "d) Can be modified by programmer always",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 848,
        "Question": "What doesn’t inbuilt classes contain?",
        "Options": [
            "a) Function prototype",
            "b) Function declaration",
            "c) Function definitions",
            "d) Objects",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 849,
        "Question": "Which among the following not an inbuilt class in C++?",
        "Options": [
            "a) System",
            "b) Color",
            "c) String",
            "d) Functions",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 850,
        "Question": "What is the InputStream class meant for?",
        "Options": [
            "a) To handle all input streams",
            "b) To handle all output streams",
            "c) To handle all input and output streams",
            "d) To handle only input from file",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 851,
        "Question": "Which statement is true for the Array class?",
        "Options": [
            "a) Arrays can have variable length",
            "b) The length array can be changed",
            "c) Each class has an associated Array class",
            "d) Arrays can contain different type of values",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 852,
        "Question": "What is the use of Math class?",
        "Options": [
            "a) To use the mathematical functions with strings",
            "b) To use the mathematical functions",
            "c) To suppress the use of mathematical functions",
            "d) To complex the calculations",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 853,
        "Question": "DataInputStream is derived from ______________________",
        "Options": [
            "a) StreamingInput",
            "b) StreamedInput",
            "c) StreameInput",
            "d) StreamInput",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 854,
        "Question": "Which attribute can be used to get the size of an array?",
        "Options": [
            "a) Size.Array",
            "b) Array.Size",
            "c) Array_name.length",
            "d) length.Array_name",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 855,
        "Question": "Number class can’t manipulate ____________________",
        "Options": [
            "a) Integer values",
            "b) Float values",
            "c) Byte values",
            "d) Character values",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 856,
        "Question": "Which function should be used to exit from the program that is provided by System class?",
        "Options": [
            "a) exit(int);",
            "b) gc();",
            "c) terminate();",
            "d) halt();",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 857,
        "Question": "Which class contain runFinalization() method?",
        "Options": [
            "a) Finalize",
            "b) System",
            "c) Final",
            "d) SystemFinal",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 858,
        "Question": "What does load(String)::= function do, in System class?",
        "Options": [
            "a) Loads dynamic library for a path name",
            "b) Loads all the dynamic libraries",
            "c) Loads all the Number in string format",
            "d) Loads the processor with calculations",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 859,
        "Question": "Which is not a System class variable?",
        "Options": [
            "a) err",
            "b) out",
            "c) in",
            "d) put",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 860,
        "Question": "Which package contains the utility classes?",
        "Options": [
            "a) java.lang",
            "b) java.utility",
            "c) java.util",
            "d) java.io",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 861,
        "Question": "What is the use of IO class?",
        "Options": [
            "a) To handle all the input operations",
            "b) To handle all the output operations",
            "c) To handle all the input and output operations",
            "d) To handle all the input and output to the standard input",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 862,
        "Question": "IO class provides input and output through ______________________",
        "Options": [
            "a) Data streams",
            "b) Serialization",
            "c) File system",
            "d) Data streams, serialization and file system",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 863,
        "Question": "Which among the following class contains the methods to access character based console device?",
        "Options": [
            "a) Console",
            "b) File",
            "c) Device",
            "d) Pipe",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 864,
        "Question": "File class is ____________________________",
        "Options": [
            "a) An abstract of file representation only",
            "b) An abstract of path names only",
            "c) An abstract which can be used to represent path names or file",
            "d) An abstract which can represent a file in any format",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 865,
        "Question": "What is a FileDescriptor?",
        "Options": [
            "a) A handle for machine specific structure of an open file",
            "b) A handle for program specific structure of an open file",
            "c) A handle for compiler specific structure of an open file",
            "d) A handle for representing device files structure",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 866,
        "Question": "FileInputStream _________________________",
        "Options": [
            "a) Gets the input stream from any device file",
            "b) Gets the input stream from any open socket",
            "c) Gets the input stream from any cache",
            "d) Gets the input stream from any open file only",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 867,
        "Question": "What does FilePermission class do?",
        "Options": [
            "a) This class is used to give permission rights to a file",
            "b) This class is used to restrict the use of permissions",
            "c) This class is used to represent device access permissions",
            "d) This class is used to represent file access permissions",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 868,
        "Question": "Which class among the following makes incorrect assumptions?",
        "Options": [
            "a) LineNumberInputStream",
            "b) LineNumberReader",
            "c) LineReader",
            "d) LineBuffer",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 869,
        "Question": "Reader class is _________________",
        "Options": [
            "a) Used to read from files",
            "b) Abstract class to read character streams",
            "c) Abstract class to input character streams",
            "d) Used to take input from standard input stream",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 870,
        "Question": "Which class can handle IO class interrupt?",
        "Options": [
            "a) ExceptionIO",
            "b) InteruptedIO",
            "c) InteruptedIOException",
            "d) IOInteruptException",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 871,
        "Question": "StringReader handles _____________________",
        "Options": [
            "a) Any character stream",
            "b) A character stream whose source is an array",
            "c) A character stream whose source is character array",
            "d) A character stream whose source is String only",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 872,
        "Question": "Which exception handler can be used when character encoding is not supported?",
        "Options": [
            "a) UnsupportedException",
            "b) UnsupportedEncodingException",
            "c) SupportException",
            "d) EncodingException",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 873,
        "Question": "RandomAccessFile can be used to _______________________",
        "Options": [
            "a) Read from a random access file",
            "b) Write to a random access file",
            "c) Read and write to a random access file",
            "d) Restricts read and write to a random access file",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 874,
        "Question": "Which among the following is a serialization descriptor for any class?",
        "Options": [
            "a) StreamClass",
            "b) ObjectStreamClass",
            "c) ObjectStream",
            "d) StreamObjectClass",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 875,
        "Question": "Which is a true statement for object of String class?",
        "Options": [
            "a) Object are immutable",
            "b) Object are mutable",
            "c) Object are created only once",
            "d) Object can’t be created",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 876,
        "Question": " How to declare an object of class String?",
        "Options": [
            "a) String object_Name = value;",
            "b) String object_name = new;",
            "c) String object_name= new value;",
            "d) String object_name= value new;",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 877,
        "Question": "What does function length do in String class?",
        "Options": [
            "a) Returns length of string including null character",
            "b) Returns length of string excluding null character",
            "c) Returns length of substring",
            "d) Returns size of string in bytes",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 878,
        "Question": "Which is the function to get the character present at a particular index in the string?",
        "Options": [
            "a) char charAt(index);",
            "b) char charIn(StringName);",
            "c) char charAt(StringName);",
            "d) char charIn(index);",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 879,
        "Question": "If only one parameter is passed to substring function then __________________",
        "Options": [
            "a) It returns the character at the specified position",
            "b) It returns the string of length 1 from the specified index",
            "c) It returns the string from specified index till the end",
            "d) It returns the string from starting of string till the specified index",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 880,
        "Question": "If two index are given as argument to substring function then ___________________",
        "Options": [
            "a) String of length equal to sum of two arguments is returned",
            "b) String starting from first index and of length equal to send argument",
            "c) String starting from first index and of length equal to sum of two arguments",
            "d) String starting from first index and ending at second index position",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 881,
        "Question": "String class have a concat() function that is used to _____________________",
        "Options": [
            "a) Replace old string by new string",
            "b) Add two strings",
            "c) Append one string at end of another string",
            "d) Remove a string from end of one string",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 882,
        "Question": "The function lastIndexOf() is used to ___________________",
        "Options": [
            "a) Get the index of last occurrence of specified character in argument",
            "b) Get the index of first occurrence of specified character in argument",
            "c) Get the index of last occurrence of first character in string",
            "d) Get the index of last occurrence of last character of string",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 883,
        "Question": "Function equals() is _______________ and equalIgnoreCase() is _________________",
        "Options": [
            "a) Case Insensitive, case insensitive",
            "b) Case sensitive, Case insensitive",
            "c) Case sensitive, case sensitive",
            "d) Case insensitive, case sensitive",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 884,
        "Question": "The compareTo() function is used to ________________",
        "Options": [
            "a) Compare strings value to string object",
            "b) Compare string value to string value",
            "c) Compare string object to another string object",
            "d) Compare string object to another string value",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 885,
        "Question": "String class provides function toUpper() to _____________________",
        "Options": [
            "a) Convert first character to uppercase",
            "b) Convert last character to uppercase",
            "c) Convert the whole string characters to uppercase",
            "d) Convert uppercase to lower and lower to uppercases",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 886,
        "Question": "String trim() function is used to _______________________",
        "Options": [
            "a) Remove all the white spaces from the string",
            "b) Remove white space from start of string",
            "c) Remove white space at end of string",
            "d) Remove white space from both the ends of string",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 887,
        "Question": "Function replace() accepts _____________ arguments.",
        "Options": [
            "a) 1",
            "b) 2",
            "c) 3",
            "d) 4",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 888,
        "Question": "If two arguments are passed to the indexOf() function then ___________________",
        "Options": [
            "a) Second argument indicates the occurrence number of specified character from starting",
            "b) Second argument indicates the occurrence number of specified character from end",
            "c) Second argument indicates the index of the character in first argument",
            "d) Second argument indicates the index of the character from the last of the string",
            ""
        ],
        "Answer": "Answer: a"
    }
]