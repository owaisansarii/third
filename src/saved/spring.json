[
    {
        "id": 1,
        "Question": "Beans can be created by which of the following properties?",
        "Options": [
            "a) Scope",
            "b) Property",
            "c) Class",
            "d) It’s own constructor",
            ""
        ],
        "Answer": " Answer: d"
    },
    {
        "id": 2,
        "Question": "Which attribute is used to specify class name of the bean?",
        "Options": [
            "a) name",
            "b) id",
            "c) class",
            "d) constructor-args",
            ""
        ],
        "Answer": " Answer: c"
    },
    {
        "id": 3,
        "Question": "Which of the following method can be used to used to instantiate a method?",
        "Options": [
            "a) static factory method",
            "b) default-init method",
            "c) destroy method",
            "d) lazy-init method",
            ""
        ],
        "Answer": " Answer: a"
    },
    {
        "id": 4,
        "Question": "Which attribute is used to specify static factory-method?",
        "Options": [
            "a) factory-method",
            "b) default-init method",
            "c) destroy method",
            "d) lazy-init method",
            ""
        ],
        "Answer": " Answer: a"
    },
    {
        "id": 5,
        "Question": "Purpose of Static Factory Method?",
        "Options": [
            "a) Static method to create an object",
            "b) Initialize bean",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": " Answer: a"
    },
    {
        "id": 6,
        "Question": "Exception thrown by factory method?",
        "Options": [
            "a) IllegalArgumentException",
            "b) IndexOutofBoundException",
            "c) ClassPathNotFoundException",
            "d) BeanCreationException",
            ""
        ],
        "Answer": " Answer: d"
    },
    {
        "id": 7,
        "Question": "Beans can be created by which of the following properties?",
        "Options": [
            "a) Static factory-method",
            "b) Instance Factory-Method",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": " Answer: a"
    },
    {
        "id": 8,
        "Question": "What will be the output:-",
        "Options": [
            "a) BeanCreationException",
            "b) IllegalArgumentException",
            "c) New Product will be created",
            "d) None of the mentioned",
            ""
        ],
        "Answer": " Answer: a"
    },
    {
        "id": 9,
        "Question": "Which Attribute is used to specify the bean declared?",
        "Options": [
            "a) factory-bean",
            "b) scope",
            "c) getBean",
            "d) declareBean",
            ""
        ],
        "Answer": " Answer: a"
    },
    {
        "id": 10,
        "Question": "Declaring Beans using:-",
        "Options": [
            "a) Static field",
            "b) Object Properties",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 11,
        "Question": "Ways to declare bean from a static field?",
        "Options": [
            "a) FieldRetrievingFactoryBean",
            "b) util:contant",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 12,
        "Question": "Which tag is also allowed by static field?",
        "Options": [
            "a) util:constant",
            "b) list",
            "c) set",
            "d) constructor-args",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 13,
        "Question": "Declaring bean form object properties can be done using:-",
        "Options": [
            "a) PropertyPathFactoryBean",
            "b) util:constant",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 14,
        "Question": "PropertyPathFactoryBean declares a bean from an:-",
        "Options": [
            "a) Object Property",
            "b) Property Path",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 15,
        "Question": "Alternate way of PropertyPathFactoryBean to declare a bean.",
        "Options": [
            "a) util:property-path tag",
            "b) util:constant tag",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 16,
        "Question": "The Spring Expression Language can be accessed by:-",
        "Options": [
            "a) XML configuration",
            "b) Annotations",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 17,
        "Question": "A bean can be requested by:-",
        "Options": [
            "a) getBean method",
            "b) reference from another bean using autowiring, property etc",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 18,
        "Question": "Which attribute is used to set the scope of the bean?",
        "Options": [
            "a) setScope",
            "b) scope",
            "c) getScope",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 19,
        "Question": "Which one is the default scope of the beans?",
        "Options": [
            "a) Prototype",
            "b) Session",
            "c) Request",
            "d) Singleton",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 20,
        "Question": "Which scope creates a new bean instance each time when requested?",
        "Options": [
            "a) Singleton",
            "b) Prototype",
            "c) Session",
            "d) Request",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 21,
        "Question": "Which of the following are considered valid beans?",
        "Options": [
            "a) Singleton",
            "b) Prototype",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 22,
        "Question": "Which interface is used to perform initialization of beans?",
        "Options": [
            "a) InitializingBean",
            "b) Disposablebean",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 23,
        "Question": "Which interface is used to perform destruction of beans?",
        "Options": [
            "a) InitializingBean",
            "b) Disposablebean",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 24,
        "Question": "Alternate way of initialization method is:-",
        "Options": [
            "a) init-method attribute",
            "b) afterPropertiesSet",
            "c) destroy-method attribute",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 25,
        "Question": "Alternate way of destruction method is:-",
        "Options": [
            "a) init-method attribute",
            "b) afterPropertiesSet",
            "c) destroy-method attribute",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 26,
        "Question": "Which annotation is used as a substitute of initialization method?",
        "Options": [
            "a) @PostConstruct",
            "b) @PreDestroy",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 27,
        "Question": "14.Which annotation is used as a substitute of destroy method?",
        "Options": [
            "a) @PostConstruct",
            "b) @PreDestroy",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 28,
        "Question": "Which configuration can be used for Dependency Injection?",
        "Options": [
            "a) XML Configuration",
            "b) Annotation Configuration",
            "c) Java Based Configuration",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 29,
        "Question": "Method used to process bean before initialization callback",
        "Options": [
            "a) scope",
            "b) postProcessAfterInitialization()",
            "c) postProcessBeforeInitialization()",
            "d) it’s own constructor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 30,
        "Question": "Method used to process bean after initialization callback",
        "Options": [
            "a) scope",
            "b) getBean",
            "c) postProcessAfterInitialization()",
            "d) it’s own constructor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 31,
        "Question": "Which method is used to gracefully shutdown all the bean processes after closing the spring container?",
        "Options": [
            "a) shutdownHook",
            "b) destroy method",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 32,
        "Question": "Which method is used to register BeanPostProcessor?",
        "Options": [
            "a) addBeanPostProcessors",
            "b) registerBeanPostProcessors",
            "c) addBeanProcessors",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 33,
        "Question": "Which Interface for bean Post Processor is used to distinguish between checked beans",
        "Options": [
            "a) StorageConfig",
            "b) Marker",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 34,
        "Question": "Which method of bean post processors is used to check path existence",
        "Options": [
            "a) getPath",
            "b) setPath",
            "c) value",
            "d) auto-wiring",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 35,
        "Question": "PathCheckingBeanPostProcessor will not work properly in case of:-",
        "Options": [
            "a) XML Configuration",
            "b) Java based Configuration",
            "c) JSR Annotation",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 36,
        "Question": "Which bean factory post processor externalizes part of the bean configurations into a properties file",
        "Options": [
            "a) PropertyPlaceholderConfigurer",
            "b) PropertyPlaceholderRegister",
            "c) PropertyGetPath",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 37,
        "Question": "Which interface defines methods for resolving text messages",
        "Options": [
            "a) MessageSource",
            "b) ApplicationListener",
            "c) ApplicationContextListener",
            "d) TextEvent",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 38,
        "Question": "Which interface is used to listen to certain events",
        "Options": [
            "a) ApplicationListener",
            "b) ContextListener",
            "c) EventListener",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 39,
        "Question": "Which method is used to publish your own custom event",
        "Options": [
            "a) contextPublish",
            "b) publishEvent",
            "c) applicationEventPublish",
            "d) addEvent",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 40,
        "Question": "Which of the following is a well known recognized event",
        "Options": [
            "a) ContextCloasedEvemt",
            "b) ContextRefreshedEvent",
            "c) RequestHandledEvent",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 41,
        "Question": "Which event is provoked when web request comes into action",
        "Options": [
            "a) ContextClosedEvent",
            "b) ContextStoppedEvent",
            "c) SessionEvent",
            "d) RequestHandledEvent",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 42,
        "Question": "Which of the following is used to convert property values to text Values?",
        "Options": [
            "a) property Editor",
            "b) property setter",
            "c) property getter",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 43,
        "Question": "Which property editor is used to specify a URL String for a property of the URL type?",
        "Options": [
            "a) java.net.*",
            "b) java.io.*",
            "c) java.net.URL",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 44,
        "Question": "Which interface is used to create your own property editors?",
        "Options": [
            "a) CustomEditorConfigurer",
            "b) RegisterCustomEditor",
            "c) PropertyEditorConfigurer",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 45,
        "Question": "Which of the following property editors are registered by Spring?",
        "Options": [
            "a) CustomNumberEditor",
            "b) FileEditor",
            "c) CustomDateEditor",
            "d) CustomNetEditor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 46,
        "Question": "What are the ways to create custom Property Editors?",
        "Options": [
            "a) implement PropertyEditor interface",
            "b) extend PropertyEditorSupport Class",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 47,
        "Question": "Method which converts property into a string value",
        "Options": [
            "a) getAsText",
            "b) setAsText",
            "c) regText",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 48,
        "Question": "Method that converts string into a property value",
        "Options": [
            "a) getAsText",
            "b) setAsText",
            "c) regText",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 49,
        "Question": "The property value is retrieved by:-",
        "Options": [
            "a) getValue method",
            "b) setValue method",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 50,
        "Question": "Which package is used for periodic work",
        "Options": [
            "a) java.lang.Thread",
            "b) java.util.TimerTask",
            "c) java.util.Timer",
            "d) java.util.concurrent",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 51,
        "Question": "Which subinterface provides functionality for managing Threads and their events",
        "Options": [
            "a) ExecutorService",
            "b) ThreadService",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 52,
        "Question": "Method provided by ExectuorService which returns a Future < T >",
        "Options": [
            "a) submit",
            "b) publish",
            "c) addService",
            "d) registerService",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 53,
        "Question": "Which method provided by ExecutorService is used to check whether job is finished or cancelled",
        "Options": [
            "a) Future.isDone()",
            "b) Future.isCancelled()",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 54,
        "Question": "Which of the following class’s instance is used by TimerTaskExecutor for managing jobs",
        "Options": [
            "a) java.util.Timer",
            "b) java.util.Date",
            "c) java.util.HashMap",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 55,
        "Question": "Which tag informs the spring container about the use of AspectJ annotation?",
        "Options": [
            "a) aop:aspectj-autowire",
            "b) aop:aspectj-name",
            "c) aop:aspectj-autoproxy",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 56,
        "Question": "Which of the following is advice supported by Aspect Annotation?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterReturning",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 57,
        "Question": "Which advice is executed once a joint point finishes?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterReturning",
            "d) @AfterThrowing",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 58,
        "Question": "Which advice is executed only when joint point returns or throws an exception?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterReturning",
            "d) @AfterThrowing",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 59,
        "Question": "Which advice combines all advices into one?",
        "Options": [
            "a) @Before",
            "b) @After",
            "c) @AfterThrowing",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 60,
        "Question": "Which interface is implemented to specify precedence of aspects?",
        "Options": [
            "a) Ordered",
            "b) ApplicationAspect",
            "c) AspectPointcut",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 61,
        "Question": "Alternative annotative way to specify precedence of aspects?",
        "Options": [
            "a) @Order",
            "b) @Aspect",
            "c) @PointCut",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 62,
        "Question": "Method which returns the highest priority of aspect’s join point?",
        "Options": [
            "a) getHighestPriority",
            "b) getOrder",
            "c) getHighOrder",
            "d) getPriority",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 63,
        "Question": "Which instantiation model is supported by AspectJ?",
        "Options": [
            "a) perthis",
            "b) pertarget",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 64,
        "Question": "Which instantiation model is supported by AspectJ?",
        "Options": [
            "a) perthis",
            "b) pertarget",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 65,
        "Question": "Which tag in XML is used to declare @Before advice’s method?",
        "Options": [
            "a) aop:before",
            "b) aop:after",
            "c) aop:afterthrow",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 66,
        "Question": "Which tag in XML is used to declare @Before advice’s method?",
        "Options": [
            "a) aop:before",
            "b) aop:after-returning",
            "c) aop:afterthrow",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 67,
        "Question": "Annotation used to refer poincuts?",
        "Options": [
            "a) @Pointcut",
            "b) @PointcutExecution",
            "c) @PointcutBefore",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 68,
        "Question": "Language used to set various kinds of join points",
        "Options": [
            "a) AspectJ pointcut language",
            "b) Java pointcut language",
            "c) XML pointcut language",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 69,
        "Question": "Which of the following pattern is used to match bean name?",
        "Options": [
            "a) bean(*Calculator)",
            "b) bean(Calculator)",
            "c) bean(com.appress.spring.Calculator)",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 70,
        "Question": "Expressions which returns Parameters of pointcuts?",
        "Options": [
            "a) target",
            "b) args",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 71,
        "Question": "Method which checks if all target classes are matched",
        "Options": [
            "a) matches()",
            "b) pair()",
            "c) matchTargetClass()",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 72,
        "Question": "Spring supports operations on pointcuts:-",
        "Options": [
            "a) notably",
            "b) union",
            "c) intersection",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 73,
        "Question": "Pointcuts can be composed using:-",
        "Options": [
            "a) org.springframework.aop.support.Pointcuts class",
            "b) composablePointcut class",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 74,
        "Question": "Pointcut used to parse an AspectJ pointcut expression string",
        "Options": [
            "a) org.springframework.aop.aspectj.AspectJExpressionPointcut",
            "b) org.springframework.aop.aspectj.AspectJExpressionPointcutString",
            "c) org.springframework.aop.aspectj.AspectJExpressionString",
            "d) org.springframework.aop.aspectj.AspectJPointcuttoString",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 75,
        "Question": "Which special type of advice is used to implement an interface?",
        "Options": [
            "a) Introduction",
            "b) Before",
            "c) After",
            "d) AfterSpecial",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 76,
        "Question": "How does an Introduction advice do this in Spring?",
        "Options": [
            "a) dynamic proxy",
            "b) web proxy",
            "c) implements org.springframework.net.bundle interface",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 77,
        "Question": "Annotation used to declare an introduction",
        "Options": [
            "a) Before",
            "b) After",
            "c) @DeclareParents",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 78,
        "Question": "Attribute used to specify implementation class",
        "Options": [
            "a) no such attribute",
            "b) defaultImpl",
            "c) defaultInterface",
            "d) defaultImplement",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 79,
        "Question": "How to keep track of the usage of your beans",
        "Options": [
            "a) Calling Count",
            "b) Last modified date",
            "c) New Interface to your object",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 80,
        "Question": "How to introduce counter field to original bean class?",
        "Options": [
            "a) Using Spring AOP",
            "b) Implementing interface",
            "c) AspectJ Pointcut",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 81,
        "Question": "Tag used to declare aspects",
        "Options": [
            "a) aop:config",
            "b) aop:auto-proxy",
            "c) aop:autowire",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 82,
        "Question": "Tag which defined Spring AOP configurations",
        "Options": [
            "a) aop:config",
            "b) aop:configregister",
            "c) aop:configbeans",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 83,
        "Question": "What are the ways to declare an advice?",
        "Options": [
            "a) pointcut-ref attribute",
            "b) pointcut attribute",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 84,
        "Question": "Applying aspects to your target objects",
        "Options": [
            "a) AspectJ Annotation",
            "b) Weaving",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 85,
        "Question": "Special compiler used during weaving",
        "Options": [
            "a) jvm",
            "b) gcc",
            "c) ajc",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 86,
        "Question": "Name of the process when targe classes are loaded into JVM",
        "Options": [
            "a) load-time weaving",
            "b) process-time weaving",
            "c) load-process weaving",
            "d) process-delivery weaving",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 87,
        "Question": "How to weave your classes using argument while compiling?",
        "Options": [
            "a) -javaagent:CLASSPATH",
            "b) -javaagent:PackgePath",
            "c) -javaweave:CLASSPATH",
            "d) -javaweave:PackagePath",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 88,
        "Question": "XML Element to include load-time weaver",
        "Options": [
            "a) aop:config",
            "b) aop:auto-wire",
            "c) context:load-time-weaver",
            "d) aop:load-time-weaver",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 89,
        "Question": "Library to use AspectJ weaver",
        "Options": [
            "a) spring-instrument.jar",
            "b) spring-introduction.jar",
            "c) spring-aop.jar",
            "d) spring-weave.jar",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 90,
        "Question": "Objects created outside the container:-",
        "Options": [
            "a) Domain Objects",
            "b) User Objects",
            "c) SpringVisitor Objects",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 91,
        "Question": "How to inject Spring bean into domain objects",
        "Options": [
            "a) AOP",
            "b) XML",
            "c) AspectJ",
            "d) Java Based",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 92,
        "Question": "Which scope does @Configurable instantiated class looks for?",
        "Options": [
            "a) Singleton",
            "b) Prototype",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 93,
        "Question": "Scripting languages supported by Spring?",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 94,
        "Question": "Scripting language based on Ruby",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 95,
        "Question": "Dynamic Language for java platform to cope up with other languages",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 96,
        "Question": "Lightweight java scripting language executing java fragments",
        "Options": [
            "a) JRuby",
            "b) Groovy",
            "c) BeanShell",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 97,
        "Question": "In Ruby instance variable begins with",
        "Options": [
            "a) #",
            "b) *",
            "c) @",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 98,
        "Question": "XML Element to declare a bean implemented by JRuby",
        "Options": [
            "a) lang:jruby",
            "b) aop:jruby",
            "c) beanscript:jruby",
            "d) script:jruby",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 99,
        "Question": "XML element to specify the property values for scripting bean",
        "Options": [
            "a) lang:property",
            "b) bean:property",
            "c) script:property",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 100,
        "Question": "XML Element to declare a bean implemented by Groovy",
        "Options": [
            "a) lang:groovy",
            "b) lang:jruby",
            "c) beanscript:jruby",
            "d) script:jruby",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 101,
        "Question": "Script’s location is specified by attribute",
        "Options": [
            "a) script-source",
            "b) xml-source",
            "c) script-annotation",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 102,
        "Question": "XML Element to declare a bean implemented by JRuby",
        "Options": [
            "a) lang:bash",
            "b) aop:bash",
            "c) lang:bsh",
            "d) script:bash",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 103,
        "Question": "Interface used to create additional features in groovy based beans",
        "Options": [
            "a) GroovyObjectCustomizer",
            "b) GroovyBeanCustomizer",
            "c) GroovyCustomizer",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 104,
        "Question": "Attribute which specifies all the interfaces",
        "Options": [
            "a) script-interfaces",
            "b) lang:bsh",
            "c) lang:script",
            "d) script:bsh",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 105,
        "Question": "Element which allows you to control the scope",
        "Options": [
            "a) lang:jruby",
            "b) lang:language",
            "c) lang: bsh",
            "d) lang:groovy",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 106,
        "Question": "BeanShell Library dependencies",
        "Options": [
            "a) bsh-2.0b4.jar",
            "b) cglib-nodep-2.1_3.jar",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 107,
        "Question": "Attribute used by Spring to refresh beans",
        "Options": [
            "a) refresh-check-interval",
            "b) refresh-check-delay",
            "c) refresh-delay",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 108,
        "Question": "Default value of refresh-check-delay attribute",
        "Options": [
            "a) Zero",
            "b) Negative",
            "c) Positive",
            "d) None of the mentioned above",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 109,
        "Question": "XML Element to define an inline script",
        "Options": [
            "a) lang:inlinescript",
            "b) lang:inline_script",
            "c) lang:[email protected]",
            "d) lang:inline-script",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 110,
        "Question": "To prevent the characters in your script from conflicting with the reserved XML characters",
        "Options": [
            "a) Use ![CDATA[…]] tag",
            "b) Use ![DATA[…]] tag",
            "c) Use ![CDATA(…)] tag",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 111,
        "Question": "Dynamic-language-backed bean with some configurations",
        "Options": [
            "a) Refreshable bean",
            "b) Beanshell",
            "c) Scripting Beans",
            "d) Inline Script",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 112,
        "Question": "To quickly add a Spring Validator implementation to a Spring MVC Controller",
        "Options": [
            "a) Use inline-script",
            "b) lang:inline-script",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 113,
        "Question": "Script’s location is specified by attribute",
        "Options": [
            "a) script-source",
            "b) xml-source",
            "c) script-annotation",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 114,
        "Question": "Way to secure web app’s URL.",
        "Options": [
            "a) servlet filters",
            "b) refresh-check-delay",
            "c) http servlet filters",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 115,
        "Question": "Servlet filter registered in web deployment descriptor, which filters request in spring application context.",
        "Options": [
            "a) DelegatingFilter",
            "b) DelegatingFilterProxy",
            "c) DelegatingProxy",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 116,
        "Question": "Servlet APIs to access security information of web application.",
        "Options": [
            "a) HttpServletRequest.isUserInRole()",
            "b) HttpServletRequest.getUserPrincipal()",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 117,
        "Question": "To load root application context at the start up.",
        "Options": [
            "a) ContextListener",
            "b) ContextLoader",
            "c) ContextLoaderListener",
            "d) ContextEventListener",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 118,
        "Question": "To dispatch requests for web application.",
        "Options": [
            "a) DispatcherServlet",
            "b) ViewHandler",
            "c) ViewResolver",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 119,
        "Question": "The responsibility of DelegatingFilterProxy is simply to delegate HTTP request filtering to a Spring bean that implements the interface:-",
        "Options": [
            "a) java.util.logging.Filter",
            "b) java.util.logging.net",
            "c) java.util.logging.FilterHttp",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 120,
        "Question": "Filter chain configured by Spring security, when web app security enabled.",
        "Options": [
            "a) springSecurityFilterChain",
            "b) delegatingFilterProxy",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 121,
        "Question": "Element used to restrict access to a particular URL.",
        "Options": [
            "a) restrict-url",
            "b) intercept-url",
            "c) intercept-restrict",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 122,
        "Question": "Element which configures authentication services.",
        "Options": [
            "a) authentication-provider",
            "b) authentication-manager",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 123,
        "Question": "Element which defines user details.",
        "Options": [
            "a) user-service",
            "b) user-details",
            "c) user-requirements",
            "d) user-servicerequirements",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 124,
        "Question": "Which of the following way to provide authenticity of users is/are supported by Spring Security?",
        "Options": [
            "a) Authenticating against a database",
            "b) LDAP repository",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 125,
        "Question": "The basic security services registered and configured by Spring Security.",
        "Options": [
            "a) Form-based login service",
            "b) Logout Service",
            "c) HTTP Basic authentication.",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 126,
        "Question": "HTTP Basic authentication support is configured by:-",
        "Options": [
            "a) logout",
            "b) http-basic",
            "c) http-basicauth",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 127,
        "Question": "Form-based login is configured by:-",
        "Options": [
            "a) servlet filters",
            "b) refresh-check-delay",
            "c) form-login",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 128,
        "Question": "Attribute used to display custom login page.",
        "Options": [
            "a) login-url",
            "b) custom-login",
            "c) login-custom",
            "d) custom-login",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 129,
        "Question": "Attribute which specifies redirection URL on login error.",
        "Options": [
            "a) authentication-failure-url",
            "b) authentication-failure_login-url",
            "c) authentication-login-url",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 130,
        "Question": "Session scope attribute to display error message.",
        "Options": [
            "a) SPRING_SECURITY_FIRST_EXCEPTION",
            "b) SPRING_SECURITY_LAST_EXCEPTION",
            "c) SPRING_SECURITY_EXCEPTION",
            "d) SPRING_SECURITY_LAST_ERROR",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 131,
        "Question": "Logout service is configured by:-",
        "Options": [
            "a) logout",
            "b) login",
            "c) logout-basic",
            "d) logout_basic",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 132,
        "Question": "Element which redirects to a specific URL on logout.",
        "Options": [
            "a) logout-success",
            "b) logout-success_url",
            "c) logout-url",
            "d) logout-success-url",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 133,
        "Question": "Anonymous login services can be configured by:-",
        "Options": [
            "a) anonymous-basic",
            "b) anonymous",
            "c) anonymous-target",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 134,
        "Question": "Remember-me support can be configured by:-",
        "Options": [
            "a) remember-me",
            "b) remember-me-basic",
            "c) remember-basic",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 135,
        "Question": "Spring Security algorithms to secure password.",
        "Options": [
            "a) MD5",
            "b) SHA",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 136,
        "Question": "Connection of database with Apache derby server requires.",
        "Options": [
            "a) Derby client.jar",
            "b) Spring JDBC support",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 137,
        "Question": "Utility to calculate MD5 digests for your password.",
        "Options": [
            "a) CheckSum",
            "b) BeanShell",
            "c) Jacksum",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 138,
        "Question": "Element used to secure methods.",
        "Options": [
            "a) security:intercept-methods",
            "b) global-method-security",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 139,
        "Question": "Element used to specify access attributes for bean’s methods.",
        "Options": [
            "a) security:protect",
            "b) security:intercept",
            "c) security:intercept-security",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 140,
        "Question": "Attribute used to specify custom access decision manager.",
        "Options": [
            "a) access-decision-manager-ref",
            "b) access-decision-ref",
            "c) access-decision",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 141,
        "Question": "Tag which displays user’s Authentication object.",
        "Options": [
            "a) security:tag",
            "b) security_Tag",
            "c) security:authentication",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 142,
        "Question": "Tag which renders the granted authorities one by one.",
        "Options": [
            "a) c:for",
            "b) c:forEach",
            "c) c:doWhile",
            "d) c:while",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 143,
        "Question": "Tag used to render view contents conditionally.",
        "Options": [
            "a) security:authorize",
            "b) security:authority",
            "c) security:authenticate",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 144,
        "Question": "Attribute used to render enclosed content.",
        "Options": [
            "a) ifGranted",
            "b) if_Granted",
            "c) ifAllGranted",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 145,
        "Question": "Module that allows each domain to have it’s own access.",
        "Options": [
            "a) access share list",
            "b) access common list",
            "c) access control list",
            "d) access list",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 146,
        "Question": "ACL(Access control list) consists of:-",
        "Options": [
            "a) object identity",
            "b) access control entities",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 147,
        "Question": "ACEs(Access control entries) core consists of:-",
        "Options": [
            "a) Permissions",
            "b) Security Identity",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 148,
        "Question": "Which of the following is/are part of BasePermission class:-",
        "Options": [
            "a) CREATE",
            "b) READ/WRITE",
            "c) DELETE",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 149,
        "Question": "SID(Security Identity) associates with permission using.",
        "Options": [
            "a) principal(PrincipalSid)",
            "b) authority (GrantedAuthoritySid)",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 150,
        "Question": "Interfaces that defines operation of an ACL service.",
        "Options": [
            "a) AclService",
            "b) MutableAclService",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 151,
        "Question": "Servlet listener which loads application context.",
        "Options": [
            "a) Security:intercept-methods",
            "b) global-method-security",
            "c) ContextLoaderListener",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 152,
        "Question": "Method to retrieve Spring Applicationcontext.",
        "Options": [
            "a) WebApplicationContextUtils.getRequiredWebApplicationContext()",
            "b) WebApplicationContextUtils.getRequiredWeb()",
            "c) WebApplicationUtils.getRequiredWebApplicationContext()",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 153,
        "Question": "Class used to have full access to the Spring context’s life cycle machinery and dependency injection.",
        "Options": [
            "a) DelegatingFilterProxy",
            "b) WebApplicationContextUtils.getRequiredWeb()",
            "c) WebApplicationUtils.getRequiredWebApplicationContext()",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 154,
        "Question": "In order to leverage Spring application context machinery and configuration.",
        "Options": [
            "a) HttpRequestHandlerJNDI",
            "b) HttpRequestHandlerServlet",
            "c) HttpRequestHandler",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 155,
        "Question": "Interface implemented by object instantiated by HttpRequestHandlerServlet.",
        "Options": [
            "a) HttpRequestHandlerJNDI",
            "b) HttpRequestHandlerServlet",
            "c) HttpRequestHandler",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 156,
        "Question": "Attribute used to look up and delegate a particular root bean.",
        "Options": [
            "a) filter",
            "b) filter-name",
            "c) filtername",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 157,
        "Question": "ActionSupport class provides a method to access spring application context.",
        "Options": [
            "a) getWebApplicationContext()",
            "b) getWebApplication()",
            "c) getApplicationContext()",
            "d) contextEventListener()",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 158,
        "Question": "Struts servlet used to handle web requests.",
        "Options": [
            "a) ActionServlet",
            "b) Action",
            "c) ActionSupport",
            "d) ActionStruts",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 159,
        "Question": "Struts plugin used to integrate with spring.",
        "Options": [
            "a) ContextLoaderListener",
            "b) ContextLoaderPlugin",
            "c) ContextLoaderListenerPlugin",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 160,
        "Question": "Integration of JSF with Spring Application Context.",
        "Options": [
            "a) ContextLoaderListener",
            "b) DelegatingVariableResolver",
            "c) SpringBeanFacesELResolver",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 161,
        "Question": "To handle web requests in JSF.",
        "Options": [
            "a) FacesServlet",
            "b) JavaFacesServlet",
            "c) Faces-Servlet",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 162,
        "Question": "Component of JSF, for user’s input in a form.",
        "Options": [
            "a) h:form",
            "b) h:commandButton",
            "c) h:outputText",
            "d) h:inputText",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 163,
        "Question": "Tag used to provide result of web requests and is read only.",
        "Options": [
            "a) h:form",
            "b) h:commandButton",
            "c) h:outputText",
            "d) h:inputText",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 164,
        "Question": "Tag which triggers server side requests.",
        "Options": [
            "a) h:form",
            "b) h:commandButton",
            "c) h:outputText",
            "d) h:inputText",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 165,
        "Question": "Tag used to integrate Spring with DWR.",
        "Options": [
            "a) dwr:integrate",
            "b) dwr:remote",
            "c) dwr:action",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 166,
        "Question": "Spring supports web flows by:-",
        "Options": [
            "a) Java",
            "b) XML",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 167,
        "Question": "Stated related to Spring Web flows.",
        "Options": [
            "a) view",
            "b) action",
            "c) decision",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 168,
        "Question": "Required dependencies to manage web UI flows.",
        "Options": [
            "a) spring web flow distribution.",
            "b) org.springframework.webflow",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 169,
        "Question": "Spring Web flow supports.",
        "Options": [
            "a) Unified EL",
            "b) Object-Graph Navigation Language (OGNL)",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 170,
        "Question": "To create URL path mappings from the ids of registered flow definitions.",
        "Options": [
            "a) FlowHandlerMapping",
            "b) FlowHandler",
            "c) FlowHandlerMappingRequest",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 171,
        "Question": "XML Based flow definitions can be validated by:-",
        "Options": [
            "a) Spring Web Flow XSD",
            "b) Spring IDE",
            "c) SpringSource Tool Suite",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 172,
        "Question": "Element to trigger an action for view module.",
        "Options": [
            "a) on-render",
            "b) on-action",
            "c) on-trigger",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 173,
        "Question": "Variable to trigger the flow execution.",
        "Options": [
            "a) ${flowExecutionUrl}",
            "b) ${exec.flow}",
            "c) ${flowExecutionUrl.match}",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 174,
        "Question": "12.Servers which listen on port 8080.",
        "Options": [
            "a) Apache Tomcat 6.0",
            "b) Jetty",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 175,
        "Question": "Interface which is used to persist instances sessions.",
        "Options": [
            "a) serializable",
            "b) file.io",
            "c) io.file.*",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 176,
        "Question": "Class which assist Spring Web flow in handling form.",
        "Options": [
            "a) Form",
            "b) FormAction",
            "c) FormHandler",
            "d) Form-Handler",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 177,
        "Question": "Property for action to instantiate form objects.",
        "Options": [
            "a) formObjectClass",
            "b) formClass",
            "c) objectClass",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 178,
        "Question": "Element which secures web flows.",
        "Options": [
            "a) secured",
            "b) security",
            "c) sec",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 179,
        "Question": "To secure web flows with Spring Security.",
        "Options": [
            "a) DelegatingFilter",
            "b) DelegatingFilterProxy",
            "c) DelegatingProxy",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 180,
        "Question": "To enable Spring security for web flows.",
        "Options": [
            "a) SecurityFlowExecutionListener",
            "b) SecurityFlowExecution",
            "c) FlowSecurity",
            "d) SecurityFlowListener",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 181,
        "Question": "Which attribute is used to access security element of web flow.",
        "Options": [
            "a) attribute",
            "b) attributes-security",
            "c) attributes",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 182,
        "Question": "Spring web flow supports integration with.",
        "Options": [
            "a) JSF",
            "b) Hibernate",
            "c) JPA",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 183,
        "Question": "To integrate JPA with Spring Web flows.",
        "Options": [
            "a) JpaFlowExecutionListener",
            "b) HibernateFlowExecutionListener",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 184,
        "Question": "To integrate Hibernate with Spring Web flows.",
        "Options": [
            "a) JpaFlowExecutionListener",
            "b) HibernateFlowExecutionListener",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 185,
        "Question": "HibernateFlowExecutionListener and JpaFlowExecutionListener both belongs to which of the package.",
        "Options": [
            "a) org.springframework.web.persistence package",
            "b) org.springframework.persistence package",
            "c) org.springframework.webflow package package",
            "d) org.springframework.webflow.persistence package",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 186,
        "Question": "Libraries used to integrate Hibernate with JPA.",
        "Options": [
            "a) Hibernate 3",
            "b) Hibernate 3 Entity Manager",
            "c) JPA API",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 187,
        "Question": "To configure JPA vendor-specific information.",
        "Options": [
            "a) JPA vendor adaptor",
            "b) Data source",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 188,
        "Question": "View Technologies to render Spring Web MVC view.",
        "Options": [
            "a) JSP",
            "b) Tiles",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 189,
        "Question": "Submodules of Spring\tWeb Flow to simplify use of JSF and javascript in Spring.",
        "Options": [
            "a) Spring Faces",
            "b) Spring Javascript",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 190,
        "Question": "To use JSF Validation components provided by spring faces.",
        "Options": [
            "a) Faces",
            "b) Spring Javascript",
            "c) Facelets",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 191,
        "Question": "Attribute used to handle web flow requests.",
        "Options": [
            "a) servlet-mapping",
            "b) servlet-attr",
            "c) servlet-flow",
            "d) servlet-requests",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 192,
        "Question": "JSF view handler to enable Facelets and a SpringBeanFacesELResolver to access Spring beans.",
        "Options": [
            "a) FaceletViewHandler",
            "b) FaceletView",
            "c) FaceletHandler",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 193,
        "Question": "To resolve Facelets views we configure:-",
        "Options": [
            "a) ViewFacelets",
            "b) ViewResolver",
            "c) View-resolver",
            "d) View_Resolver",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 194,
        "Question": "File extension of a view state’s name which is by default loaded by facelet page.",
        "Options": [
            "a) .xml",
            "b) .hbm.xml",
            "c) .xhtml",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 195,
        "Question": "Navigation in traditional JSF applications is handled by:-",
        "Options": [
            "a) linking directly linking to a resource",
            "b) commandLink",
            "c) invoking an action",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 196,
        "Question": "For cross field validation or some sort of barrier to ensure state before you start a flow, we use.",
        "Options": [
            "a) FacesContext",
            "b) FaceletContext",
            "c) FacesResolver",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 197,
        "Question": "To use Spring Faces Components, we register which of the following?",
        "Options": [
            "a) Servlet API",
            "b) ResourceServlet",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 198,
        "Question": "Resources retrieved by Spring Faces Component.",
        "Options": [
            "a) JavaScript",
            "b) CSS",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 199,
        "Question": "Component which additionally provides a pop-up date picker control for its enclosed input field.",
        "Options": [
            "a) clientDateValidator",
            "b) clientValidator",
            "c) dateValidator",
            "d) validator",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 200,
        "Question": "Component which encloses command button.",
        "Options": [
            "a) validateAll",
            "b) validateAllClick",
            "c) validateAllInClick",
            "d) validateAllOnClick",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 201,
        "Question": "Libraries provided by RichFaces an integration support for Spring web flow.",
        "Options": [
            "a) RichFaces",
            "b) Slf-4j",
            "c) Log-4j",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 202,
        "Question": "Design pattern implemented by Dispatcher Servlet.",
        "Options": [
            "a) jsp",
            "b) tiles",
            "c) front controller",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 203,
        "Question": "Class used to give a class behavior of a Dispatcher Servlet.",
        "Options": [
            "a) AbstractController",
            "b) Controller",
            "c) Abstract Class",
            "d) AbstractAction",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 204,
        "Question": "Annotation for Controller Class.",
        "Options": [
            "a) @Before",
            "b) @Controller",
            "c) @After",
            "d) @Exception",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 205,
        "Question": "Handler method annotation.",
        "Options": [
            "a) @Before",
            "b) @Controller",
            "c) @After",
            "d) @RequestMapping",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 206,
        "Question": "Method arguments that can be used in handler methods using the @RequestMapping annotation.",
        "Options": [
            "a) HttpServletRequest or HttpServleResponse",
            "b) @RequestParam",
            "c) @ModelAttribute",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 207,
        "Question": "Annotation which represents cookie values of requests.",
        "Options": [
            "a) HttpServletRequest or HttpServleResponse",
            "b) @RequestParam",
            "c) @Cookie",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 208,
        "Question": "To add attributes to the model.",
        "Options": [
            "a) Map",
            "b) ModelMap",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 209,
        "Question": "To access the binding and validation result for the command object.",
        "Options": [
            "a) Errors",
            "b) BindingResult",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 210,
        "Question": "To notify its completion of session processing.",
        "Options": [
            "a) Errors",
            "b) BindingResult",
            "c) SessionStatus",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 211,
        "Question": "Parameter used to specify a configuration file.",
        "Options": [
            "a) contextConfigLocation",
            "b) contextConfigure",
            "c) contextLocation",
            "d) none of these",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 212,
        "Question": "Bean classes pre-registered in the web application context by default.",
        "Options": [
            "a) DefaultAnnotationHandlerMapping",
            "b) AnnotationMethodHandlerAdapter",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 213,
        "Question": "Callback methods provided by HandlerInterceptor to implement.",
        "Options": [
            "a) preHandle()",
            "b) postHandle()",
            "c) afterCompletion()",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 214,
        "Question": "Interface implemented by locale resolver.",
        "Options": [
            "a) localeResolver",
            "b) tiles",
            "c) front controller",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 215,
        "Question": "Default localeResolver used by Spring.",
        "Options": [
            "a) AcceptHeaderLocale",
            "b) AcceptHeader",
            "c) AcceptHeaderLocaleResolver",
            "d) AcceptLocaleResolver",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 216,
        "Question": "Alternative way to resolve locales.",
        "Options": [
            "a) AcceptHeaderLocale",
            "b) AcceptHeader",
            "c) AcceptHeaderLocaleResolver",
            "d) SessionLocaleResolver",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 217,
        "Question": "Property which indicates how many seconds this cookie should be persisted.",
        "Options": [
            "a) cookieMaxAge",
            "b) cookieName",
            "c) cookieAge",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 218,
        "Question": "Method used to change user’s locale.",
        "Options": [
            "a) set",
            "b) setLocale",
            "c) locale",
            "d) set_locale",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 219,
        "Question": "Property of LocaleChangeInterceptor used to customize parameter name.",
        "Options": [
            "a) localeResolver.setLocale",
            "b) paramName",
            "c) locale.parm",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 220,
        "Question": "Parameter which can change user’s locale by any URL.",
        "Options": [
            "a) locale",
            "b) languageURL",
            "c) language",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 221,
        "Question": "Interface used to resolve text messages.",
        "Options": [
            "a) Message",
            "b) Message_Source",
            "c) Language",
            "d) MessageSource",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 222,
        "Question": "Tag used by view to resolve text messages.",
        "Options": [
            "a) spring:message",
            "b) spring:language",
            "c) spring:title",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 223,
        "Question": "The cookieMaxAge value when browser is closed.",
        "Options": [
            "a) 0",
            "b) 1",
            "c) -1",
            "d) true",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 224,
        "Question": "Interface for Dispatcher Servlet to auto detect view resolver beans.",
        "Options": [
            "a) localeResolver",
            "b) tiles",
            "c) ViewResolver",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 225,
        "Question": "ViewResolver which maps each view name tol an application’s directory.",
        "Options": [
            "a) InternalViewResolver",
            "b) InternalResourceViewResolver",
            "c) InternalResolver",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 226,
        "Question": "InternalResourceViewResolver resolves view names into view objects of type.",
        "Options": [
            "a) JstlView",
            "b) Jst Library",
            "c) View",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 227,
        "Question": "View beans from a resource bundle is loaded by.",
        "Options": [
            "a) ResourceBundleViewResolver",
            "b) ResourceBundleView",
            "c) ResourceViewResolver",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 228,
        "Question": "Views that can’t be resolved by InternalResourceViewResolver.",
        "Options": [
            "a) redirect",
            "b) redirect:prefix",
            "c) redirect:suffix",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 229,
        "Question": "Properties used to determine the correct content and type for a certain web requests.",
        "Options": [
            "a) The URL extension provided in a request",
            "b) The HTTP Accept header",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 230,
        "Question": "Inspection of header is done by which of the following.",
        "Options": [
            "a) InternalViewResolver",
            "b) ContentNegotiatingViewResolver",
            "c) ContentNegotiating",
            "d) InternalResolver",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 231,
        "Question": "The ContentNegotiatingViewResolver resolver first determines the media type for a request based on which of the following criteria?",
        "Options": [
            "a) It checks a request path extension",
            "b) If a request path has an extension but no match can be found in the default mediaTypes section of the ContentNegotiatingViewResolver bean",
            "c) If no extension is present in a request path, the HTTP Accept header of the request is used",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 232,
        "Question": "To configure the exception mappings in the web application context.",
        "Options": [
            "a) SimpleMappingExceptionResolver",
            "b) ExceptionResolver",
            "c) ExceptionViewResolver",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 233,
        "Question": "Annotation which allows a controller’s field to be assigned using Spring Expression Language(SpEL)",
        "Options": [
            "a) @Value",
            "b) @After",
            "c) @Default",
            "d) @None",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 234,
        "Question": "Tag, used to define a location in which to place errors in case a form.",
        "Options": [
            "a) form",
            "b) form:GET",
            "c) form:POST",
            "d) form:errors",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 235,
        "Question": "To validate Java beans in a web application using annotations.",
        "Options": [
            "a) XML",
            "b) Java Based",
            "c) JAR-303 standard",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 236,
        "Question": "For validating beans Spring supports.",
        "Options": [
            "a) ad-hoc technique",
            "b) jsr-303",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 237,
        "Question": "Annotation which indicates a field cannot be a null.",
        "Options": [
            "a) @NotNULL",
            "b) @NotNull",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 238,
        "Question": "Annotation used to indicate a field has to have a minimum of 2 characters.",
        "Options": [
            "a) @NotNull",
            "b) @Size",
            "c) @MaxSize",
            "d) @size",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 239,
        "Question": "Annotation which receives a value in the form regexp=”[email protected]+\\\\.[a-z]+”.",
        "Options": [
            "a) @Pattern",
            "b) @EmailRecognizer",
            "c) @Email",
            "d) @Null",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 240,
        "Question": "A field named validator is of type.",
        "Options": [
            "a) javax.validation.Validator",
            "b) javax.validation.ValidatorFactory",
            "c) javax.validation.ValidatorFactor",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 241,
        "Question": "Validator field is not assigned to any bean, but rather a factory class of the type.",
        "Options": [
            "a) javax.validation.Validator",
            "b) javax.validation.ValidatorFactory",
            "c) javax.validation.ValidatorFactor",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 242,
        "Question": "To hold any errors detected from validating the instance of beans.",
        "Options": [
            "a) javax.validation.Validator",
            "b) javax.validation.ValidatorFactory",
            "c) javax.validation.ValidatorFactor",
            "d) javax.validation.ConstraintViolation",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 243,
        "Question": "To use JSR-303 bean validation in a web application, dependencies to be added in maven.",
        "Options": [
            "a) javax.validation",
            "b) org.hibernate",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 244,
        "Question": "Spring MVC supports generating Excel files using which of the following libraries.",
        "Options": [
            "a) Apache POI library",
            "b) JExcelAPI library",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 245,
        "Question": "The view classes for Excel view is/are:-",
        "Options": [
            "a) AbstractExcelView",
            "b) AbstractJExcelView",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 246,
        "Question": "Spring MVC supports generating PDF files using which of the following libraries.",
        "Options": [
            "a) iText library",
            "b) iJText library",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 247,
        "Question": "To publish a REST service with Spring.",
        "Options": [
            "a) publishing an application’s data as a REST service",
            "b) accessing data from third-party REST services",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 248,
        "Question": "Publishing an application’s data as a REST service requires.",
        "Options": [
            "a) @RequestMapping",
            "b) @PathVariable",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 249,
        "Question": "Annotation added as an input parameter to the handler method.",
        "Options": [
            "a) @PathVariable",
            "b) @Path",
            "c) @PathLocale",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 250,
        "Question": "Notation for defining REST endpoints.",
        "Options": [
            "a) { }",
            "b) *",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 251,
        "Question": "General-purpose class that allows a response to be rendered using a marshaller.",
        "Options": [
            "a) MarshallingView",
            "b) Marshalling",
            "c) View",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 252,
        "Question": "The marshaller used by MarshallingView belongs to one of a series of XML marshallers.",
        "Options": [
            "a) Jaxb2Marshaller",
            "b) XmlBeansMarshaller",
            "c) CastorMarshalle",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 253,
        "Question": "To configure Jaxb2Marshaller marshaller we require.",
        "Options": [
            "a) ClassesToBeBound",
            "b) ContextPath",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 254,
        "Question": "Annotation which allows the Jaxb2Marshaller marshaller to detect a class’s (i.e., object’s) fields.",
        "Options": [
            "a) @XmlRootElement",
            "b) @XmlRoot",
            "c) @NotNull",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 255,
        "Question": "Accessing a third-party REST service inside a Spring application.",
        "Options": [
            "a) RestTemplate Class",
            "b) ViewResolver",
            "c) InternalViewResolver",
            "d) View",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 256,
        "Question": "REST service end point comprises an address.",
        "Options": [
            "a) starts with http:// and ends with ?",
            "b) starts with http:// and ends with &",
            "c) no certain URL is specified",
            "d) depends upon the platform used",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 257,
        "Question": "XML tag which represents information related to a REST service request.",
        "Options": [
            "a) Result",
            "b) Title",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 258,
        "Question": "RestTemplate class method which performs an HTTP HEAD operation.",
        "Options": [
            "a) headForHeaders(String, Object…)",
            "b) getForObject(String, Class, Object…)",
            "c) postForLocation(String, Object, Object…)",
            "d) postForObject(String, Object, Class, Object…)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 259,
        "Question": "Payload format for REST services.",
        "Options": [
            "a) RSS",
            "b) Atom",
            "c) JSON",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 260,
        "Question": "Class that forms part of Spring to apply JSON content.",
        "Options": [
            "a) MappingJacksonJsonView",
            "b) MappingJsonView",
            "c) MappingJacksonJson",
            "d) JsonView",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 261,
        "Question": "The MappingJacksonJsonView class depends on Jackson JSON processor library.",
        "Options": [
            "a) org.codehaus.jackson",
            "b) jackson-mapper-asl",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 262,
        "Question": "JSON payload consists of text and separators like.",
        "Options": [
            "a) { , }",
            "b) ( , )",
            "c) :",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 263,
        "Question": "To access JSON in a Spring application, library used is:-",
        "Options": [
            "a) JSON-LIB",
            "b) SpringJSON-lib",
            "c) JSON-lib",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 264,
        "Question": "Class which is capable of performing a multitude of operations on REST services.",
        "Options": [
            "a) RestTemplate",
            "b) XPathTemplate",
            "c) XMLTemplate",
            "d) JavaTemplate",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 265,
        "Question": "XML query language for selecting nodes from an XML document.",
        "Options": [
            "a) XPathTemplate",
            "b) XPath",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 266,
        "Question": "To extract and manipulate payloads in Spring REST in a format other than String.",
        "Options": [
            "a) HttpConverter",
            "b) HttpMessage",
            "c) HttpConverterMessage",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 267,
        "Question": "To write your own converters relying on the MarshallingHttpMessageConverter interface that would allow the use of custom marshallers.",
        "Options": [
            "a) messageConverters",
            "b) messageConvert",
            "c) converters",
            "d) convertersMessage",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 268,
        "Question": "To override the default implementations registered with the RestTemplate class.",
        "Options": [
            "a) messageConverters",
            "b) messageConvert",
            "c) converters",
            "d) convertersMessage",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 269,
        "Question": "To extract and manipulate the contents of a REST service payload.",
        "Options": [
            "a) messageConverters",
            "b) StreamSource class",
            "c) converters",
            "d) convertersMessage",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 270,
        "Question": "IntelliJ IDEA product, versions 8 and 9, supports:-",
        "Options": [
            "a) Flex",
            "b) AIR",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 271,
        "Question": "In Flash, the displayed area where animation and rendering occurs.",
        "Options": [
            "a) Stage",
            "b) Animation",
            "c) Stagery",
            "d) State",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 272,
        "Question": "Linkable libraries have the extension.",
        "Options": [
            "a) .swc",
            "b) .dll",
            "c) .so",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 273,
        "Question": "The source artifacts of a Flex application are:-",
        "Options": [
            "a) ActionScript files (ending in .as)",
            "b) ActionScript files (ending in .mxml)",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 274,
        "Question": "XML variant that describe the UI components and provide a DOM.",
        "Options": [
            "a) AS files",
            "b) MXML files",
            "c) XML Files",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 275,
        "Question": "Outermost tag in Flex.",
        "Options": [
            "a) mx:Application",
            "b) mx:WindowedApplication",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 276,
        "Question": "Outermost tag in AIR.",
        "Options": [
            "a) mx:Application",
            "b) mx:WindowedApplication",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 277,
        "Question": " As soon as the application has been loaded and all the objects configured, an event will be fired.",
        "Options": [
            "a) applicationEvent",
            "b) applicationComplete",
            "c) eventConfigure",
            "d) eventComplete",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 278,
        "Question": "JavaScript library dynamically generates.",
        "Options": [
            "a) object",
            "b) plugin",
            "c) FlashVars",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 279,
        "Question": "15.To talk to the containing HTML page.",
        "Options": [
            "a) flash.external.ExternalInterface",
            "b) flash.external.External",
            "c) flash.external.ExternalInterface",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 280,
        "Question": "The endpoint URL attribute defines where service is mounted.",
        "Options": [
            "a) endpoint URL",
            "b) endpoint",
            "c) endpoint service",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 281,
        "Question": "To keep our code as ready-to-deploy as possible.",
        "Options": [
            "a) parameterize the URL of the service in the client",
            "b) add an entry to your /etc/hosts file on Unix derivatives or, on Windows, to your C:\\WINDOWS\\system32\\drivers\\etc\\hosts",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 282,
        "Question": "The service, which will simply fetch all the items that are for auction and return the description.",
        "Options": [
            "a) SpringBlaze DS",
            "b) SpringFlex",
            "c) EventSpring",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 283,
        "Question": "To keep the code simpler.",
        "Options": [
            "a) Hibernate",
            "b) Backing datastore",
            "c) ConcurrentSkipListSet",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 284,
        "Question": "Method which takes parameters required to describe a bid and creates it.",
        "Options": [
            "a) bid",
            "b) acceptBid",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 285,
        "Question": "To notify other viewers of any new items posted.",
        "Options": [
            "a) javax.jms.Topic",
            "b) jms",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 286,
        "Question": "Method, which is called after the component’s been configured by Spring",
        "Options": [
            "a) setupItems",
            "b) setUp",
            "c) setupFakeItems",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 287,
        "Question": "To configure the standard Spring bean.",
        "Options": [
            "a) context:component-scan",
            "b) context:scan",
            "c) context:component",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 288,
        "Question": "In Spring context XML for the message broker, we have.",
        "Options": [
            "a) flex",
            "b) flex:message-broker",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 289,
        "Question": "flex:message-service element had an attribute.",
        "Options": [
            "a) default-channels",
            "b) default-channel",
            "c) default",
            "d) default-types",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 290,
        "Question": "To use a different channel they’d like to use when communicating with the server.",
        "Options": [
            "a) flex:remoting-destination",
            "b) flex:remote",
            "c) flex:destination",
            "d) flex:default-channels",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 291,
        "Question": "To invoke Grails operations from anywhere on your workstation.",
        "Options": [
            "a) GRAILS HOME",
            "b) PATH",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 292,
        "Question": "To see Grails numerous commands.",
        "Options": [
            "a) grails help",
            "b) grails -help",
            "c) grails -h",
            "d) help grails",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 293,
        "Question": "To create a Grails application, command:-",
        "Options": [
            "a) grails create-app",
            "b) grails create-app grailsappname",
            "c) grails create-app default",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 294,
        "Question": "Working directories and files are placed under which directory.",
        "Options": [
            "a) User’s home directory under the name.grails/grails version/.",
            "b) WEB-APP",
            "c) WEB-INF",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 295,
        "Question": "Grails generates a series of files and directories which includes.",
        "Options": [
            "a) Apache Ant file(build.xml)",
            "b) Apache Ivy file(ivy.xml)",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 296,
        "Question": "Used to define an application’s properties.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) manifest.xml",
            "d) court.iml",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 297,
        "Question": "An Apache Ant script with a series of predefined tasks designed to create a Grails application.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) manifest.xml",
            "d) court.iml",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 298,
        "Question": "An XML file containing configuration parameters for an application.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) manifest.xml",
            "d) court.iml",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 299,
        "Question": "An XML file containing configuration parameters for an application’s deployment.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) court.iws",
            "d) court.iml",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 300,
        "Question": "An XML file containing configuration parameters for an application’s launch.",
        "Options": [
            "a) application.properties",
            "b) build.xml",
            "c) court.iws",
            "d) court.launch",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 301,
        "Question": "An Apache Ivy configuration file used for defining repositories.",
        "Options": [
            "a) application.properties",
            "b) ivysettings.xml",
            "c) court.iws",
            "d) court.launch",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 302,
        "Question": "A directory containing the core of an application.",
        "Options": [
            "a) application.properties",
            "b) ivysettings.xml",
            "c) court.iws",
            "d) grails-app",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 303,
        "Question": "An XML file containing configuration parameters for an application.",
        "Options": [
            "a) application.properties",
            "b) ivysettings.xml",
            "c) court.iml",
            "d) court.launch",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 304,
        "Question": "Some of the more popular Grails plugins follow:",
        "Options": [
            "a) App Engine",
            "b) Quartz",
            "c) Spring WS",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 305,
        "Question": "Classes used to describe an application’s primary elements.",
        "Options": [
            "a) Domain Classes",
            "b) Application",
            "c) Context",
            "d) View",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 306,
        "Question": "In Grails, domain classes are placed under:-",
        "Options": [
            "a) /grails-app/WEB-INF/",
            "b) /grails-app/domain/",
            "c) /grails-app/domain/WEB-APP",
            "d) /grails-app/",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 307,
        "Question": "The creation of domain classes  by executing a simple command which is:-",
        "Options": [
            "a) grails create-domain-class",
            "b) grails create-domain-class domain class name",
            "c) domain class name",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 308,
        "Question": "Static field which defines constraints on the domain class.",
        "Options": [
            "a) static{}",
            "b) static field{}",
            "c) static constraint{}",
            "d) static constraints{}",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 309,
        "Question": "Declaration name which indicates that object’s name field can’t be blank.",
        "Options": [
            "a) blank:false",
            "b) blank:true",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 310,
        "Question": "Command to generate the corresponding CRUD controller and views for an application’s domain class.",
        "Options": [
            "a) grails create-domain-class domain class name",
            "b) grails create-domain-class",
            "c) grails generate-all domain class name",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 311,
        "Question": "Views corresponding to a controller class’s CRUD operations.",
        "Options": [
            "a) create.gsp",
            "b) edit.gsp",
            "c) list.gsp",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 312,
        "Question": ".gsp extension stands for:-",
        "Options": [
            "a) Groovy Server Pages",
            "b) Groovy Service Pages",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 313,
        "Question": "Views are placed under which directory:-",
        "Options": [
            "a) app/views/",
            "b) app/",
            "c) grails-app/views/WEB-INF",
            "d) grails-app/views/domain class",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 314,
        "Question": "Command to start the Grails application:-",
        "Options": [
            "a) grails run",
            "b) grails start-app",
            "c) grails run-app",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 315,
        "Question": "Where can you find series of *.properties files.",
        "Options": [
            "a) /grails-app/",
            "b) /grails-app/i18n/",
            "c) /grails-app/i18n/WEB-INF",
            "d) /grails-app/i18n/WEB-APP",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 316,
        "Question": "Which locale (i.e., from an internationalization properties file) to use for a user is based on?",
        "Options": [
            "a) /grails-app/conf/spring/resource.groovy file",
            "b) user’s browser language preferences",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 317,
        "Question": "If you want to coerce users into using a specific language locale.",
        "Options": [
            "a) /grails-app/conf/spring/resource.groovy file",
            "b) /grails-app/resource.groovy file",
            "c) /grails-app/spring/resource.groovy file",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 318,
        "Question": "JSP Tag which declares statements using the Groovy.",
        "Options": [
            "a) g:message",
            "b) g:string",
            "c) g:msg",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 319,
        "Question": "Tag can also be used in GSP pages views.",
        "Options": [
            "a) g:message",
            "b) g:string",
            "c) g:msg",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 320,
        "Question": "Grails comes preconfigured to use:-",
        "Options": [
            "a) MySql",
            "b) PostgreSQL",
            "c) Access",
            "d) HSQLDB",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 321,
        "Question": "Configure Grails to use another RDBMS by modifying:-",
        "Options": [
            "a) Data.groovy",
            "b) DataSource.groovy",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 322,
        "Question": "DataSource properties, Class name for the JDBC driver.",
        "Options": [
            "a) driverClassName",
            "b) dataSource properties",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 323,
        "Question": "Indicates whether to enable SQL logging.",
        "Options": [
            "a) driverClassName",
            "b) dataSource properties",
            "c) logSql",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 324,
        "Question": "To perform its logging operations.",
        "Options": [
            "a) Log4J",
            "b) LogingJ",
            "c) JLog",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 325,
        "Question": "Log4J configuration parameters are specified inside:-",
        "Options": [
            "a) Config.groovy",
            "b) Conf.groovy",
            "c) Log.groovy",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 326,
        "Question": "Grails application logging can be configured using:-",
        "Options": [
            "a) creating custom appenders",
            "b) logging levels",
            "c) console output",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 327,
        "Question": "In Log4J parlance, each package is known as:-",
        "Options": [
            "a) parlance",
            "b) logger",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 328,
        "Question": " Log4J also has the following logging level:-",
        "Options": [
            "a) fatal",
            "b) error",
            "c) warning",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 329,
        "Question": "To offer versatile logging functionality:-",
        "Options": [
            "a) loggers",
            "b) appenders",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 330,
        "Question": "A location where logging information is sent.",
        "Options": [
            "a) appender",
            "b) logger",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 331,
        "Question": "A location where logging information is generated.",
        "Options": [
            "a) appender",
            "b) logger",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 332,
        "Question": "An appender that logs to a JDBC connection.",
        "Options": [
            "a) jdbc",
            "b) console",
            "c) file",
            "d) rollingFile",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 333,
        "Question": "Command for running tests in Grails.",
        "Options": [
            "a) grails test-app",
            "b) grails test",
            "c) grails test-app domain class",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 334,
        "Question": "Method creates a mock object from a domain class.",
        "Options": [
            "a) mockForConstraintsTests",
            "b) mockForConstraints",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 335,
        "Question": "A Grails view can contain:-",
        "Options": [
            "a) HTML Tags",
            "b) GSP or JSTL Tags",
            "c) Groovy or Java code",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 336,
        "Question": "To create custom tags.",
        "Options": [
            "a) grails create tag",
            "b) grails create-tag-lib  tag-lib-name",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 337,
        "Question": "grails create-tag-lib tag-lib-name command creates a custom tag library under:-",
        "Options": [
            "a) /grails-app/tag/",
            "b) /grails-app/",
            "c) /grails-app/tag-lib/",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 338,
        "Question": "By default, Grails assigns custom tags to:-",
        "Options": [
            "a) g: namespace",
            "b) f: namespace",
            "c) j: namespace",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 339,
        "Question": "Where is subdirectory called layouts located, containing the layouts available to an application?",
        "Options": [
            "a) /grails-app/view/",
            "b) /grails-app/",
            "c) /grails-app/view/WEB-INF",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 340,
        "Question": "Tag is used to define the contents of a layout’s title section.",
        "Options": [
            "a) g:layoutTitle",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 341,
        "Question": "Tag is used to define the contents of a layout’s head section.",
        "Options": [
            "a) g:layoutTitle",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 342,
        "Question": "Tag allows any view inheriting this layout automatic access to JavaScript libraries.",
        "Options": [
            "a) g:javascript library=”application”",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 343,
        "Question": "A view’s body content is inside the:-",
        "Options": [
            "a) g:javascript library=”application”",
            "b) g:layoutHead",
            "c) g:layoutBody",
            "d) g:layoutMeta",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 344,
        "Question": "GORM dynamic finder comparators:-",
        "Options": [
            "a) InList",
            "b) LessThan",
            "c) LessThanEquals",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 345,
        "Question": "Library which helps Spring Roo in using of the command line shell.",
        "Options": [
            "a) JTag",
            "b) JLine",
            "c) JHib",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 346,
        "Question": "To check version of Maven.",
        "Options": [
            "a) mvn –v",
            "b) mvn -v",
            "c) mvn –version",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 347,
        "Question": "To confirm Roo version.",
        "Options": [
            "a) roo.sh",
            "b) roo",
            "c) roo quit",
            "d) roo.sh quit",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 348,
        "Question": "You can ask Roo questions using:-",
        "Options": [
            "a) tab",
            "b) hint",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 349,
        "Question": "Spring Roo file extension is:-",
        "Options": [
            "a) .xml",
            "b) .xhtml",
            "c) .roo",
            "d) .groovy",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 350,
        "Question": "To run the script:-",
        "Options": [
            "a) roo.sh script –file ~/Desktop/myapp.roo",
            "b) roo.sh –file ~/Desktop/myapp.roo",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 351,
        "Question": "Maven Directory to hold the non–unit-test Java files for your application.",
        "Options": [
            "a) src/main/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 352,
        "Question": "Maven Directory which holds classpath resources that aren’t Java class files.",
        "Options": [
            "a) src/main/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 353,
        "Question": "Maven Directory which is used to hold the rest of a web application’s structure.",
        "Options": [
            "a) src/main/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 354,
        "Question": "This directory holds artifacts intended to test the Java classes under the src/main/java folder.",
        "Options": [
            "a) src/test/java",
            "b) src/main/resources",
            "c) src/main/webapp",
            "d) src/test/java",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 355,
        "Question": "This directory holds resources needed by your test classes at test time.",
        "Options": [
            "a) src/test/java",
            "b) src/test/resources",
            "c) src/main/webapp",
            "d) src/test/java",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 356,
        "Question": "To package the project using the Roo shell.",
        "Options": [
            "a) perform package",
            "b) roo.sh",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 357,
        "Question": "The plugin, which provides Maven support to Eclipse",
        "Options": [
            "a) m2eclipse",
            "b) m2plugin",
            "c) plugin",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 358,
        "Question": "A database and some sort of persistence mechanism using command:-",
        "Options": [
            "a) persistence setup –database HYPERSONIC_IN_MEMORY –provider HIBERNATE",
            "b) persistence setup –database HYPERSONIC_IN_MEMORY –provider",
            "c) persistence setup –database HYPERSONIC_IN_MEMORY",
            "d) persistence –database HYPERSONIC_IN_MEMORY –provider HIBERNATE",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 359,
        "Question": "persistence setup –database HYPERSONIC_IN_MEMORY –provider HIBERNATE command creates files:-",
        "Options": [
            "a) src/main/resources/META-INF/persistence.xml",
            "b) src/main/resources/META-INF/spring/database.properties",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 360,
        "Question": "The file which contains useful configuration for Hypersonic in-memory database.",
        "Options": [
            "a) src/main/resources/META-INF/spring/database.properties",
            "b) src/main/resources/META-INF/persistence.xml",
            "c) src/main/resources/META-INF/pom.xml",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 361,
        "Question": "The file which is the standard JPA configuration file to enable the Hibernate-based JPA implementation.",
        "Options": [
            "a) src/main/resources/META-INF/spring/database.properties",
            "b) src/main/resources/META-INF/persistence.xml",
            "c) src/main/resources/META-INF/pom.xml",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 362,
        "Question": "Spring application context, src/main/resources/META-INF/spring/applicationContext.xml consists of:-",
        "Options": [
            "a) Data Source",
            "b) JPA Transaction Manager",
            "c) JPA entity manager factory",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 363,
        "Question": "Command to create a Spring MVC controller that provides a UI:-",
        "Options": [
            "a) controller scaff –class ~.web.CustomerController –entity ~.domain.Customer",
            "b) controller scaff –class ~.web.CustomerController –entity",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 364,
        "Question": "To deploy the application to a web container:-",
        "Options": [
            "a) mvn tomcat:run",
            "b) mvn jetty:run",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 365,
        "Question": "Spring Roo’s root folder (or any of the source packages) is:-",
        "Options": [
            "a) src/main/java, src/main/resources",
            "b) src/test/java",
            "c) src/test/resources",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 366,
        "Question": "This encapsulates the context of a test’s execution:-",
        "Options": [
            "a) Test context",
            "b) Test context manager",
            "c) Test context listener",
            "d) Test execution listener",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 367,
        "Question": "This manages a test context for a test and triggers test execution listeners:-",
        "Options": [
            "a) Test context",
            "b) Test context manager",
            "c) Test context listener",
            "d) Test execution listener",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 368,
        "Question": "This defines a listener interface; by implementing this, you can listen to test execution events.",
        "Options": [
            "a) Test context",
            "b) Test context manager",
            "c) Test context listener",
            "d) Test execution listener",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 369,
        "Question": "Spring provides convenient TestContext support classes for:-",
        "Options": [
            "a) JUnit3",
            "b) JUnit4",
            "c) TestNG5",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 370,
        "Question": "JUnit 4 allows you to annotate your test methods with:-",
        "Options": [
            "a) @Test",
            "b) @Autowire",
            "c) @JTest",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 371,
        "Question": "Method to perform cleanup tasks:-",
        "Options": [
            "a) finalize",
            "b) tearDown",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 372,
        "Question": "The static assert methods is declared in the:-",
        "Options": [
            "a) org.junit.Assert",
            "b) org.junit.*",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 373,
        "Question": "Attribute which specifies the exception type:-",
        "Options": [
            "a) after",
            "b) expected",
            "c) before",
            "d) test",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 374,
        "Question": "Test data sets are provided by data providers, which are methods with the:-",
        "Options": [
            "a) @DataProvider",
            "b) @Autowire",
            "c) @JTest",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 375,
        "Question": "An object that simulates a dependent object:-",
        "Options": [
            "a) stub",
            "b) mock",
            "c) test",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 376,
        "Question": "An Object which usually knows how its methods are expected to be called:-",
        "Options": [
            "a) stub",
            "b) mock",
            "c) test",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 377,
        "Question": "Libraries that can help create mock objects:-",
        "Options": [
            "a) EasyMock",
            "b) jMock",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 378,
        "Question": "Test used to test several units in combination as a whole.",
        "Options": [
            "a) Integration tests",
            "b) JUnit4",
            "c) TestNG5",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 379,
        "Question": "Spring supports web controller testing by providing Servlet API:-",
        "Options": [
            "a) MockHttpServletRequest",
            "b) MockHttpServletResponse",
            "c) MockHttpSession",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 380,
        "Question": "Base class to access the managed application context through the inherited getApplicationContext() method.",
        "Options": [
            "a) AbstractSingleSpringContextTests",
            "b) AbstractSingleSpring",
            "c) Test context listener",
            "d) Test execution listener",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 381,
        "Question": "The TestContext framework provides two test execution listeners related to context management:-",
        "Options": [
            "a) DependencyInjectionTestExecutionListener",
            "b) DirtiesContextTestExecutionListener",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 382,
        "Question": "Interface which can provide access to the managed application context through the protected field applicationContext:-",
        "Options": [
            "a) ApplicationContextAware",
            "b) ApplicationContext",
            "c) ApplicationContextAwareContext",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 383,
        "Question": "Method to indicate that the application context is dirty.",
        "Options": [
            "a) getDirty()",
            "b) setDirty()",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 384,
        "Question": "In JUnit4, to explicitly specify a Spring-specific test runner for running your test.",
        "Options": [
            "a) SpringJUnit4ClassRunner",
            "b) SpringJUnit4Class",
            "c) SpringJUnit4",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 385,
        "Question": "Annotation for SpringJUnit4ClassRunner:-",
        "Options": [
            "a) @Run",
            "b) @RunWith",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 386,
        "Question": "This class implements the ApplicationContextAware interface, so you can get access to the managed application context:-",
        "Options": [
            "a) AbstractJUnit38SpringContext",
            "b) AbstractJUnit38Spring",
            "c) AbstractJUnit38SpringContextTests",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 387,
        "Question": "Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the:-",
        "Options": [
            "a) AbstractDependencyInjectionSpringContextTests",
            "b) AbstractSingleSpringContextTests",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 388,
        "Question": "AbstractDependencyInjectionSpringContextTests supports dependency injection.",
        "Options": [
            "a) auto-wires beans by type via setter methods",
            "b) auto-wires beans by name via protected fields",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 389,
        "Question": "Test fixtures injected from the managed application context by annotating:-",
        "Options": [
            "a) @Autowired",
            "b) @Resource",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 390,
        "Question": "Starting from Spring 2.5, the TestContext framework provides a test execution listener related to transaction management:-",
        "Options": [
            "a) TransactionalTestExecutionListener",
            "b) TransactionalTestExecution",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 391,
        "Question": "Annotation for TransactionalTestExecutionListener:-",
        "Options": [
            "a) @Transactional",
            "b) @RunWith",
            "c) @Run",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 392,
        "Question": "Maps each request to a handler through one or more handler mapping beans.",
        "Options": [
            "a) DispatcherServlet",
            "b) DispatcherPortlet",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 393,
        "Question": "In portlets, there are URLs:-",
        "Options": [
            "a) render",
            "b) action",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 394,
        "Question": "After Controller has finished handling a render request, it returns:-",
        "Options": [
            "a) model name",
            "b) view name",
            "c) view obect",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 395,
        "Question": "portlet deployment descriptor file is:-",
        "Options": [
            "a) portlet.xml",
            "b) portlet.config",
            "c) portlet.xhtml",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 396,
        "Question": "Servlet Listener to load the root application context at startup.",
        "Options": [
            "a) ContextLoader",
            "b) ContextLoaderListener",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 397,
        "Question": "The preceding controller handles portlet requests:-",
        "Options": [
            "a) render requests",
            "b) action requests",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 398,
        "Question": "Spring supports most of the popular ORM (or data mapper) frameworks.",
        "Options": [
            "a) Hibernate",
            "b) JDO",
            "c) JPA",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 399,
        "Question": "ORM which isn’t supported by Spring:-",
        "Options": [
            "a) Hibernate",
            "b) JDO",
            "c) TopLink",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 400,
        "Question": "Database Engine which uses low memory consumption and easy configuration.",
        "Options": [
            "a) SQL",
            "b) MySQL",
            "c) Apache Derby",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 401,
        "Question": "Mode which Derby prefers to run in:-",
        "Options": [
            "a) embedded",
            "b) client/server",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 402,
        "Question": "To start the Derby server in the client/server mode.",
        "Options": [
            "a) startNetworkServer java file",
            "b) startNetworkServer script",
            "c) startNetwork script",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 403,
        "Question": "JDBC Properties for Connecting to the Application Database.",
        "Options": [
            "a) Driver Class",
            "b) URL",
            "c) Username",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 404,
        "Question": "To access the database with JDBC:-",
        "Options": [
            "a) DAO interface",
            "b) DAO Class",
            "c) DataAccess interface",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 405,
        "Question": "Standard interface defined by the JDBC specification that factories Connection instances.",
        "Options": [
            "a) javax.sql.DataAccess",
            "b) javax.sql.DataSource",
            "c) javax.sql.Data",
            "d) javax.sql.DataSourceAccess",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 406,
        "Question": "Data source implementations provided by different vendors and projects.",
        "Options": [
            "a) C3PO",
            "b) Apache Commons DBCP",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 407,
        "Question": "Spring also provides several convenient but less powerful data source implementations.",
        "Options": [
            "a) DriverManagerDataSource",
            "b) DriverManagerData",
            "c) DriverManagerDataAccess",
            "d) DriverManagerDataSourceAccess",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 408,
        "Question": "Which DataSource is not stable in MultiThreaded Environment?",
        "Options": [
            "a) DriverManagerDataSource",
            "b) SingleConnectionDataSource",
            "c) All of the mentioned",
            "d) None of the mentione",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 409,
        "Question": "Class which declares a number of overloaded update() template methods to control the overall update process.",
        "Options": [
            "a) org.springframework.jdbc.core.JdbcTemplate",
            "b) org.springframework.jdbc.core.*",
            "c) org.springframework.jdbc.*",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 410,
        "Question": "You implement this interface to override the statement creation task.",
        "Options": [
            "a) PreparedStatement",
            "b) PreparedStatementCreator",
            "c) PreparedCreator",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 411,
        "Question": "The JdbcTemplate class offers template method for batch update operations.",
        "Options": [
            "a) batchUpdate()",
            "b) update()",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 412,
        "Question": "The primary interface that allows you to process the current row of the result set.",
        "Options": [
            "a) PreparedStatementSetter",
            "b) PreparedStatementCreator",
            "c) RowCallbackHandler",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 413,
        "Question": "Method of RowMapper interface in which, you have to construct the object that represents a row and return it as the method’s return value.",
        "Options": [
            "a) mapRow()",
            "b) query()",
            "c) update()",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 414,
        "Question": "RowMapper implementation which can automatically map a row to a new instance of the specified class.",
        "Options": [
            "a) BeanPropertyRowMapper",
            "b) BeanPropertyRow",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 415,
        "Question": "Method which provides list of maps.",
        "Options": [
            "a) queryForList()",
            "b) update",
            "c) query()",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 416,
        "Question": "Spring JDBC framework offers a convenient class, to simplify your DAO implementation.",
        "Options": [
            "a) org.springframework.jdbc.core.support",
            "b) org.springframework.jdbc.core.support.JdbcDaoSupport",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 417,
        "Question": "Method to retrieve the JDBC template.",
        "Options": [
            "a) setJdbcTemplate()",
            "b) getTemplate()",
            "c) getJdbc()",
            "d) getJdbcTemplate()",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 418,
        "Question": "JdbcTemplate that takes advantage of Java 1.5 features such as autoboxing, generics, and variable-length arguments to simplify its usage.",
        "Options": [
            "a) org.springframework.jdbc.core.JdbcTemplate",
            "b) org.springframework.jdbc.core.simple.SimpleJdbcTemplate",
            "c) org.springframework.jdbc.*",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 419,
        "Question": "To use SimpleJdbcTemplate:-",
        "Options": [
            "a) instantiate it directly",
            "b) retrieve its instance by extending the SimpleJdbcDaoSupport class",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 420,
        "Question": "SimpleJdbcTemplate offers a convenient batch update method in the form of:-",
        "Options": [
            "a) Vector",
            "b) Set",
            "c) Map",
            "d) List",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 421,
        "Question": "Method has a warning from the Java compiler because of an unchecked conversion from List to List.",
        "Options": [
            "a) findAll()",
            "b) query()",
            "c) update()",
            "d) batchUpdate()",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 422,
        "Question": "Implementations of the SqlParameterSource interface:-",
        "Options": [
            "a) MapSqlParameterSource",
            "b) BeanPropertySqlParameterSource",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 423,
        "Question": "The direct parent class of DataAccessException is:-",
        "Options": [
            "a) RuntimeException",
            "b) NestedRuntimeException",
            "c) Exception",
            "d) Throwable",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 424,
        "Question": "Which concrete exception in the DataAccessException hierarchy should be thrown?",
        "Options": [
            "a) errorCode",
            "b) SQLState properties of the caught SQLException",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 425,
        "Question": "Error code for The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint.",
        "Options": [
            "a) -1",
            "b) 0",
            "c) 23505",
            "d) 1",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 426,
        "Question": "How does the Spring JDBC framework know that state 23505 should be mapped to DuplicateKeyException?",
        "Options": [
            "a) error code",
            "b) SQL state",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 427,
        "Question": "Class which represents a real-world entity and its instances will be persisted to a database.",
        "Options": [
            "a) entity",
            "b) persistent",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 428,
        "Question": "To allow the identifier to be null, you should choose a primitive wrapper type:-",
        "Options": [
            "a) java.lang.Integer",
            "b) java.lang.Long",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 429,
        "Question": "A set of persistent annotations for you to define mapping metadata.",
        "Options": [
            "a) JPA",
            "b) JSR",
            "c) XML",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 430,
        "Question": "For mapping and persisting your objects with Hibernate and JPA.",
        "Options": [
            "a) Using the Hibernate API to persist objects with Hibernate XML mappings",
            "b) Using the Hibernate API to persist objects with JPA annotations",
            "c) Using JPA to persist objects with JPA annotations",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 431,
        "Question": "Core Programming Elements for Different Data Access Strategies.",
        "Options": [
            "a) Resource",
            "b) Resource Factory",
            "c) Session",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 432,
        "Question": "Interface whose instances can be obtained from a SessionFactory instance.",
        "Options": [
            "a) Session",
            "b) Session Factory",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 433,
        "Question": "Interface whose instances can be obtained from an EntityManagerFactory instance.",
        "Options": [
            "a) Entity",
            "b) EntityManager",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 434,
        "Question": "To accept a session factory via dependency injection.",
        "Options": [
            "a) HibernateCourseDao",
            "b) HibernateCourse",
            "c) HibernateDao",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 435,
        "Question": "Property for factory bean to load the Hibernate configuration file.",
        "Options": [
            "a) config.xml",
            "b) config",
            "c) configLocation",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 436,
        "Question": "FactoryBean to create an entity manager factory in the IoC container.",
        "Options": [
            "a) LocalEntityManagerFactoryBean",
            "b) LocalEntityManagerFactory",
            "c) LocalEntityManager",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 437,
        "Question": "It allows you to override some of the configurations in the JPA configuration file.",
        "Options": [
            "a) LocalEntityManagerFactoryBean",
            "b) LocalContainerEntityManagerFactoryBean",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 438,
        "Question": "An alternative to Spring HibernateTemplate is:-",
        "Options": [
            "a) HibernateContext",
            "b) Hibernate contextual sessions",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 439,
        "Question": "Sessionfactory can manage contextual sessions for you and allows you to retrieve them by the:-",
        "Options": [
            "a) getSession() method",
            "b) getCurrent() method",
            "c) getCurrentSession() method",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 440,
        "Question": "DAO methods require access to the session factory, which can be injected:-",
        "Options": [
            "a) a setter method",
            "b) constructor argument",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 441,
        "Question": "Annotation to find a transaction and then fail, complaining that no Hibernate session been bound to the thread.",
        "Options": [
            "a) @Transaction",
            "b) @Transactional",
            "c) @Transactions",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 442,
        "Question": "In the bean configuration file for Hibernate (i.e., beans-hibernate.xml), you have to declare a HibernateTransactionManager instance for this application and enable declarative transaction via:-",
        "Options": [
            "a) tx:annotation",
            "b) tx:annotationdriven",
            "c) tx:annotation-driven",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 443,
        "Question": "Annotation for Hibernate exceptions to be translated into Spring DataAccessException for consistent exception handling:-",
        "Options": [
            "a) @Translation",
            "b) @Repo",
            "c) @Repository",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 444,
        "Question": "Instance to translate the native Hibernate exceptions into data access exceptions in Spring DataAccessException hierarchy.",
        "Options": [
            "a) PersistenceExceptionPostProcessor",
            "b) PersistenceExceptionTranslation",
            "c) PersistenceException",
            "d) PersistenceExceptionTranslationPostProcessor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 445,
        "Question": "Spring provides to simplify your DAO implementation by managing entitymanagers and transactions for you:-",
        "Options": [
            "a) HibernateTemplate",
            "b) JpaTemplate",
            "c) SpringTemplate",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 446,
        "Question": "Annotation used for entity manager injection in EJB components.",
        "Options": [
            "a) @PersistenceContext",
            "b) @Persistence",
            "c) @PersistenceCon",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 447,
        "Question": "Transactions can be described with key properties:-",
        "Options": [
            "a) Atomicity",
            "b) Consistency",
            "c) Isolation",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 448,
        "Question": "To access a database running on the Derby server, you have to add:-",
        "Options": [
            "a) Derby client library",
            "b) Tomcat client library",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 449,
        "Question": "Spring’s transaction support offers a set of technology-independent facilities, including transaction managers.",
        "Options": [
            "a) org.springframework.transaction.PlatformTransactionManager",
            "b) org.springframework.transaction.support.TransactionTemplate",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 450,
        "Question": "Spring’s core transaction management abstraction is based on the interface:-",
        "Options": [
            "a) PlatformTransaction",
            "b) PlatformTransactionManager",
            "c) TransactionManager",
            "d) PlatformManager",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 451,
        "Question": "The PlatformTransactionManager interface provides methods for working with transactions:",
        "Options": [
            "a) getTransaction(TransactionDefinition definition)",
            "b) commit(TransactionStatus status)",
            "c) rollback(TransactionStatus status)",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 452,
        "Question": "Method that allows you to start a new transaction (or obtain the currently active transaction).",
        "Options": [
            "a) getTransaction()",
            "b) commit()",
            "c) rollback()",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 453,
        "Question": "Method to start a new transaction with that definition:-",
        "Options": [
            "a) getTransaction()",
            "b) commit()",
            "c) rollback()",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 454,
        "Question": "To help you control the overall transaction management process and transaction exception handling.",
        "Options": [
            "a) SpringTransactionTemplate",
            "b) TransactionTemplate",
            "c) Transaction",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 455,
        "Question": "A TransactionTemplate can accept a transaction callback object that implements:-",
        "Options": [
            "a) TransactionCallback",
            "b) TransactionCallbackWithoutResult class",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 456,
        "Question": "Spring (since version 2.0) offers a transaction advice that can be easily configured via the:-",
        "Options": [
            "a) rx:advice",
            "b) bx:advice",
            "c) tx:advice",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 457,
        "Question": "A transaction propagation behavior can be specified by the:-",
        "Options": [
            "a) propagation",
            "b) consistency",
            "c) isolation",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 458,
        "Question": "Transaction propagation behavior are defined in the:-",
        "Options": [
            "a) org.springframework.transaction.Transaction",
            "b) org.springframework.transaction.TransactionDefinition",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 459,
        "Question": "If there’s an existing transaction in progress, the current method should run within this transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 460,
        "Question": "The current method must start a new transaction and run within its own transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 461,
        "Question": "If there’s an existing transaction in progress, the current method can run within this transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 462,
        "Question": "The current method should not run within a transaction.",
        "Options": [
            "a) Required",
            "b) REQUIRES NEW",
            "c) SUPPORTS",
            "d) NOT SUPPORTED",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 463,
        "Question": "The current method must run within a transaction.",
        "Options": [
            "a) Required",
            "b) MANDATORY",
            "c) SUPPORTS",
            "d) NOT SUPPORTED",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 464,
        "Question": "The current method should not run within a transaction. If there’s an existing transaction in progress, an exception will be thrown.",
        "Options": [
            "a) Required",
            "b) MANDATORY",
            "c) SUPPORTS",
            "d) NEVER",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 465,
        "Question": "If there’s an existing transaction in progress, the current method should run within the nested transaction.",
        "Options": [
            "a) Required",
            "b) MANDATORY",
            "c) NESTED",
            "d) NEVER",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 466,
        "Question": "For two transactions T1 and T2, T1 reads a field that has been updated by T2 but not yet committed.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 467,
        "Question": "For two transactions T1 and T2, T1 reads a field and then T2 updates the field.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 468,
        "Question": "For two transactions T1 and T2, T1 reads some rows from a table and then T2 inserts new rows into the table.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 469,
        "Question": "For two transactions T1 and T2, they both select a row for update, and based on the state of that row, make an update to it.",
        "Options": [
            "a) Dirty Read",
            "b) Nonrepeatable read",
            "c) Phantom read",
            "d) Lost Updates",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 470,
        "Question": "Isolation Levels Supported by Spring:-",
        "Options": [
            "a) DEFAULT",
            "b) READ COMMITTED",
            "c) READ UNCOMMITTED",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 471,
        "Question": "The exceptions that cause a transaction to roll back or not can be specified by attribute:-",
        "Options": [
            "a) rollback",
            "b) commit",
            "c) serialize",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 472,
        "Question": "Key technology in developing distributed applications, especially multi-tier enterprise applications.",
        "Options": [
            "a) Remoting",
            "b) EJB",
            "c) RMI",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 473,
        "Question": "Java-based remoting technology that allows two Java applications running in different JVMs to communicate with each other.",
        "Options": [
            "a) Burlap",
            "b) EJB",
            "c) RMI",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 474,
        "Question": "To expose a service through RMI, you have to create the service interface that extends:-",
        "Options": [
            "a) java.rmi.Remote",
            "b) java.rmi.RemoteException",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 475,
        "Question": "To call the methods on a remote service:-",
        "Options": [
            "a) java.rmi.Remote",
            "b) java.rmi.RemoteException",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 476,
        "Question": "There are several properties you must configure for an RmiServiceExporter instance:-",
        "Options": [
            "a) service name",
            "b) service interface",
            "c) service object",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 477,
        "Question": "The Spring support classes facilitate building session beans:-",
        "Options": [
            "a) stateful session beans (SFSBs)",
            "b) stateless session beans (SLSBs)",
            "c) message-driven beans (MDBs)",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 478,
        "Question": "Spring EJB Support Classes for Different Types of EJB:-",
        "Options": [
            "a) AbstractStatelessSessionBean",
            "b) AbstractStatefulSessionBean",
            "c) AbstractMessageDrivenBean",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 479,
        "Question": "OpenEJB 3.1.1 supports:-",
        "Options": [
            "a) EJB 2.x components",
            "b) EJB 3.0 and EJB 3.1 components",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 480,
        "Question": "To start the OpenEJB container, you first set environment variable:-",
        "Options": [
            "a) EJB_HOME",
            "b) OPENEJB_HOME",
            "c) Bashrc",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 481,
        "Question": "To use Spring EJB support for your EJB implementation classes, you have to include a few Spring framework JARs:-",
        "Options": [
            "a) spring-beans",
            "b) spring-core",
            "c) spring-context",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 482,
        "Question": "Interceptor to let Spring configure @Autowired elements on your EJB.",
        "Options": [
            "a) org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor",
            "b) org.springframework.ejb.interceptor.SpringBeanAutowiring",
            "c) org.springframework.ejb.interceptor.SpringBean",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 483,
        "Question": "A remote stateless session bean requires annotations:-",
        "Options": [
            "a) @Remote",
            "b) @Stateless",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 484,
        "Question": "Proxying Spring services with EJB3s, injecting custom resources configured in Spring, or even using Spring to isolate your EJBs from acquiring references to other distributed resources such as a REST endpoint or an RMI endpoint.",
        "Options": [
            "a) SpringBeanAutowiringInterceptor",
            "b) SpringBeanAutowiring",
            "c) SpringBean",
            "d) SpringBeanInterceptor",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 485,
        "Question": "Annotation which decorates the PostageServiceBean:-",
        "Options": [
            "a) @Interceptors",
            "b) @Autowire",
            "c) @Wire",
            "d) @Mention",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 486,
        "Question": "To declare a JNDI object reference in the Spring IoC container.",
        "Options": [
            "a) JndiObjectFactory",
            "b) JndiObjectFactoryBean",
            "c) JndiObject",
            "d) JndiFactoryBean",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 487,
        "Question": "You can configure the JNDI details for factory bean in:-",
        "Options": [
            "a) jndiEnvironment",
            "b) jndiName",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 488,
        "Question": "Lightweight remoting technologies developed by Caucho Technology.",
        "Options": [
            "a) Hessian",
            "b) Burlap",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 489,
        "Question": "To expose a Hessian or Burlap service, you have to add the:-",
        "Options": [
            "a) Hessian library",
            "b) Burlap library",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 490,
        "Question": "Invoking a Burlap service:-",
        "Options": [
            "a) HessianProxyFactoryBean",
            "b) BurlapProxyFactoryBean",
            "c) BurlapProxyFactory",
            "d) BurlapProxy",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 491,
        "Question": "A web service contract is described using :-",
        "Options": [
            "a) Web Services Description Language",
            "b) Web Services Description",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 492,
        "Question": "In contrast, the contract-first approach encourages you to think of the service contract first in terms of :-",
        "Options": [
            "a) XML",
            "b) XML Schema(.xsd)",
            "c) WSDL",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 493,
        "Question": "Service exporters that can export a bean as a remote service based on the :-",
        "Options": [
            "a) RMI",
            "b) Hessian",
            "c) Burlap",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 494,
        "Question": "The standard for deploying web services on the Java EE platform as of Java EE 1.4:-",
        "Options": [
            "a) JAX-RPC",
            "b) JAX",
            "c) RPC",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 495,
        "Question": "If you are deploying into a Java EE 5 (or better) container, you may simply create a bean that is annotated with:-",
        "Options": [
            "a) javax.jws.WebService",
            "b) javax.jws.WebServiceProvider",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 496,
        "Question": "Spring provides a factory that can export beans annotated with:-",
        "Options": [
            "a) javax.jws.WebService",
            "b) javax.jws.WebServiceProvider",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 497,
        "Question": "Exposing a stand-alone SOAP endpoint using the:-",
        "Options": [
            "a) SimpleJaxWsServiceExporter",
            "b) JAX-WS",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 498,
        "Question": "Factory to use our Spring bean as the implementation:-",
        "Options": [
            "a) jaxws:end",
            "b) jaxws:endpoint",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 499,
        "Question": "Spring-WS provides various abstract endpoint classes for you to process the request.",
        "Options": [
            "a) org.springframework.ws.server.endpoint",
            "b) org.springframework.ws.server",
            "c) org.springframework.*",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 500,
        "Question": "Endpoint Classes for DOM:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 501,
        "Question": "Endpoint Classes for JDOM:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 502,
        "Question": "Endpoint Classes for dom4j:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 503,
        "Question": "Endpoint Classes for XOM:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractJDomPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 504,
        "Question": "Endpoint Classes for SAX:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractXomPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 505,
        "Question": "Endpoint Classes for Event-based StAX:-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractDom4jPayloadEndpoint",
            "d) AbstractStaxEventPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 506,
        "Question": "Endpoint Classes for Streaming StAX :-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractStaxStreamPayloadEndpoint",
            "d) AbstractStaxEventPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 507,
        "Question": "Endpoint Classes for XML marshalling :-",
        "Options": [
            "a) AbstractDomPayloadEndpoint",
            "b) AbstractSaxPayloadEndpoint",
            "c) AbstractStaxStreamPayloadEndpoint",
            "d) AbstractMarshallingPayloadEndpoint",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 508,
        "Question": "If you need to get access to the entire SOAP message, you should write an endpoint class by implementing:-",
        "Options": [
            "a) org.springframework.ws.server.endpoint.MessageEndpoint",
            "b) org.springframework.ws",
            "c) org.springframework.ws.server.endpoint",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 509,
        "Question": "You can create a dom4j endpoint by extending the:-",
        "Options": [
            "a) AbstractDom4jPayloadEndpoint",
            "b) AbstractDom4jPayload",
            "c) AbstractDom4jEndpoint",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 510,
        "Question": "In this method, you can access the request XML element, whose type is org.dom4j.Element, and the response document, whose type is org.dom4j.Document, as method arguments.",
        "Options": [
            "a) invoke",
            "b) invokeInterval",
            "c) invokeInternal",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 511,
        "Question": "Web services can be invoked through the core template class:-",
        "Options": [
            "a) org.springframework.ws.client.core.WebServiceTemplate",
            "b) JDBC Template",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 512,
        "Question": "WebServiceTemplate provides a sendSourceAndReceiveToResult() method that accepts arguments:-",
        "Options": [
            "a) java.xml.transform.Source",
            "b) java.xml.transform.Result",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 513,
        "Question": "To implement endpoints with an XML marshalling technology, you have to extend the:-",
        "Options": [
            "a) AbstractMarshallingPayload",
            "b) AbstractMarshalling",
            "c) AbstractMarshallingPayloadEndpoint",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 514,
        "Question": "Marshaller for JAXB 1.0:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 515,
        "Question": "Marshaller for JAXB 2.0:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 516,
        "Question": "Marshaller for Castor:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 517,
        "Question": "Marshaller for XMLBeans:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.xmlbeans.XmlBeansMarshaller",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 518,
        "Question": "Marshaller for JiBX:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.castor.CastorMarshall",
            "d) org.springframework.oxm.jibx.JibxMarshaller",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 519,
        "Question": "Marshaller for XStream:-",
        "Options": [
            "a) org.springframework.oxm.jaxb.Jaxb1Marshaller",
            "b) org.springframework.oxm.jaxb.Jaxb2Marshaller",
            "c) org.springframework.oxm.xstream.XStreamMarshaller",
            "d) org.springframework.oxm.jibx.JibxMarshaller",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 520,
        "Question": "Spring-WS supports various XML marshalling APIs.",
        "Options": [
            "a) Castor",
            "b) JAXB 1.0",
            "c) XMLBeans",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 521,
        "Question": "A marshalling endpoint requires:-",
        "Options": [
            "a) marshaller",
            "b) unmarshaller",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 522,
        "Question": "Spring-WS supports annotating an arbitrary class as a service endpoint by:-",
        "Options": [
            "a) @Endpoint",
            "b) @End",
            "c) @Point",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 523,
        "Question": "There are two main options for scheduling tasks on the Java platform:-",
        "Options": [
            "a) JDK Timer",
            "b) Quartz Scheduler",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 524,
        "Question": "Connectors to expose your MBeans for remote access over a specific protocol by using a factory bean.",
        "Options": [
            "a) MBeanExporter",
            "b) JSR-160",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 525,
        "Question": "Method, all files in the source directory will be replicated to the destination directory.",
        "Options": [
            "a) replicate",
            "b) copy",
            "c) rep",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 526,
        "Question": "VM argument to enable local monitoring of this application.",
        "Options": [
            "a) -Dcom.sun.management.jmxremote",
            "b) -Dcom.sun.management",
            "c) -Dcom.sun.management.jmx",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 527,
        "Question": "However, in an environment with no MBean server available, you have to create one explicitly using:-",
        "Options": [
            "a) MBeanServerFactoryBean",
            "b) MBeanServerFactory",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 528,
        "Question": "Spring allows you to create a JMX connector server through:-",
        "Options": [
            "a) ConnectorServerFactoryBean",
            "b) ConnectorServer",
            "c) ConnectorServerFactory",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 529,
        "Question": "If no RMI registry has been created externally, you should create one by using:-",
        "Options": [
            "a) RmiRegistryFactory",
            "b) RmiRegistryFactoryBean",
            "c) RmiRegistry",
            "d) RmiRegister",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 530,
        "Question": "The simplest MBean assembler in Spring is, which allows you to specify the names of the methods to export.",
        "Options": [
            "a) MethodNameBasedMBeanInfoAssembler",
            "b) MethodNameBasedMBeanInfo",
            "c) MethodNameBasedMBean",
            "d) MethodNameBasedInfoAssembler",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 531,
        "Question": "Spring allows your beans to publish JMX notifications through:-",
        "Options": [
            "a) NotificationPublisher",
            "b) Notification",
            "c) Notify",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 532,
        "Question": "The core interface of Spring email support is:-",
        "Options": [
            "a) MailSender",
            "b) EMail",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 533,
        "Question": "The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features:-",
        "Options": [
            "a) Multipurpose Internet Mail Extensions",
            "b) Multipurpose Internet Mail",
            "c) Multipurpose Internet Extensions",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 534,
        "Question": "You can implement the interface to send email notifications in case of errors.",
        "Options": [
            "a) Notify",
            "b) Error",
            "c) ErrorNotifier",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 535,
        "Question": "You send the email by making a call to:-",
        "Options": [
            "a) Transport.send()",
            "b) Transport.sendTo()",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 536,
        "Question": "The default port used by JavaMailSenderImpl is the:-",
        "Options": [
            "a) SMTP port 24",
            "b) SMTP port 22",
            "c) SSH port 22",
            "d) SMTP port 25",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 537,
        "Question": "If you have a JavaMail session configured in your Java EE application server, you can first look it up with the help of:-",
        "Options": [
            "a) JndiObjectFactory",
            "b) JndiObjectFactoryBean",
            "c) JndiObject",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 538,
        "Question": "MIME is supported by JavaMail through the:-",
        "Options": [
            "a) javax.mail.internet.Mime",
            "b) javax.mail.internet.Message",
            "c) javax.mail.internet.MimeMessage",
            "d) javax.mail.internet.Mail",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 539,
        "Question": "Quartz supports several types of triggers:-",
        "Options": [
            "a) SimpleTrigger",
            "b) CronTrigger",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 540,
        "Question": "SimpleTrigger allows you to set trigger properties:-",
        "Options": [
            "a) start time",
            "b) end time",
            "c) repeat interval",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 541,
        "Question": "You can configure a Quartz SimpleTrigger object in Spring bean configuration file through:-",
        "Options": [
            "a) SimpleTrigger",
            "b) SimpleTriggerBean",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 542,
        "Question": "Spring 3.0 debuts new support for configuring:-",
        "Options": [
            "a) TaskExecutors",
            "b) TaskSchedulers",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 543,
        "Question": "Template which can send and receive JMS messages with much less code",
        "Options": [
            "a) JmsTemplate",
            "b) EMail",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 544,
        "Question": "The template handles the boilerplate tasks for you and also converts the JMS API JMSException hierarchy into Spring runtime exception:-",
        "Options": [
            "a) org.springframework.jms.Jms",
            "b) org.springframework.jms.JmsException",
            "c) org.springframework.jms.JmsTemplate",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 545,
        "Question": "To address different JMS APIs, Spring provides :-",
        "Options": [
            "a) JmsTemplate",
            "b) JmsTemplate102",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 546,
        "Question": "Before you can send and receive JMS messages, you need to install a JMS message broker:-",
        "Options": [
            "a) Apache ActiveM",
            "b) Apache Active",
            "c) Apache MQ",
            "d) Apache ActiveMQ",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 547,
        "Question": "There are several types of messages defined in the JMS API, including:-",
        "Options": [
            "a) TextMessage",
            "b) MapMessage",
            "c) BytesMessage",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 548,
        "Question": "To send a JMS message with this template, you simply call:-",
        "Options": [
            "a) send",
            "b) sendTo",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 549,
        "Question": "The MessageCreator interface declares method:-",
        "Options": [
            "a) createMessage()",
            "b) create()",
            "c) createMsg()",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 550,
        "Question": "JMS sender and receiver classes can also extend to retrieve a JMS template:-",
        "Options": [
            "a) JmsGatewaySupport",
            "b) JmsGateway",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 551,
        "Question": "When you need access to the JMS template.",
        "Options": [
            "a) setJmsTemplate",
            "b) getJmsTemplate",
            "c) getJms",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 552,
        "Question": "For your front desk and back office classes, you can send and receive a map using the:-",
        "Options": [
            "a) convertAndSend()",
            "b) receiveAndConvert()",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 553,
        "Question": "When you call the receive() method on a JMS message consumer to receive a message.",
        "Options": [
            "a) send",
            "b) receive",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 554,
        "Question": "EJB component which was introduced for asynchronous reception of JMS messages.",
        "Options": [
            "a) message-driven bean",
            "b) message-driven",
            "c) message bean",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 555,
        "Question": "MDB must implements interfaces:-",
        "Options": [
            "a) javax.ejb.MessageDrivenBean",
            "b) javax.jms.MessageListener",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 556,
        "Question": "In EJB 3.0, an MDB can be a POJO that implements the MessageListener interface and is annotated with the:-",
        "Options": [
            "a) @MessageDrive",
            "b) @Message",
            "c) all of the mentioned",
            "d) @MessageDriven",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 557,
        "Question": "A message listener must implement the:-",
        "Options": [
            "a) javax.jms.MessageListener",
            "b) javax.jms.Message",
            "c) javax.jms",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 558,
        "Question": "Method to convert MapMessage Object into Spring runtime exception JmsException.",
        "Options": [
            "a) JmsUtils.convertJmsAccessException()",
            "b) JmsUtils.convertJmsAccess()",
            "c) JmsUtils.convertJms()",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 559,
        "Question": "Spring provides several types of message listener containers:-",
        "Options": [
            "a) SimpleMessageListenerContainer",
            "b) DefaultMessageListenerContainer",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 560,
        "Question": "If you have a transaction requirement in receiving messages, you have to use:-",
        "Options": [
            "a) SimpleMessageListenerContainer",
            "b) DefaultMessageListenerContainer",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 561,
        "Question": "Using Spring JMS support with a very simple instance of:-",
        "Options": [
            "a) org.apache.activemq.ActiveMQConnectionFactory",
            "b) org.apache.activemq.ActiveMQConnection",
            "c) org.apache.activemq.ActiveMQ",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 562,
        "Question": "It caches consumers correctly, or use Spring ConnectionFactory implementations.",
        "Options": [
            "a) MessageListenerContainer",
            "b) MessageListener",
            "c) MessageContainer",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 563,
        "Question": "Implementation which returns the same underlying JMS connection each time (which is thread-safe according to the JMS API) and ignores calls to the close() method.",
        "Options": [
            "a) org.springframework.jms.connection.SingleConnectionFactory",
            "b) org.springframework.jms.connection.Single",
            "c) org.springframework.jms.connection.SingleConnection",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 564,
        "Question": "Integration of Spring which has each application produce files of shared data for others to consume.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 565,
        "Question": "Integration of Spring which has the applications store the data they want to share in a common database.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 566,
        "Question": "Integration of Spring which has each application expose some of its procedures so that they can be invoked remotely and have applications invoke them to initiate behavior and exchange data.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 567,
        "Question": "Integration of Spring which has each application connect to a common messaging system and exchange data and invoke behavior using messages.",
        "Options": [
            "a) File transfer",
            "b) Shared Database",
            "c) Remote Procedure Invocation",
            "d) Messaging",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 568,
        "Question": "The configuration starts with the inboundHelloJMSMessageChannel channel, which tells Spring Integration what to name the point-to-point connection from the message queue to the:-",
        "Options": [
            "a) service-activator",
            "b) service",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 569,
        "Question": "The next component, a service-activator, listens for messages coming into that channel and invokes the bean referenced by the:-",
        "Options": [
            "a) ref",
            "b) after",
            "c) before",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 570,
        "Question": "Headers Found in Spring Integration Messages:-",
        "Options": [
            "a) ID",
            "b) TIMESTAMP",
            "c) CORRELATION_ID",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 571,
        "Question": "Component-specific headers are the constants defined for files on:-",
        "Options": [
            "a) org.springframework.integration.file.FileHeaders: FILENAME",
            "b) org.springframework.integration.file.FileHeaders: PREFIX",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 572,
        "Question": "Annotation to get access to header metadata:-",
        "Options": [
            "a) @Ref",
            "b) @service",
            "c) @Header",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 573,
        "Question": "The code for the service-activator has changed to reflect the fact that you’re expecting a message containing a message of type:-",
        "Options": [
            "a) Message<java.io.File>",
            "b) Message<java.io>",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 574,
        "Question": "To send a message into the bus and transform it before working with it further.",
        "Options": [
            "a) adding extra headers or augmenting the payload",
            "b) transformer",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 575,
        "Question": "Spring Integration provides the ability to catch exceptions and send them to an error channel of your choosing. By default, it’s a global channel called :-",
        "Options": [
            "a) error",
            "b) exceptionChannel",
            "c) exception",
            "d) errorChannel",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 576,
        "Question": "All errors thrown from Spring Integration components will be a subclass of:-",
        "Options": [
            "a) Messaging",
            "b) MessagingException",
            "c) Exception",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 577,
        "Question": "One way to discriminate by Exception type is to use:-",
        "Options": [
            "a) org.springframework.integration.router.ErrorMessageExceptionType",
            "b) org.springframework.integration.router.ErrorMessageException",
            "c) org.springframework.integration.router.ErrorMessageExceptionTypeRouter",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 578,
        "Question": "To fork the process flow from one component to many, either all at once or to a single one based on a predicate condition.",
        "Options": [
            "a) splitter",
            "b) fork",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 579,
        "Question": "Spring Integration ships with useful splitters that require no customization.",
        "Options": [
            "a) Splitter",
            "b) XPathMessageSplitter",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 580,
        "Question": "Return type of the method annotated by the @Splitter annotation is of type:-",
        "Options": [
            "a) java.util.Collection",
            "b) java.util.Date",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 581,
        "Question": "Annotation which collects a series of messages (based on some correlation that you help Spring Integration make between the messages).",
        "Options": [
            "a) @After",
            "b) @Splitter",
            "c) @Aggregator",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 582,
        "Question": "To determine how many messages to read until it can stop:-",
        "Options": [
            "a) SequenceSizeCompletionStrategy",
            "b) SequenceSizeCompletion",
            "c) SequenceSize",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 583,
        "Question": "You want to conditionally move a message through different processes based on some criteria.",
        "Options": [
            "a) router component",
            "b) EAI",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 584,
        "Question": "There are some convenient default routers available to fill common needs:-",
        "Options": [
            "a) PayloadTypeRouter",
            "b) PayloadType",
            "c) Payload",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 585,
        "Question": "To receive messages from an external system and process them using Spring Integration.",
        "Options": [
            "a) channel",
            "b) channel adapter",
            "c) EJP",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 586,
        "Question": "Sometimes, functionality is made available from within the application via:-",
        "Options": [
            "a) Stable API",
            "b) Cohesive API",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 587,
        "Question": "To take an input file or a payload and reliably, and systematically, decompose it into events that an ESB can work with:-",
        "Options": [
            "a) Splitter",
            "b) Spring Batch",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 588,
        "Question": "Spring Batch reads the file, transforms the records into:-",
        "Options": [
            "a) objects",
            "b) outputs",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 589,
        "Question": "You want to expose an interface to clients of your service, without betraying the fact that your service is implemented in terms of messaging middleware.",
        "Options": [
            "a) Enterprise Integration Patterns",
            "b) Gateway",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 590,
        "Question": "Serving to abstract away the functionality of other components in an abbreviated interface to provide courser functionality.",
        "Options": [
            "a) facade",
            "b) façade",
            "c) gateway",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 591,
        "Question": "The capability to hide messaging behind a POJO interface.",
        "Options": [
            "a) Lingo",
            "b) JCA",
            "c) JMS",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 592,
        "Question": "The most fundamental support for gateways comes from the Spring Integration class:-",
        "Options": [
            "a) SimpleMessagingGateway",
            "b) SimpleMessaging",
            "c) SimpleGateway",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 593,
        "Question": "Messages sent on the requests channel are forwarded to the:-",
        "Options": [
            "a) jms:outbound-gateway",
            "b) jms:outbound",
            "c) jms-gateway",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 594,
        "Question": "Spring Batch provides a lot of flexibility and guarantees to your application, but it cannot work in a vacuum. To do its work:-",
        "Options": [
            "a) Job",
            "b) JobRepo",
            "c) JobRepository",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 595,
        "Question": "There’s only one really useful implementation of the JobRepository interface, which stores information about the state of the batch processes in a database.",
        "Options": [
            "a) SimpleJobRepository",
            "b) SimpleJob",
            "c) SimpleRepo",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 596,
        "Question": "To load the contents of a properties file (batch.properties) whose values you use to configure the data source.",
        "Options": [
            "a) PropertyPlaceholder",
            "b) PropertyPlaceholderConfigurer",
            "c) Property",
            "d) PropertyConfigurer",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 597,
        "Question": "Indeed, a step could be considered the smallest unit of work for a job. Input (what’s read) is passed to the Step and potentially processed; then output (what’s written) is created from the step.",
        "Options": [
            "a) Steplet",
            "b) Tasklet",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 598,
        "Question": "Attribute to configure how many items will be processed before the transaction is committed all the input is sent to the writer.",
        "Options": [
            "a) interval",
            "b) commit",
            "c) commit-interval",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 599,
        "Question": "Class which delegates the task of delimiting fields and records within a file to a LineMapper, which in turn delegates the task of identifying the fields within that record, to LineTokenizer.",
        "Options": [
            "a) org.springframework.batch.item.file.FlatFileItemReader",
            "b) org.springframework.batch.item.file.FlatFile",
            "c) org.springframework.batch.item.file.FlatFileItem",
            "d) org.springframework.batch.item.file.FileItemReader",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 600,
        "Question": "The names and values for the named parameters are being created by the bean configured for the itemSqlParameterSourceProvider property, an instance of the interface",
        "Options": [
            "a) BeanPropertyItemSqlParameterSourceProvider",
            "b) BeanPropertyItemSqlParameterSource",
            "c) BeanPropertyItemSqlParameter",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 601,
        "Question": "There’s support for writing JMS:-",
        "Options": [
            "a) JmsItemWriter",
            "b) JpaItemWriter",
            "c) JdbcBatchItemWriter",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 602,
        "Question": "The processor attribute on the chunk element expects a reference to a bean of the interface:-",
        "Options": [
            "a) org.springframework.batch.item.Item",
            "b) org.springframework.batch.item",
            "c) org.springframework.batch.item.ItemProcessor",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 603,
        "Question": "If the preceding job was run on a batch with a 100 rows, each item was read and passed through the processor, and it found 10 items invalid (it returned null 10 times), the value for the filter_count column would be:-",
        "Options": [
            "a) 100",
            "b) 1",
            "c) 10",
            "d) 1000",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 604,
        "Question": "Spring core framework provides first-class support for transactions.",
        "Options": [
            "a) Transaction",
            "b) TransactionManager",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 605,
        "Question": "The batch.xml file establishes a:-",
        "Options": [
            "a) BasicDataSource",
            "b) DataSourceTransactionManager",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 606,
        "Question": "Spring Batch will, by default, try to pluck the:-",
        "Options": [
            "a) PlatformTransactionManager",
            "b) transactionManager",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 607,
        "Question": "Element to configure this for the step:-",
        "Options": [
            "a) no-rollback-exception-classes",
            "b) no-rollback-exception",
            "c) no-rollback",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 608,
        "Question": "You want to work with a resource that may fail when you try to read from or write to it.",
        "Options": [
            "a) TransactionManager",
            "b) Transaction",
            "c) Spring batch retry",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 609,
        "Question": "The template that (much like its various other Template cousins) isolates your logic from the nuances of retries and instead enables you to write the code as though you were only going to attempt it once.",
        "Options": [
            "a) Retry",
            "b) RetryTemplate",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 610,
        "Question": "One of the more useful settings for the RetryTemplate is the :-",
        "Options": [
            "a) BackOff",
            "b) Back",
            "c) BackOffPolicy",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 611,
        "Question": "You want to control how steps are executed, perhaps to eliminate a needless waste of time by:-",
        "Options": [
            "a) concurrent steps",
            "b) decisions",
            "c) sequential steps",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 612,
        "Question": "Spring Batch provides a mechanism to offload processing to another process.",
        "Options": [
            "a) chunking",
            "b) remote chunking",
            "c) remote",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 613,
        "Question": "Pattern which refers to the arrangement of multiple JMS clients all consuming the same queue messages.",
        "Options": [
            "a) aggressive-consumer",
            "b) aggressive",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 614,
        "Question": "Spring Batch ships with only handler, which executes steps in multiple threads using a TaskExecutor strategy.",
        "Options": [
            "a) TaskExecutorPartition",
            "b) TaskExecutorPartitionHandler",
            "c) TaskExecutorPartitionHandle",
            "d) TaskExecutor",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 615,
        "Question": "To determine the next step is the simplest example of a conditional flow.",
        "Options": [
            "a) Exit",
            "b) Status",
            "c) ExitStatus",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 616,
        "Question": "If you want to vary the execution flow based on some logic more complex than a job’s ExitStatuses:-",
        "Options": [
            "a) ExitStatus",
            "b) Exit",
            "c) Decision",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 617,
        "Question": "Spring Batch work with a system scheduler:-",
        "Options": [
            "a) cron",
            "b) autosys",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 618,
        "Question": "TaskExecutor that will spawn a thread of execution and manage that thread without blocking.",
        "Options": [
            "a) Async",
            "b) Sync",
            "c) Simple",
            "d) SimpleAsyncTaskExecutor",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 619,
        "Question": "The CommandLineJobRunner for success will return system error codes:-",
        "Options": [
            "a) 0",
            "b) 1",
            "c) 2",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 620,
        "Question": "More complicated return codes can be returned by creating and declaring a top-level bean that implements the interface:-",
        "Options": [
            "a) ExitCode",
            "b) ExitCodeMapper",
            "c) ExitMapper",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 621,
        "Question": "The bean is recognized and becomes part of the application context because of the:-",
        "Options": [
            "a) @Component",
            "b) @Attr",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 622,
        "Question": "To parameterize a job, which is then available to your steps through Spring Batch expression language.",
        "Options": [
            "a) Job",
            "b) Steps",
            "c) JobParameters",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 623,
        "Question": "You want to share object state across multiple virtual machines.",
        "Options": [
            "a) Terracotta",
            "b) Hibernate Transaction",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 624,
        "Question": "The company, Terracotta, has also recently become the corporate sponsor of:-",
        "Options": [
            "a) Ehcache",
            "b) Quartz",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 625,
        "Question": "To deploy a Terracotta application, you first download the distribution. The distribution provides :-",
        "Options": [
            "a) utility scripts",
            "b) JAR files",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 626,
        "Question": "On Unix-like operating systems, you start Terracotta as :-",
        "Options": [
            "a) $TERRACOTTA HOME/bin/start-tc-server.sh –f $PATH TO TERRACOTTA CONFIGURATION",
            "b) $TERRACOTTA HOME/bin/start-tc-server.sh –f $PATH TO TERRACOTTA",
            "c) $TERRACOTTA HOME/bin/start-tc-server.sh –f $PATH TO TERRACOTTA bin",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 627,
        "Question": "To use the script on Unix-like operating systems:",
        "Options": [
            "a) $TERRACOTTA HOME/bin/dso-env.sh $HOST:3312",
            "b) $TERRACOTTA HOME/bin/dso-env.sh $HOST:$PORT",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 628,
        "Question": "To distribute processing over many nodes, perhaps to increase result speed through the use of concurrences, perhaps merely to provide load balance and fault tolerance.",
        "Options": [
            "a) Grid",
            "b) GridGain",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 629,
        "Question": "There are many data grids, such as :-",
        "Options": [
            "a) Coherence",
            "b) Terracotta",
            "c) Hadoop’s HFS",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 630,
        "Question": "Map/reduce is a pattern that was popularized by Google, and it comes from functional programming languages, which often have:-",
        "Options": [
            "a) map",
            "b) reduce",
            "c) none of the mentioned",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 631,
        "Question": "To quickly grid-enable a method on a bean using GridGain.",
        "Options": [
            "a) @Gridify",
            "b) @Grid",
            "c) @GridGain",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 632,
        "Question": "GridGain provides:-",
        "Options": [
            "a) load balancing",
            "b) fault tolerance",
            "c) routing",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 633,
        "Question": "To build a parallelized solution for a problem that’s intrinsically better-suited to parallelization or that, for want of resources, needs to be chunked.",
        "Options": [
            "a) map",
            "b) reduce",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 634,
        "Question": "GridGain works with a GridTask, which specifies how to handle the main unit of work of the interface type:-",
        "Options": [
            "a) Grid",
            "b) GridGain",
            "c) GridJob",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 635,
        "Question": "GridGain lets you start up nodes using the startup script in the:-",
        "Options": [
            "a) etc",
            "b) opt",
            "c) bin",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 636,
        "Question": "To hoist a grid node into existence.",
        "Options": [
            "a) GridLoader",
            "b) GridLoad",
            "c) Grid",
            "d) GridGain",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 637,
        "Question": "When you use the script that comes with the distribution is the class:-",
        "Options": [
            "a) GridCommandLine",
            "b) GridCommandLineLoader",
            "c) GridCommand",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 638,
        "Question": "A GridLoader instance is responsible for many things such as:-",
        "Options": [
            "a) GridFactory.start",
            "b) GridFactory.stop",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 639,
        "Question": "GridFactory.start can take as its first parameter a:-",
        "Options": [
            "a) GridConfiguration object",
            "b) Spring application context",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 640,
        "Question": "The file which enables you to tell GridGain about which GridTask classes are deployed:-",
        "Options": [
            "a) gridgain.xml",
            "b) gridgain.html",
            "c) grid.xml",
            "d) gridify.xml",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 641,
        "Question": "Instances of the ApplicationContext can be injected into the various GridGain class instances (GridTask, GridJob, and so forth) using GridGain:-",
        "Options": [
            "a) @Grid",
            "b) @GridGain",
            "c) @Gridify",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 642,
        "Question": "This is the default implementation. It is used when you run gridgain.sh or gridgain.bat.",
        "Options": [
            "a) org.gridgain.grid.loaders.cmdline.GridCommandLineLoader",
            "b) org.gridgain.grid.loaders.servlet.GridServletLoader",
            "c) org.gridgain.grid.loaders.jboss.GridJbossLoader",
            "d) org.gridgain.grid.loaders.weblogic.GridWeblogicStartup",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 643,
        "Question": "This is likely the second most useful implementation. It provides a servlet that bootstraps the GridGain instance inside any web container as a servlet.",
        "Options": [
            "a) org.gridgain.grid.loaders.cmdline.GridCommandLineLoader",
            "b) org.gridgain.grid.loaders.servlet.GridServletLoader",
            "c) org.gridgain.grid.loaders.jboss.GridJbossLoader",
            "d) org.gridgain.grid.loaders.weblogic.GridWeblogicStartup",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 644,
        "Question": "A workflow engine lets you model the process in a higher-level form:-",
        "Options": [
            "a) XML",
            "b) Use Case",
            "c) UML",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 645,
        "Question": "A language that, when deployed to a BPEL container, describes the execution of a process.",
        "Options": [
            "a) WS-BPEL (BPEL 2.0)",
            "b) WS-BPEL (BPEL)",
            "c) WS-BPEL for People (BPEL4People)",
            "d) Business Process Modeling Notation (BPMN)",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 646,
        "Question": "The main feature common to traditional workflow systems is the ability to support work lists for actors in a process.",
        "Options": [
            "a) WS-BPEL (BPEL 2.0)",
            "b) WS-BPEL (BPEL)",
            "c) WS-BPEL for People (BPEL4People)",
            "d) Business Process Modeling Notation (BPMN)",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 647,
        "Question": "This provides a set of diagramming notations that describe a business process. This notation is akin to UML activity diagram.",
        "Options": [
            "a) WS-BPEL (BPEL 2.0)",
            "b) WS-BPEL (BPEL)",
            "c) WS-BPEL for People (BPEL4People)",
            "d) Business Process Modeling Notation (BPMN)",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 648,
        "Question": "A way of letting your process rest in a known condition indefinitely.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Subprocess",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 649,
        "Question": "A pause in the action that can only move forward when a known actor or agent in the system moves it forward.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Subprocess",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 650,
        "Question": "An aggregation of states, activities, and other types of constructs that serializes them.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Subprocess",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 651,
        "Question": "A concurrent execution of multiple threads of execution at the same time, originating from a common thread.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Sequence",
            "d) Fork or concurrence or split",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 652,
        "Question": "Each department may have its own task list to complete in order to achieve the goals of the overarching process.",
        "Options": [
            "a) State",
            "b) Activity",
            "c) Subprocess",
            "d) Fork or concurrence or split",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 653,
        "Question": "JBPM supports databases such as:-",
        "Options": [
            "a) Oracle",
            "b) SQL Server",
            "c) MySql",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 654,
        "Question": "To make use of jBPM from within a Spring application context.",
        "Options": [
            "a) org.jbpm.pvm.internal.cfg.SpringConfiguration",
            "b) org.jbpm.pvm.internal.cfg.Spring",
            "c) org.jbpm.pvm.internal.cfg.*",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 655,
        "Question": "To use jBPM as a stand-alone process server:-",
        "Options": [
            "a) Javax",
            "b) JBoss",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 656,
        "Question": "jBPM is, fundamentally, a runtime that stores its state and jobs in a database. It uses:-",
        "Options": [
            "a) Hibernate",
            "b) Spring",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 657,
        "Question": "To have an annotated class be registered as a Hibernate entity, it needs to be registered with the:-",
        "Options": [
            "a) AnnotationSessionFactory",
            "b) AnnotationSessionFactoryBean",
            "c) AnnotationSession",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 658,
        "Question": "Because our jBPM configuration uses Hibernate, we have to configure the :-",
        "Options": [
            "a) AnnotatedSessionFactory",
            "b) AnnotatedSessionFactoryBean",
            "c) None of the mentioned",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 659,
        "Question": "The next bean—the dataSource—is configured entirely at your discretion. The properties are set using properties in the properties file :-",
        "Options": [
            "a) jbpm4.xml",
            "b) jbpm.properties",
            "c) jbpm4.properties",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 660,
        "Question": "jBPM will expose beans using the:-",
        "Options": [
            "a) jBPM expression language",
            "b) jBoss",
            "c) Spring expression language",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 661,
        "Question": "The business process file’s name needs to end in :-",
        "Options": [
            "a) jpdl",
            "b) xml",
            "c) jpdl.xml",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 662,
        "Question": "At the top, we’ve injected some dependencies:",
        "Options": [
            "a) springConfiguration",
            "b) repositoryService",
            "c) executionService",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 663,
        "Question": "Once in the java element named send-verification-email, jBPM will invoke the method:-",
        "Options": [
            "a) sendCustomerVerificationEmail",
            "b) sendCustomerVerification",
            "c) veifyCustomerVerificationEmail",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 664,
        "Question": "Inside authorizeCustomer, the service queries the server for the any processes waiting at the:-",
        "Options": [
            "a) confirm-receipt-of-verification",
            "b) confirm-receipt",
            "c) confirm-receipt-of-verification-email",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 665,
        "Question": "OSGi—which was formerly known as the:-",
        "Options": [
            "a) Open Services Gateway initiative",
            "b) Open Source Gateway initiative",
            "c) Open Services Gateway initialisation",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 666,
        "Question": "User component models are:-",
        "Options": [
            "a) OSGi",
            "b) Spring",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 667,
        "Question": "“Service” doesn’t imply any:-",
        "Options": [
            "a) RPC",
            "b) inheritance",
            "c) transactional qualities",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 668,
        "Question": "Tool which dynamically interrogates classes for their imports and generates OSGi–compliant entries.",
        "Options": [
            "a) pnd",
            "b) jndi",
            "c) bnd",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 669,
        "Question": "The Bundle-Activator directive describes to the OSGi environment, which class implements :-",
        "Options": [
            "a) BundleActivator",
            "b) BundleActivate",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 670,
        "Question": "When the bundle begins to load and start, it calls the start method of the:-",
        "Options": [
            "a) BundleActivator",
            "b) Activator",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 671,
        "Question": "To start using Spring to smooth over some of the minutiae of resource acquisition and to help build more reliable systems in an OSGi environment.",
        "Options": [
            "a) Spring DM server",
            "b) Spring Dynamic Modules",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 672,
        "Question": "You’ll split your OSGi–specific Spring configuration and your plain-vanilla Spring configuration into:-",
        "Options": [
            "a) modulename-context.xml",
            "b) modulename-osgi-context.xml",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 673,
        "Question": "To create services and have those automatically installed in the registry.",
        "Options": [
            "a) Spring Dynamic Modules",
            "b) Spring DM Server",
            "c) Spring Tooling",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 674,
        "Question": "Element to export the bean as an OSGi service, classified by the interface we specify.",
        "Options": [
            "a) osgix",
            "b) osgi:service",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 675,
        "Question": "The first, most direct connection to OSGi is the bean that’s created on your behalf when you export a service. This bean, an instance of:-",
        "Options": [
            "a) org.osgi.framework.ServiceRegistration",
            "b) org.osgi.framework.Service",
            "c) org.osgi.framework.ServiceRegister",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 676,
        "Question": "Sometimes, you may want to limit the visibility of a service so that multiple clients each get their own instance of the bean.",
        "Options": [
            "a) time",
            "b) scope",
            "c) attr",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 677,
        "Question": "Spring Dynamic Modules also supports injection and manipulation of bundles themselves. An injected bundle is of type:-",
        "Options": [
            "a) org.osgi.framework.savedBundle",
            "b) org.osgi.framework.Bundle",
            "c) org.osgi.framework.BundleInstance",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 678,
        "Question": "When specified on a service element, allows the ascription of a rank relative to other beans with the same interface.",
        "Options": [
            "a) Ranking",
            "b) Service",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 679,
        "Question": "Attribute, which, is the symbolic name of another bundle.",
        "Options": [
            "a) Fragment",
            "b) Fragment-Host",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 680,
        "Question": "Support for deployment of traditional .war artifacts, enable use of some of the standard Java EE libraries, provide useful defaults for many de facto standard libraries, and provide fully integrated support for Spring Dynamic Modules.",
        "Options": [
            "a) Spring Dynamic Modules",
            "b) Spring dm Server",
            "c) Spring Tooling",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 681,
        "Question": "Spring Dynamic Modules was, while powerful for those already invested in an OSGi platform, not the most natural accommodations for those trying to migrate large code into the OSGi environment, SpringSource created.",
        "Options": [
            "a) Spring Dynamic Modules",
            "b) Spring dm Server",
            "c) Spring Tooling",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 682,
        "Question": "SpringSource dm Server many advances focus on delivering a solution, and not just a framework, for delivering:-",
        "Options": [
            "a) Spring Tooling",
            "b) Spring dm",
            "c) OSGi",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 683,
        "Question": "SpringSource dm Server works with several types of deployment formats:-",
        "Options": [
            "a) bundle",
            "b) Java EE .war",
            "c) platform archive",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 684,
        "Question": "Application isolation is critical because it allows you to solve the issue of reconciliation of two services whose interfaces collide. You can use:-",
        "Options": [
            "a) .WAR",
            "b) .XML",
            "c) .PAR",
            "d) All of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 685,
        "Question": "To begin with SpringSource dm Server but need a way to rapidly turnaround development.",
        "Options": [
            "a) Spring Dynamic Module",
            "b) Spring Dynamic Server",
            "c) SpringSource dm Server",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 686,
        "Question": "SpringSource has provided solid tooling for Eclipse, called :-",
        "Options": [
            "a) Spring Dynamic Module",
            "b) dm Server Tools",
            "c) SpringSource dm Server",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 687,
        "Question": "These tools—part of the broader SpringSource Tool Suite—are available as :-",
        "Options": [
            "a) plug-in",
            "b) stand-alone environment",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 688,
        "Question": "Java provides a mechanism, where an object can be represented as a sequence of bytes:-",
        "Options": [
            "a) Serialization",
            "b) Compilation",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 689,
        "Question": "Classes which are high-level streams that contain the methods for serializing and deserializing an object.",
        "Options": [
            "a) ObjectInputStream",
            "b) ObjectOutputStream",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 690,
        "Question": "The ObjectOutputStream class contains methods for writing various data types.",
        "Options": [
            "a) public final void writeObject(Object x)",
            "b) public final void write(Object x)",
            "c) public final void writeToObject(Object x)",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 691,
        "Question": "The ObjectInputStream class contains methods for writing various data types.",
        "Options": [
            "a) public final Object readObject()",
            "b) public final Object read(Object x)",
            "c) public final Object readFromObject(Object x)",
            "d) all of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 692,
        "Question": "For a class to be serialized successfully:",
        "Options": [
            "a) The class must implement the java.io.Serializable interface.",
            "b) Every field in the class must be volatile.",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 693,
        "Question": "When serializing an object to a file, the standard convention in Java is to give the file a:",
        "Options": [
            "a) .war",
            "b) .java",
            "c) .ser",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 694,
        "Question": "What will be the value of transient field after deserialization:-",
        "Options": [
            "a) 0",
            "b) NULL",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 695,
        "Question": "To send an email using your Java Application:-",
        "Options": [
            "a) JavaMail API",
            "b) Java Activation Framework (JAF)",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 696,
        "Question": "If you want to send an email to multiple recipients:-",
        "Options": [
            "a) void addRecipients(Message.RecipientType type, Address[] addresses)",
            "b) void addRecipients(Message.RecipientType type)",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 697,
        "Question": "To set content whose second argument is “text/html” to specify that the HTML content is included in the message.",
        "Options": [
            "a) setContent",
            "b) content",
            "c) setMail",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: d"
    },
    {
        "id": 698,
        "Question": "If it is required to provide user ID and Password to the email server for authentication purpose then you can set properties:",
        "Options": [
            "a) props.setProperty(“mail.user”, “myuser”)",
            "b) props.setProperty(“mail.password”, “mypwd”)",
            "c) all of the mentioned",
            "d) none of the mentioned",
            ""
        ],
        "Answer": "Answer: b"
    },
    {
        "id": 699,
        "Question": "The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features:-",
        "Options": [
            "a) Multipurpose Internet Mail Extensions",
            "b) Multipurpose Internet Mail",
            "c) Multipurpose Internet Extensions",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    },
    {
        "id": 700,
        "Question": "You can implement the interface to send email notifications in case of errors.",
        "Options": [
            "a) Notify",
            "b) Error",
            "c) ErrorNotifier",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: c"
    },
    {
        "id": 701,
        "Question": "You send the email by making a call to:-",
        "Options": [
            "a) Transport.send()",
            "b) Transport.sendTo()",
            "c) All of the mentioned",
            "d) None of the mentioned",
            ""
        ],
        "Answer": "Answer: a"
    }
]